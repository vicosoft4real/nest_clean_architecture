var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddCategoryCommand.html",[0,0.201,1,2.56]],["body/classes/AddCategoryCommand.html",[0,0.26,1,4.134,2,0.918,3,0.18,4,0.18,5,0.157,6,4.357,7,2.335,8,3.091,9,5.034,10,1.705,11,1.229,12,0.349,13,1.534,14,2.915,15,0.885,16,1.087,17,3.911,18,1.309,19,0.64,20,5.034,21,0.805,22,0.015,23,0.468,24,0.734,25,5.034,26,0.18,27,3.578,28,0.012,29,0.012]],["title/classes/AddCategoryCommandHandler.html",[0,0.201,30,2.765]],["body/classes/AddCategoryCommandHandler.html",[0,0.169,1,4.608,2,0.599,3,0.117,4,0.117,5,0.103,7,1.522,8,3.701,10,1.596,11,1.346,12,0.227,15,0.839,16,1.017,19,0.562,21,0.882,22,0.016,23,0.41,24,0.804,26,0.117,28,0.009,29,0.009,30,3.35,31,2.84,32,4.079,33,4.712,34,1.665,35,3.92,36,1.198,37,2.437,38,2.561,39,2.354,40,3.35,41,3.281,42,3.275,43,3.386,44,3.114,45,3.281,46,3.101,47,3.35,48,3.281,49,1.15,50,2.082,51,4.079,52,3.281,53,1.687,54,0.755,55,1.783,56,0.769,57,2.332,58,1.384,59,2.015,60,1.891,61,2.159,62,1.601,63,2.015,64,3.281,65,2.549,66,1.469,67,2.332,68,2.332,69,1.41,70,1.522,71,3.281,72,3.281,73,2.332,74,1.45,75,1.891]],["title/classes/AddCategoryDto.html",[0,0.201,76,2.765]],["body/classes/AddCategoryDto.html",[0,0.32,2,0.903,3,0.177,4,0.177,5,0.155,12,0.343,13,1.518,15,0.814,18,1.134,19,0.504,22,0.016,23,0.368,26,0.177,28,0.012,29,0.012,54,0.707,66,2.119,75,2.852,76,4.418,77,4.282,78,1.993,79,3.844,80,3.844,81,4.948,82,2.883,83,1.993,84,4.83,85,4.83,86,3.517,87,2.689]],["title/classes/AddTodoCommand.html",[0,0.201,88,2.389]],["body/classes/AddTodoCommand.html",[0,0.223,2,0.788,3,0.154,4,0.154,5,0.135,11,1.866,12,0.299,13,1.391,14,3.512,15,0.683,16,1.23,18,1.285,19,0.69,21,0.691,22,0.015,23,0.504,24,0.63,26,0.203,28,0.011,29,0.011,88,3.498,89,3.357,90,2.73,91,2.837,92,3.74,93,2.499,94,4.321,95,4.321,96,4.321,97,4.321,98,1.404,99,1.055,100,1.099]],["title/classes/AddTodoCommandHandler.html",[0,0.201,101,2.765]],["body/classes/AddTodoCommandHandler.html",[0,0.16,2,0.565,3,0.111,4,0.111,5,0.097,7,1.437,8,3.602,10,1.987,11,1.432,12,0.214,15,0.639,16,0.976,19,0.544,21,0.853,22,0.016,23,0.397,24,0.778,26,0.111,28,0.009,29,0.009,32,3.912,34,1.597,35,3.793,36,1.149,37,2.358,38,2.456,39,2.301,40,3.213,43,3.277,44,3.043,47,3.213,49,1.103,50,1.997,51,3.912,53,2.324,54,0.765,55,1.683,56,0.726,57,2.201,58,1.306,59,1.902,62,1.511,63,1.902,66,1.409,67,2.201,68,2.201,69,1.352,70,1.437,73,3.213,74,1.997,75,2.605,88,4.233,90,2.513,91,1.821,101,3.213,102,2.681,103,4.519,104,1.597,105,1.902,106,2.862,107,3.097,108,2.205,109,3.097,110,3.097,111,1.592,112,1.785,113,2.456,114,2.201,115,3.097,116,2.038,117,3.097,118,3.097,119,3.213]],["title/classes/AddTodoDto.html",[0,0.201,120,2.765]],["body/classes/AddTodoDto.html",[0,0.284,2,0.749,3,0.147,4,0.147,5,0.128,11,1.517,12,0.284,13,1.345,18,1.005,19,0.633,22,0.016,23,0.462,24,0.803,26,0.147,28,0.011,29,0.011,54,0.706,66,2.222,75,3.174,78,2.503,79,4.279,80,3.191,82,3.08,83,1.654,84,4.279,85,4.279,86,2.919,87,2.993,90,2.503,91,2.503,93,2.031,120,3.915,121,3.554,122,4.089,123,4.106,124,4.106,125,4.106,126,4.106,127,4.106,128,4.106,129,4.767,130,5.507,131,4.106,132,3.191,133,2.919]],["title/classes/AllExceptionFilter.html",[0,0.201,134,3.023]],["body/classes/AllExceptionFilter.html",[0,0.145,2,0.513,3,0.1,4,0.1,5,0.088,10,0.952,12,0.195,15,0.604,16,0.607,19,0.514,21,0.806,22,0.016,23,0.375,24,0.735,26,0.1,28,0.008,29,0.008,34,1.487,36,1.07,39,1.86,43,4.117,49,1.027,53,2.163,54,0.573,56,0.659,66,0.876,69,1.882,74,2.882,100,1.282,134,3.269,135,2.434,136,5.042,137,5.598,138,5.042,139,2.434,140,3.226,141,2.812,142,3.269,143,4.208,144,4.364,145,5.598,146,2.812,147,2.812,148,4.26,149,5.21,150,2.812,151,3.944,152,5.042,153,2.812,154,2.812,155,2.812,156,2.434,157,2.812,158,2.812,159,2.434,160,2.812,161,2.812,162,4.208,163,2.812,164,2.812,165,2.812,166,2.812,167,3.918,168,4.26,169,2.812,170,2.812,171,2.812,172,2.812,173,1.85,174,2.812,175,2.812,176,2.812,177,3.269,178,2.812,179,3.642,180,2.769,181,3.642,182,4.208,183,5.598,184,4.208,185,4.208,186,2.812,187,2.812]],["title/modules/ApiModule.html",[188,1.567,189,2.56]],["body/modules/ApiModule.html",[0,0.264,3,0.183,4,0.183,5,0.16,22,0.016,26,0.183,28,0.013,29,0.013,54,0.821,56,1.201,58,2.16,188,2.559,189,4.18,190,2.499,191,5.123,192,4.515,193,4.908,194,4.908,195,5.498,196,5.123,197,5.123,198,3.371]],["title/modules/AppModule.html",[188,1.567,199,2.765]],["body/modules/AppModule.html",[0,0.202,3,0.14,4,0.14,5,0.123,22,0.016,26,0.14,28,0.011,29,0.011,54,0.818,56,0.92,188,2.152,189,4.629,190,1.915,198,3.515,199,5.55,200,3.28,201,3.398,202,3.398,203,4.319,204,4.629,205,4.319,206,4.629,207,4.629,208,3.797,209,2.79,210,2.79,211,3.926,212,3.926,213,3.926,214,3.926,215,3.926,216,3.926,217,3.926]],["title/entities/Category.html",[11,0.95,218,2.56]],["body/entities/Category.html",[0,0.224,3,0.155,4,0.155,5,0.136,11,1.394,12,0.3,13,1.394,15,0.765,18,1.042,19,0.65,22,0.016,23,0.475,26,0.155,28,0.011,29,0.011,54,0.649,78,2.572,99,1.559,100,1.452,104,2.267,218,3.758,219,2.854,220,3.754,221,5.526,222,4.337,223,5.526,224,4.337,225,4.337,226,4.943,227,4.943,228,4.943,229,4.337,230,3.754,231,5.711,232,3.37]],["title/interfaces/Category-1.html",[11,0.793,98,1.055,233,2.309]],["body/interfaces/Category-1.html",[0,0.254,3,0.176,4,0.176,5,0.154,11,1.738,12,0.341,13,1.513,14,3.147,15,0.853,16,1.064,18,1.299,22,0.015,23,0.461,26,0.221,28,0.012,29,0.012,88,3.025,89,3.828,90,1.985,91,1.985,93,1.817,98,1.601,99,1.738,100,1.725,234,2.533]],["title/controllers/CategoryController.html",[194,2.765,235,2.56]],["body/controllers/CategoryController.html",[0,0.148,1,1.891,3,0.103,4,0.103,5,0.09,7,1.333,10,1.449,11,0.702,12,0.199,15,0.513,16,0.621,19,0.52,21,0.46,22,0.016,23,0.214,24,0.419,26,0.103,28,0.008,29,0.008,36,1.088,37,3.048,39,1.578,49,1.247,54,0.829,56,0.674,58,1.212,66,1.333,69,1.529,70,2.37,74,1.27,76,4.023,78,2.058,83,1.158,87,2.325,133,2.043,149,2.233,177,2.233,192,2.043,194,3.041,235,1.891,236,2.488,237,2.488,238,6.05,239,5.659,240,5.659,241,2.874,242,2.488,243,4.422,244,2.874,245,4.422,246,2.874,247,2.874,248,2.874,249,2.874,250,3.041,251,2.874,252,2.488,253,3.702,254,4.422,255,4.422,256,2.043,257,2.874,258,2.815,259,2.874,260,2.874,261,2.874,262,1.765,263,2.488,264,2.488,265,3.702,266,2.488,267,2.815,268,2.488,269,2.043,270,2.488,271,2.815,272,2.874,273,1.765,274,2.488,275,2.874,276,2.874,277,2.488,278,2.043,279,2.874,280,2.874,281,3.702,282,3.702,283,1.969,284,4.278,285,2.874,286,2.874,287,2.874,288,2.874,289,2.488,290,2.874,291,2.488,292,2.874,293,2.488]],["title/classes/CategoryDto.html",[0,0.201,122,2.56]],["body/classes/CategoryDto.html",[0,0.258,2,0.914,3,0.179,4,0.179,5,0.157,12,0.347,13,1.53,15,0.819,18,1.143,19,0.638,22,0.015,23,0.466,26,0.179,28,0.012,29,0.012,54,0.57,78,2.524,82,3.42,83,2.019,99,1.669,100,1.593,122,4.123,294,4.338,295,5.012,296,5.012]],["title/classes/CategoryPresenter.html",[0,0.201,256,2.765]],["body/classes/CategoryPresenter.html",[0,0.216,2,0.765,3,0.15,4,0.15,5,0.131,11,1.024,12,0.291,13,1.364,15,0.802,16,0.906,18,1.019,19,0.682,21,0.671,22,0.016,23,0.498,24,0.612,26,0.15,28,0.011,29,0.011,54,0.714,62,3.064,63,2.576,78,2.53,82,3.396,83,1.69,99,1.533,100,1.421,104,1.879,119,2.982,256,3.971,262,4.112,263,3.631,297,3.631,298,4.836,299,5.587,300,4.195,301,4.195,302,2.761,303,3.26,304,2.982]],["title/injectables/CategoryRepository.html",[46,2.56,305,1.435]],["body/injectables/CategoryRepository.html",[0,0.105,3,0.073,4,0.073,5,0.064,10,1.747,11,1.647,12,0.141,15,0.764,16,0.707,18,0.749,19,0.633,21,0.926,22,0.016,23,0.431,24,0.844,26,0.073,28,0.006,29,0.006,34,0.72,36,0.833,37,3.15,39,2.136,42,1.78,46,2.155,49,1.47,50,2.934,54,0.685,56,0.477,61,1.34,62,3.18,63,1.25,66,0.635,69,1.801,70,2.555,99,1.149,100,1.401,104,1.408,113,1.78,114,1.447,168,3.345,283,2.32,305,1.208,306,1.107,307,1.762,308,4.073,309,4.073,310,2.834,311,2.834,312,2.328,313,2.834,314,2.834,315,2.834,316,2.036,317,4.073,318,2.036,319,2.834,320,2.036,321,2.036,322,2.834,323,2.036,324,2.834,325,2.036,326,2.834,327,2.036,328,2.834,329,2.036,330,2.834,331,2.036,332,2.834,333,3.275,334,2.036,335,3.275,336,1.762,337,1.34,338,1.762,339,1.582,340,1.582,341,1.762,342,1.762,343,2.036,344,2.036,345,2.036,346,2.036,347,2.036,348,2.036,349,2.036,350,2.036,351,2.036,352,1.762,353,1.762,354,2.036,355,1.762,356,2.036,357,2.036,358,2.036,359,2.036,360,2.036,361,2.036,362,2.036,363,2.036,364,2.036,365,2.036,366,2.036,367,2.036,368,2.036,369,3.275,370,2.036,371,2.036,372,2.834,373,1.762,374,1.762,375,2.036,376,2.036,377,2.036,378,2.036,379,2.036,380,2.155,381,2.036,382,2.036,383,2.036,384,2.036,385,2.036,386,1.762]],["title/classes/CategoryResponse.html",[0,0.201,262,2.389]],["body/classes/CategoryResponse.html",[0,0.242,2,0.855,3,0.167,4,0.167,5,0.146,12,0.325,13,1.466,14,3.352,15,0.866,16,1.012,17,3.642,18,1.275,19,0.675,21,0.749,22,0.015,23,0.493,24,0.684,26,0.167,27,3.332,28,0.012,29,0.012,66,2.305,99,1.764,100,1.777,262,3.688,387,4.057,388,4.688,389,6.006]],["title/classes/CategoryTodoPresenter.html",[0,0.201,250,2.765]],["body/classes/CategoryTodoPresenter.html",[0,0.212,2,0.749,3,0.147,4,0.147,5,0.128,10,1.391,11,1.003,12,0.284,13,1.345,15,0.795,16,0.887,18,1.005,19,0.676,21,0.656,22,0.016,23,0.494,24,0.599,26,0.147,28,0.011,29,0.011,54,0.706,78,2.503,82,3.378,83,1.654,99,1.517,100,1.4,104,1.859,119,2.919,250,3.915,273,4.077,274,3.554,298,4.767,302,2.702,303,3.191,304,2.919,390,3.554,391,5.507,392,4.106,393,4.106,394,4.369,395,3.554,396,4.106,397,3.554]],["title/classes/CategoryTodoResponse.html",[0,0.201,273,2.389]],["body/classes/CategoryTodoResponse.html",[0,0.216,2,0.765,3,0.15,4,0.15,5,0.131,12,0.291,13,1.364,14,3.492,15,0.859,16,1.206,18,1.222,19,0.682,21,0.671,22,0.015,23,0.498,24,0.916,26,0.15,28,0.011,29,0.011,54,0.477,66,2.347,99,1.635,100,1.703,273,3.43,398,3.631,399,5.419,400,2.761,401,3.586,402,4.195,403,1.946,404,4.195,405,4.195,406,4.195,407,2.982]],["title/classes/DeleteTodoCommand.html",[0,0.201,408,2.56]],["body/classes/DeleteTodoCommand.html",[0,0.265,2,0.939,3,0.184,4,0.184,5,0.161,12,0.356,13,1.555,14,2.955,15,0.616,16,1.111,19,0.649,21,0.823,22,0.015,23,0.474,24,0.75,26,0.184,27,3.657,28,0.013,29,0.013,99,1.765,100,1.838,400,3.386,408,4.191,409,4.453,410,5.145,411,5.145]],["title/classes/DeleteTodoCommandHandler.html",[0,0.201,412,2.765]],["body/classes/DeleteTodoCommandHandler.html",[0,0.178,2,0.629,3,0.123,4,0.123,5,0.108,8,2.997,12,0.239,15,0.679,16,1.054,19,0.577,21,0.906,22,0.016,23,0.422,24,0.826,26,0.123,28,0.01,29,0.01,34,1.725,35,4.028,36,1.241,37,2.504,38,2.652,39,2.399,40,3.47,43,3.48,44,3.173,47,3.47,49,1.192,50,2.157,53,1.772,54,0.74,55,1.873,56,0.808,57,2.45,58,1.453,59,2.117,66,1.521,67,2.45,68,2.45,69,1.46,70,1.599,73,2.45,74,1.523,99,1.588,105,2.117,106,3.006,108,2.381,111,1.772,112,1.987,116,2.268,408,4.814,412,3.47,413,2.983,414,3.447,415,3.447,416,4.881,417,3.447,418,3.447,419,3.447,420,2.678,421,3.447,422,3.447,423,3.447]],["title/modules/ExceptionsModule.html",[188,1.567,203,2.389]],["body/modules/ExceptionsModule.html",[0,0.266,3,0.185,4,0.185,5,0.161,22,0.016,26,0.185,28,0.013,29,0.013,44,3.382,54,0.788,56,1.211,59,3.173,188,2.573,190,2.521,203,3.922,424,5.168,425,4.54,426,5.168,427,3.674,428,4.473,429,4.473,430,4.473]],["title/injectables/ExceptionsService.html",[305,1.435,425,2.765]],["body/injectables/ExceptionsService.html",[0,0.186,3,0.129,4,0.129,5,0.113,10,2.13,12,0.25,15,0.753,19,0.641,21,1.005,22,0.016,23,0.468,24,0.917,26,0.129,28,0.01,29,0.01,34,1.275,36,1.282,44,2.459,49,1.535,53,3.69,54,0.66,56,0.846,59,2.215,305,1.859,306,1.961,403,2.695,425,3.583,431,3.123,432,5.028,433,5.028,434,5.028,435,5.028,436,5.028,437,4.994,438,3.608,439,3.624,440,5.028,441,3.608,442,5.028,443,3.608,444,5.028,445,3.608,446,3.608,447,4.886]],["title/classes/GetAllCategoryQuery.html",[0,0.201,258,2.56]],["body/classes/GetAllCategoryQuery.html",[0,0.304,2,1.077,3,0.211,4,0.211,5,0.185,22,0.014,26,0.211,28,0.014,29,0.014,258,4.554,448,5.111]],["title/classes/GetAllCategoryQueryHandler.html",[0,0.201,449,2.765]],["body/classes/GetAllCategoryQueryHandler.html",[0,0.208,2,0.736,3,0.144,4,0.144,5,0.126,10,1.367,12,0.279,15,0.652,16,1.175,19,0.554,21,0.87,22,0.016,23,0.405,24,0.794,26,0.144,28,0.011,29,0.011,34,1.923,36,1.384,37,2.722,38,2.958,39,1.488,42,3.582,49,0.985,50,2.405,54,0.783,55,2.193,56,0.946,58,1.701,60,2.326,61,2.655,65,3.135,66,1.258,69,1.207,70,1.872,258,4.529,262,3.342,281,3.492,283,1.555,386,3.492,449,3.869,450,3.492,451,4.378,452,4.035,453,4.035,454,5.442,455,4.711,456,4.035,457,3.492,458,2.868,459,4.035,460,4.035,461,4.035,462,4.035]],["title/classes/GetAllTodoQuery.html",[0,0.201,463,2.56]],["body/classes/GetAllTodoQuery.html",[0,0.304,2,1.077,3,0.211,4,0.211,5,0.185,22,0.014,26,0.211,28,0.014,29,0.014,463,4.554,464,5.111]],["title/classes/GetAllTodoQueryHandler.html",[0,0.201,465,2.765]],["body/classes/GetAllTodoQueryHandler.html",[0,0.2,2,0.707,3,0.138,4,0.138,5,0.121,10,1.312,12,0.268,15,0.723,16,1.143,19,0.539,21,0.846,22,0.016,23,0.394,24,0.772,26,0.138,28,0.01,29,0.01,34,1.87,36,1.346,37,2.665,38,2.877,39,1.429,49,0.946,50,2.339,54,0.772,55,2.105,56,0.908,58,1.633,66,1.207,69,1.159,70,1.797,99,0.946,104,1.159,105,2.378,106,3.162,108,2.582,111,1.991,112,2.232,116,2.549,283,1.492,399,3.009,401,2.722,451,4.287,455,4.582,457,3.352,458,2.753,463,4.466,465,3.763,466,3.352,467,3.873,468,3.873,469,3.352,470,3.873,471,3.873,472,3.873,473,3.352,474,3.352,475,3.352,476,3.352,477,3.009,478,3.873]],["title/classes/GetCategoryWithTodoQuery.html",[0,0.201,271,2.56]],["body/classes/GetCategoryWithTodoQuery.html",[0,0.304,2,1.077,3,0.211,4,0.211,5,0.185,22,0.014,26,0.211,28,0.014,29,0.014,271,4.554,479,5.111]],["title/classes/GetCategoryWithTodoQueryHandler.html",[0,0.201,480,2.765]],["body/classes/GetCategoryWithTodoQueryHandler.html",[0,0.19,2,0.671,3,0.131,4,0.131,5,0.115,10,1.73,11,0.898,12,0.255,15,0.612,16,1.103,19,0.52,21,0.816,22,0.016,23,0.38,24,0.745,26,0.131,28,0.01,29,0.01,34,1.805,36,1.298,37,2.593,38,3.189,39,1.356,42,3.445,49,0.898,50,2.257,54,0.784,55,1.998,56,0.862,58,1.55,60,2.119,61,2.419,65,2.857,66,1.146,69,1.528,70,1.705,105,2.258,108,2.491,159,4.42,271,4.383,273,3.603,283,1.417,380,2.419,401,2.626,407,2.613,451,4.171,458,2.613,480,3.63,481,3.182,482,3.677,483,3.677,484,3.677,485,5.107,486,3.677,487,3.677,488,3.677,489,5.107,490,3.677,491,3.677,492,2.857,493,2.613,494,3.677,495,3.677,496,3.677,497,3.677]],["title/classes/GetTodoByIdQuery.html",[0,0.201,498,2.56]],["body/classes/GetTodoByIdQuery.html",[0,0.265,2,0.939,3,0.184,4,0.184,5,0.161,12,0.356,13,1.555,14,2.955,15,0.616,16,1.111,19,0.649,21,0.823,22,0.015,23,0.474,24,0.75,26,0.184,27,3.657,28,0.013,29,0.013,99,1.765,100,1.838,400,3.386,498,4.191,499,4.453,500,5.145,501,5.145]],["title/classes/GetTodoByIdQueryHandler.html",[0,0.201,502,2.765]],["body/classes/GetTodoByIdQueryHandler.html",[0,0.196,2,0.695,3,0.136,4,0.136,5,0.119,10,1.29,12,0.264,15,0.716,16,1.13,19,0.533,21,0.837,22,0.016,23,0.389,24,0.763,26,0.136,28,0.01,29,0.01,34,1.849,36,1.331,37,2.642,38,2.844,39,1.405,49,0.93,50,2.313,54,0.767,55,2.07,56,0.893,58,1.606,66,1.187,69,1.566,70,1.767,99,1.278,104,1.566,105,2.339,106,3.14,108,2.553,111,1.959,112,2.196,116,2.507,168,2.708,283,2.017,342,4.53,401,2.691,451,4.25,458,2.708,469,3.297,473,3.297,474,3.297,475,3.297,476,3.297,477,2.96,498,4.44,502,3.72,503,3.297,504,3.809,505,5.234,506,3.809,507,3.809,508,3.809,509,3.297]],["title/interfaces/ICategoryRepsoitory.html",[42,2.114,98,1.264]],["body/interfaces/ICategoryRepsoitory.html",[3,0.104,4,0.104,5,0.091,7,2.641,10,1.462,11,1.765,12,0.202,15,0.763,18,1.11,19,0.649,21,0.91,22,0.016,23,0.424,24,0.83,26,0.154,28,0.009,29,0.009,36,1.098,42,2.797,49,1.744,50,3.404,54,0.331,60,1.677,62,3.108,63,1.787,69,0.871,98,0.946,99,1.654,100,1.79,104,1.292,234,1.496,308,4.928,309,4.928,310,3.737,311,3.737,312,3.069,313,3.737,322,3.737,324,3.737,326,3.737,328,3.737,510,2.261,511,2.91,512,2.91,513,2.91,514,2.91,515,2.91,516,3.737,517,2.91,518,3.355,519,3.496]],["title/interfaces/IDatabaseConfig.html",[98,1.264,520,3.023]],["body/interfaces/IDatabaseConfig.html",[3,0.121,4,0.121,5,0.106,12,0.235,15,0.579,18,1.421,19,0.704,22,0.016,26,0.121,28,0.01,29,0.01,36,1.228,49,1.848,93,2.258,98,1.103,100,1.557,144,2.94,234,1.746,520,3.753,521,2.94,522,6.122,523,6.122,524,6.122,525,6.122,526,6.122,527,6.122,528,6.122,529,3.396,530,3.396,531,3.396,532,3.396,533,3.396,534,3.396,535,3.396,536,5.985,537,6.722,538,3.396,539,3.396,540,3.396,541,3.396,542,2.639,543,3.396]],["title/interfaces/IError.html",[98,1.264,148,2.765]],["body/interfaces/IError.html",[3,0.19,4,0.19,5,0.166,12,0.368,13,1.586,18,1.392,22,0.015,23,0.483,26,0.19,28,0.013,29,0.013,74,3.23,98,1.725,148,4.616,167,5.679,234,2.73,544,4.596]],["title/interfaces/IException.html",[44,1.898,98,1.264]],["body/interfaces/IException.html",[3,0.143,4,0.143,5,0.125,12,0.277,15,0.788,19,0.67,21,1.051,22,0.015,23,0.489,24,0.959,26,0.193,28,0.011,29,0.011,36,1.377,44,3.207,49,1.605,53,3.784,54,0.456,69,1.199,98,1.302,234,2.06,403,2.847,432,4.689,433,4.689,434,4.689,435,4.689,436,4.689,437,5.104,439,3.789,440,4.689,442,4.689,444,4.689,545,3.113,546,4.007,547,4.007,548,4.007,549,4.007]],["title/interfaces/IFormatExceptionMessage.html",[98,1.264,437,2.56]],["body/interfaces/IFormatExceptionMessage.html",[3,0.188,4,0.188,5,0.164,12,0.364,13,1.577,18,1.275,22,0.015,23,0.481,24,0.942,26,0.188,28,0.013,29,0.013,74,3.22,98,1.71,100,1.777,167,5.661,234,2.706,437,4.25,550,4.555]],["title/interfaces/ILogger.html",[98,1.264,551,2.765]],["body/interfaces/ILogger.html",[3,0.125,4,0.125,5,0.109,12,0.242,15,0.783,18,1.463,19,0.666,21,1.045,22,0.015,23,0.486,24,0.953,26,0.125,28,0.01,29,0.01,36,1.252,49,1.595,53,3.771,74,3.379,98,1.133,234,1.794,278,3.499,403,1.618,551,3.499,552,3.019,553,4.261,554,4.261,555,4.261,556,4.261,557,4.261,558,3.488,559,4.012,560,4.261,561,4.937,562,3.488,563,4.261,564,3.488,565,4.261,566,3.488,567,4.261,568,3.488]],["title/interfaces/ITodoRepository.html",[98,1.264,106,1.898]],["body/interfaces/ITodoRepository.html",[3,0.089,4,0.089,5,0.078,7,2.638,10,1.302,11,0.939,12,0.173,15,0.75,18,1.235,19,0.612,21,0.909,22,0.016,23,0.423,24,0.829,26,0.137,28,0.008,29,0.008,36,0.978,49,1.707,50,3.365,54,0.284,69,0.747,90,2.122,91,2.122,93,2.098,98,0.811,99,1.682,100,1.902,104,2.091,106,2.287,111,1.284,113,3.265,114,1.775,234,1.284,312,2.733,403,1.784,516,3.328,518,2.987,519,3.968,569,1.94,570,3.328,571,4.559,572,3.328,573,3.328,574,4.058,575,3.328,576,2.497,577,2.497,578,3.328,579,2.497,580,3.328,581,2.497,582,3.328,583,3.328,584,2.497,585,2.161,586,3.036,587,2.497]],["title/modules/LoggerModule.html",[188,1.567,204,2.56]],["body/modules/LoggerModule.html",[0,0.262,3,0.181,4,0.181,5,0.159,22,0.015,26,0.181,28,0.012,29,0.012,54,0.718,56,1.19,140,4.349,188,2.545,190,2.477,200,3.879,204,4.965,208,4.491,209,3.609,210,3.609,427,4.491,588,4.395,589,4.395,590,5.078,591,5.078]],["title/injectables/LoggerService.html",[140,2.242,305,1.435]],["body/injectables/LoggerService.html",[0,0.154,3,0.106,4,0.106,5,0.093,12,0.206,15,0.736,18,1.446,19,0.625,21,0.982,22,0.016,23,0.457,24,0.895,26,0.106,28,0.009,29,0.009,34,1.052,36,1.116,49,1.499,53,3.157,54,0.499,56,0.698,74,3.388,140,2.531,142,4.473,278,3.121,305,1.62,306,1.618,403,1.381,536,2.577,551,3.121,553,3.801,554,3.801,555,3.801,556,3.801,557,3.801,559,4.347,560,3.801,561,4.983,563,3.801,565,3.801,567,3.801,592,2.577,593,4.391,594,2.978,595,2.978,596,2.978,597,2.978,598,2.978,599,2.978,600,2.978,601,2.978,602,2.978,603,4.391,604,4.391,605,2.978,606,2.978,607,2.978,608,2.978,609,2.978]],["title/injectables/LoggingInterceptor.html",[305,1.435,610,3.023]],["body/injectables/LoggingInterceptor.html",[0,0.172,3,0.119,4,0.119,5,0.104,12,0.23,15,0.666,16,0.719,18,1.014,19,0.566,21,0.889,22,0.016,23,0.414,24,0.811,26,0.119,28,0.009,29,0.009,34,1.176,36,1.21,39,2.05,49,1.162,54,0.541,56,0.78,66,1.037,69,1.997,139,2.881,140,3.496,142,3.699,151,3.992,156,2.881,179,2.881,180,3.133,181,4.121,233,2.366,283,1.834,305,1.756,306,1.809,559,2.044,610,3.699,611,2.881,612,4.761,613,3.384,614,3.328,615,4.761,616,3.328,617,3.699,618,4.312,619,3.951,620,4.312,621,3.328,622,3.951,623,3.384,624,4.761,625,2.19,626,2.366,627,2.366,628,2.366,629,2.366,630,2.366,631,6.066,632,3.328,633,4.761,634,3.328,635,4.761,636,2.366,637,3.328,638,2.366,639,4.761,640,3.328,641,3.328,642,3.328,643,3.328,644,3.328,645,3.328,646,3.328]],["title/classes/MessagePresenter.html",[0,0.201,267,2.56]],["body/classes/MessagePresenter.html",[0,0.252,2,0.891,3,0.174,4,0.174,5,0.153,12,0.338,13,1.505,15,0.585,16,1.055,18,1.335,19,0.628,21,0.781,22,0.016,23,0.459,24,0.712,26,0.174,28,0.012,29,0.012,54,0.555,74,3.234,78,1.968,82,3.134,83,1.968,267,4.057,647,4.228,648,6.166,649,6.166,650,4.885]],["title/modules/RepositoriesModule.html",[188,1.567,205,2.389]],["body/modules/RepositoriesModule.html",[0,0.23,3,0.16,4,0.16,5,0.14,11,1.422,22,0.016,26,0.16,28,0.011,29,0.011,46,3.833,54,0.857,56,1.048,60,3.735,61,2.942,104,1.337,108,2.842,111,3.332,112,2.577,188,2.347,190,2.181,198,2.942,205,3.577,337,2.942,339,3.474,340,3.474,427,3.178,428,5.042,429,5.042,430,3.869,651,4.471,652,3.869,653,4.471,654,4.471,655,4.471]],["title/classes/ResponseFormat.html",[0,0.201,656,2.242]],["body/classes/ResponseFormat.html",[0,0.245,2,0.607,3,0.119,4,0.119,5,0.104,12,0.23,13,1.162,18,1.218,19,0.654,22,0.016,23,0.478,26,0.17,28,0.009,29,0.009,34,1.176,49,0.813,54,0.69,56,0.78,69,1.663,78,2.444,82,3.32,83,1.341,93,1.756,151,2.19,173,3.992,180,2.19,283,1.282,305,1.756,380,3.133,439,3.496,493,2.366,519,2.923,559,2.923,613,2.366,618,3.384,619,3.384,620,3.384,622,3.951,623,3.384,625,2.19,626,2.366,627,3.384,628,2.366,629,2.366,630,2.366,636,2.366,638,2.366,656,2.744,657,2.586,658,4.312,659,3.992,660,4.312,661,3.328,662,3.328,663,3.328,664,3.328,665,3.328,666,2.881,667,2.044,668,2.586,669,2.586,670,2.586]],["title/classes/ResponseFormat-1.html",[0,0.167,233,2.309,656,1.872]],["body/classes/ResponseFormat-1.html",[0,0.224,2,0.794,3,0.155,4,0.155,5,0.136,12,0.301,13,1.398,18,1.322,19,0.719,22,0.016,23,0.525,26,0.155,28,0.011,29,0.011,54,0.495,78,2.738,82,3.518,83,1.754,93,2.112,173,4.209,380,3.767,439,3.687,656,3.3,658,4.547,659,4.209,660,4.547,671,3.768,672,4.353,673,4.353,674,4.353,675,4.353,676,4.353]],["title/injectables/ResponseInterceptor.html",[305,1.435,667,2.389]],["body/injectables/ResponseInterceptor.html",[0,0.259,3,0.128,4,0.128,5,0.112,12,0.249,15,0.431,18,1.058,19,0.366,21,0.575,22,0.016,23,0.268,24,0.524,26,0.18,28,0.01,29,0.01,34,1.271,36,1.279,49,1.228,54,0.714,56,0.843,69,1.735,82,3.065,83,1.449,93,1.327,151,2.367,173,3.309,180,2.367,283,1.386,305,1.855,306,1.955,380,2.367,439,2.899,493,2.557,519,3.088,559,3.561,613,4.122,617,2.795,618,4.464,619,4.464,620,4.464,622,4.698,623,3.575,625,2.367,626,2.557,627,3.575,628,2.557,629,2.557,630,2.557,636,2.557,638,2.557,656,2.073,657,2.795,658,3.575,659,3.309,660,3.575,666,3.113,667,3.088,668,2.795,669,2.795,670,2.795,677,3.597]],["title/injectables/ResponseInterceptor-1.html",[233,2.309,305,1.198,667,1.995]],["body/injectables/ResponseInterceptor-1.html",[0,0.213,3,0.148,4,0.148,5,0.129,12,0.286,15,0.495,19,0.421,21,0.661,22,0.016,23,0.308,24,0.603,26,0.148,28,0.011,29,0.011,34,1.461,36,1.407,49,1.01,54,0.709,56,0.969,69,1.866,151,2.721,173,2.721,180,2.721,283,1.593,305,2.041,306,2.247,439,2.384,493,2.94,559,3.398,613,4.433,617,3.213,618,4.733,619,4.433,620,4.733,622,4.433,623,3.933,625,2.721,626,2.94,627,3.933,628,2.94,629,2.94,630,2.94,636,2.94,638,2.94,656,3.189,658,2.94,659,2.721,660,2.94,667,3.398,668,3.213,669,3.213,670,3.213,678,3.58,679,4.136]],["title/entities/Todo.html",[104,1.164,218,2.56]],["body/entities/Todo.html",[0,0.173,3,0.12,4,0.12,5,0.105,11,1.75,12,0.232,13,1.167,15,0.668,18,0.872,19,0.681,22,0.016,23,0.512,26,0.12,28,0.009,29,0.009,54,0.543,78,2.695,87,3.03,90,2.246,91,2.246,93,1.763,99,1.361,100,1.215,104,1.43,132,3.714,133,3.398,218,2.203,219,2.203,221,4.138,223,2.897,227,4.138,228,4.138,232,2.601,586,2.755,680,2.897,681,4.998,682,4.998,683,3.347,684,4.78,685,4.78,686,3.347,687,3.347,688,4.78,689,4.78,690,4.78,691,4.78,692,3.347,693,4.323,694,3.347,695,3.347,696,3.347,697,4.78,698,3.347,699,4.78,700,3.347,701,3.347,702,3.347,703,3.347,704,4.78,705,4.78,706,4.78,707,4.78,708,3.347]],["title/classes/TodoCategory.html",[0,0.201,62,1.898]],["body/classes/TodoCategory.html",[0,0.195,2,0.69,3,0.135,4,0.135,5,0.118,7,1.756,12,0.262,14,3.418,15,0.714,16,1.125,17,2.941,18,1.228,19,0.654,21,0.605,22,0.016,23,0.282,24,0.552,26,0.135,28,0.01,29,0.01,36,1.325,39,2.198,49,1.455,54,0.43,62,2.542,99,1.455,100,1.712,104,1.783,113,3.781,168,4.563,283,2.296,302,2.49,303,2.941,395,3.276,403,2.417,492,4.987,709,3.276,710,5.21,711,4.048,712,5.556,713,6.419,714,3.785,715,3.785,716,3.785,717,3.785]],["title/controllers/TodoController.html",[193,2.765,235,2.56]],["body/controllers/TodoController.html",[0,0.113,3,0.078,4,0.078,5,0.069,7,1.018,10,1.813,11,0.536,12,0.152,15,0.641,16,0.474,19,0.545,21,0.785,22,0.016,23,0.365,24,0.716,26,0.078,28,0.007,29,0.007,36,0.884,37,3.111,39,1.282,49,1.307,54,0.791,56,0.514,58,0.925,66,1.083,69,1.469,70,2.278,74,1.908,78,2.156,83,0.884,87,1.192,88,1.347,90,1.739,91,1.978,99,1.39,100,1.447,104,1.04,119,1.56,120,3.49,133,3.49,149,1.705,177,1.705,192,1.56,193,2.471,235,1.444,237,1.899,242,1.899,243,4.632,245,4.632,252,1.899,253,3.009,254,3.736,255,3.736,264,1.899,265,3.009,266,1.899,267,2.287,268,1.899,269,1.56,270,1.899,277,1.899,278,1.56,282,1.899,283,2.062,289,3.736,291,1.899,293,3.736,304,1.56,394,1.444,397,3.009,399,1.705,401,1.128,407,1.56,408,1.444,463,2.287,492,2.701,498,1.444,518,1.705,519,1.347,586,2.003,718,1.899,719,5.352,720,3.476,721,4.91,722,3.476,723,2.194,724,2.194,725,2.194,726,2.194,727,2.194,728,2.194,729,2.194,730,2.194,731,2.194,732,2.194,733,2.194,734,4.24,735,2.194,736,2.194,737,4.316,738,3.476,739,2.194,740,2.194,741,2.194,742,2.194,743,2.194,744,1.444,745,2.194,746,2.194,747,2.194,748,2.194,749,2.194,750,2.194,751,2.194,752,3.476,753,2.194,754,2.194,755,2.194,756,2.194,757,2.194,758,3.476,759,2.194,760,2.194,761,2.194,762,2.194,763,2.194,764,2.194]],["title/classes/TodoPresenter.html",[0,0.201,394,2.56]],["body/classes/TodoPresenter.html",[0,0.184,2,0.652,3,0.128,4,0.128,5,0.112,11,1.411,12,0.248,13,1.223,15,0.428,16,0.772,18,0.914,19,0.715,21,0.571,22,0.016,23,0.522,24,0.521,26,0.128,28,0.01,29,0.01,54,0.657,78,2.753,82,3.515,83,1.44,90,2.328,91,2.328,93,1.847,99,1.411,100,1.273,104,1.069,122,3.803,302,2.352,394,3.295,401,3.22,407,2.541,681,4.491,682,4.491,693,4.452,765,3.094,766,5.008,767,5.008,768,3.575,769,3.575,770,3.575,771,3.575,772,3.575,773,3.575,774,3.575,775,3.094,776,3.575,777,3.094,778,3.575,779,3.094,780,3.575,781,3.094,782,3.575]],["title/injectables/TodoRepository.html",[108,1.898,305,1.435]],["body/injectables/TodoRepository.html",[0,0.09,3,0.062,4,0.062,5,0.054,10,1.731,11,1.578,12,0.12,15,0.703,16,0.621,18,0.933,19,0.598,21,0.905,22,0.016,23,0.421,24,0.826,26,0.062,28,0.006,29,0.006,34,0.614,36,0.731,37,3.048,39,2.088,49,1.382,50,2.803,54,0.644,56,0.407,62,0.847,63,1.067,66,0.897,69,1.898,70,2.879,90,2.059,91,1.911,93,1.358,99,1.477,100,1.613,104,1.965,106,1.403,108,1.403,112,1.001,113,3.373,114,1.235,226,1.504,283,2.085,304,1.235,305,1.061,306,0.944,312,2.045,314,2.49,315,2.49,317,4.684,319,3.186,330,2.49,332,1.504,336,1.504,337,1.143,338,1.504,339,1.35,340,1.35,341,1.504,352,2.49,353,1.504,355,1.504,372,4.424,373,2.49,374,1.504,403,1.334,420,2.235,447,1.35,477,1.35,509,1.504,570,2.49,571,3.705,572,2.49,573,2.49,574,3.186,575,2.49,578,2.49,580,2.49,582,4.105,583,2.49,585,1.504,586,3.263,783,1.504,784,1.737,785,1.737,786,2.876,787,1.737,788,1.737,789,1.737,790,1.737,791,1.737,792,1.737,793,2.876,794,1.737,795,1.737,796,1.737,797,1.737,798,1.737,799,1.737,800,3.681,801,2.876,802,1.737,803,1.737,804,1.737,805,1.737,806,2.876,807,1.737,808,2.876,809,2.876,810,1.737,811,1.737,812,1.737,813,1.737,814,2.876,815,2.876,816,1.737,817,1.737,818,1.737,819,1.737,820,1.737,821,1.737,822,1.737,823,1.737,824,1.737,825,1.737]],["title/classes/TodoResponse.html",[0,0.201,401,2]],["body/classes/TodoResponse.html",[0,0.186,2,0.658,3,0.129,4,0.129,5,0.113,11,1.803,12,0.25,13,1.231,14,3.564,15,0.604,16,1.088,18,1.207,19,0.698,21,0.577,22,0.015,23,0.51,24,0.965,26,0.18,28,0.01,29,0.01,66,2.395,90,2.665,91,2.665,93,2.319,98,1.172,99,1.615,100,1.682,400,2.374,401,2.591,403,2.338,693,4.47,826,3.123,827,6.616,828,3.608,829,3.608,830,3.608,831,3.608,832,3.608,833,3.608]],["title/classes/TodoTask.html",[0,0.201,113,2.114]],["body/classes/TodoTask.html",[0,0.155,2,0.547,3,0.107,4,0.107,5,0.094,7,1.392,10,1.016,11,1.279,12,0.208,14,3.527,15,0.36,16,0.953,18,1.124,19,0.678,21,0.48,22,0.016,23,0.223,24,0.438,26,0.107,28,0.009,29,0.009,36,1.123,39,2.376,43,1.843,49,1.573,54,0.341,62,3.249,75,1.73,90,2.328,91,2.111,92,2.597,93,2.272,99,1.279,100,1.566,104,1.321,113,2.4,283,2.482,302,1.975,403,2.431,447,2.332,681,4.071,682,4.071,693,5.041,711,3.431,712,5.002,775,2.597,777,2.597,779,2.597,781,2.597,834,2.597,835,5.779,836,5.779,837,5.779,838,5.779,839,5.779,840,3.001,841,3.001,842,3.001,843,3.001,844,3.001,845,3.001,846,3.001,847,3.001,848,3.001,849,3.001]],["title/modules/TypeormConfigModule.html",[188,1.567,206,2.56]],["body/modules/TypeormConfigModule.html",[0,0.239,3,0.165,4,0.165,5,0.145,11,1.455,22,0.016,23,0.345,26,0.165,28,0.012,29,0.012,54,0.819,56,1.086,69,1.386,87,3.239,104,1.783,188,2.401,190,2.259,198,3.047,206,3.922,219,3.047,230,4.009,337,3.047,542,3.598,652,4.009,850,3.598,851,4.631,852,4.009,853,5.121,854,4.631,855,4.009,856,3.598,857,4.009,858,4.009,859,4.009,860,4.009,861,4.009,862,4.009,863,4.631,864,4.631]],["title/classes/UpdateTodoCommand.html",[0,0.201,744,2.56]],["body/classes/UpdateTodoCommand.html",[0,0.212,2,0.752,3,0.147,4,0.147,5,0.129,12,0.285,13,1.348,14,3.571,15,0.494,16,1.192,18,1.213,19,0.706,21,0.659,22,0.015,23,0.516,24,1.011,26,0.147,28,0.011,29,0.011,90,2.793,91,2.793,93,2.452,99,1.623,100,1.883,400,2.712,403,2.561,586,3.996,744,3.632,865,3.567,866,4.121,867,4.121,868,4.121,869,4.121,870,4.121]],["title/classes/UpdateTodoCommandHandler.html",[0,0.201,871,2.765]],["body/classes/UpdateTodoCommandHandler.html",[0,0.167,2,0.592,3,0.116,4,0.116,5,0.101,8,2.87,12,0.225,15,0.656,16,1.009,19,0.558,21,0.876,22,0.016,23,0.408,24,0.799,26,0.116,28,0.009,29,0.009,34,1.652,35,3.895,36,1.189,37,2.421,38,2.54,39,2.344,40,4.262,43,3.365,44,3.1,47,3.323,49,1.141,50,2.066,53,1.668,54,0.722,55,1.763,56,0.76,57,2.306,58,1.368,59,1.992,66,1.457,67,2.306,68,2.306,69,1.398,73,3.323,74,2.066,75,1.87,90,2.667,91,1.883,99,1.464,105,1.992,106,2.925,108,2.28,111,1.668,112,1.87,116,2.135,519,1.992,586,3.456,744,4.68,871,3.323,872,2.808,873,3.244,874,3.244,875,4.674,876,3.244,877,4.674,878,5.479,879,3.244,880,3.244,881,3.244]],["title/classes/UpdateTodoDto.html",[0,0.201,734,2.765]],["body/classes/UpdateTodoDto.html",[0,0.277,2,0.724,3,0.142,4,0.142,5,0.124,12,0.275,13,1.313,18,0.981,19,0.667,22,0.016,23,0.487,26,0.142,28,0.011,29,0.011,54,0.612,66,2.385,75,3.101,78,2.637,79,4.18,80,3.081,82,3.174,83,1.598,84,4.743,85,4.18,86,2.819,87,2.923,90,2.459,91,2.459,93,1.984,99,1.49,100,1.664,129,4.656,586,3.519,734,3.824,882,3.433,883,3.966,884,3.966,885,3.966,886,3.966,887,3.966,888,3.966,889,3.966,890,6.105]],["title/modules/UsecaseModule.html",[188,1.567,207,2.56]],["body/modules/UsecaseModule.html",[0,0.218,3,0.151,4,0.151,5,0.132,22,0.016,26,0.151,28,0.011,29,0.011,54,0.847,56,0.991,58,1.782,188,2.262,190,2.062,195,4.859,198,3.694,200,3.447,203,4.413,205,4.413,207,4.901,208,3.99,209,3.004,210,3.004,427,3.004,891,4.226,892,4.226,893,4.226,894,4.226,895,4.226,896,4.362,897,4.226,898,4.362,899,4.226,900,4.362,901,4.226,902,4.362,903,4.226]],["title/coverage.html",[904,4.595]],["body/coverage.html",[0,0.393,1,1.345,5,0.064,6,1.769,10,0.692,11,1.005,22,0.016,23,0.152,28,0.006,29,0.006,30,1.452,31,1.769,42,1.11,44,1.602,46,1.345,60,1.178,62,0.997,76,1.452,77,1.769,88,1.255,89,2.552,98,2.021,101,1.452,102,1.769,104,0.611,106,0.997,108,0.997,111,1.051,113,1.11,120,1.452,121,1.769,122,1.345,134,1.588,135,1.769,140,1.178,148,1.452,193,1.452,194,1.452,218,2.161,220,1.769,235,2.161,236,1.769,250,1.452,256,1.452,258,1.345,262,1.255,267,1.345,269,1.452,271,1.345,273,1.255,294,1.769,297,1.769,305,2.139,307,1.769,387,1.769,390,1.769,394,1.345,398,1.769,401,1.051,408,1.345,409,1.769,412,1.452,413,1.769,420,6.143,425,1.452,431,1.769,437,1.345,448,1.769,449,1.452,450,1.769,463,1.345,464,1.769,465,1.452,466,1.769,479,1.769,480,1.452,481,1.769,498,1.345,499,1.769,502,1.452,503,1.769,510,2.552,520,1.588,521,1.769,544,1.769,545,2.552,550,1.769,551,1.452,552,1.769,569,2.552,592,1.769,610,1.588,611,1.769,647,1.769,656,1.893,657,2.552,667,2.016,671,1.769,678,1.769,680,1.769,709,1.769,718,1.769,734,1.452,744,1.345,765,1.769,783,1.769,826,2.842,834,1.769,850,1.588,853,1.588,865,1.769,871,1.452,872,1.769,882,1.769,896,1.588,898,1.588,900,1.588,902,1.588,904,1.769,905,1.769,906,2.043,907,2.043,908,1.769,909,6.222,910,6.93,911,5.517,912,4.117,913,5.517,914,6.647,915,5.798,916,3.284,917,3.284,918,3.284,919,2.043,920,2.043,921,2.043,922,2.043,923,3.284,924,1.769,925,2.043,926,1.769,927,2.043,928,2.043,929,4.117,930,4.117,931,1.769,932,1.769,933,1.769,934,2.043,935,1.769,936,2.043,937,2.043]],["title/dependencies.html",[200,2.873,938,2.812]],["body/dependencies.html",[0,0.315,22,0.016,28,0.012,29,0.012,56,1.126,58,2.026,83,1.935,86,3.415,200,2.95,232,3.733,337,3.161,625,3.161,852,4.158,939,6.705,940,4.804,941,4.804,942,4.804,943,4.804,944,6.101,945,4.804,946,4.804,947,4.804,948,4.804,949,4.804,950,4.804,951,4.804,952,4.804,953,4.804,954,4.804,955,4.804,956,4.804,957,4.804,958,4.804,959,4.804,960,4.804,961,4.804,962,4.804,963,4.804]],["title/miscellaneous/functions.html",[964,2.309,965,4.05]],["body/miscellaneous/functions.html",[12,0.413,22,0.014,28,0.014,29,0.014,924,5.164,926,6.382,964,4.241,965,5.164,966,5.966]],["title/index.html",[12,0.225,967,3.249,968,2.812]],["body/index.html",[7,2.315,8,3.064,22,0.015,28,0.012,29,0.012,104,1.493,856,3.877,905,4.319,968,4.319,969,4.99,970,6.249,971,4.99,972,4.99,973,4.99,974,4.99,975,4.99,976,4.99,977,4.99,978,4.99,979,4.99,980,4.99,981,4.99,982,4.99,983,4.99,984,4.99,985,4.99,986,6.823,987,4.99,988,4.99,989,4.99,990,4.99,991,4.99,992,4.99,993,4.99,994,4.99,995,4.99,996,4.99,997,4.99,998,4.99,999,4.99]],["title/modules.html",[190,2.59]],["body/modules.html",[22,0.013,28,0.013,29,0.013,189,3.494,190,2.59,199,3.775,203,3.261,204,3.494,205,3.261,206,3.494,207,3.494,1000,7.309,1001,7.309,1002,7.725,1003,7.016,1004,7.016,1005,7.016]],["title/overview.html",[1006,4.595]],["body/overview.html",[2,0.809,22,0.015,28,0.011,29,0.011,140,3.721,189,4.248,190,2.164,192,3.154,199,5.588,200,3.559,201,3.84,202,3.84,203,4.203,204,4.674,205,4.203,206,4.248,207,4.883,208,4.12,209,3.154,210,3.154,219,2.919,234,2.281,306,2.411,588,3.84,589,3.84,1006,3.84,1007,5.796,1008,5.796,1009,4.436,1010,4.436]],["title/properties.html",[13,1.142,938,2.812]],["body/properties.html",[7,2.725,13,1.434,22,0.015,28,0.014,29,0.014,1011,5.875,1012,5.875,1013,5.875,1014,5.875,1015,5.875]],["title/miscellaneous/variables.html",[964,2.309,1016,4.05]],["body/miscellaneous/variables.html",[11,0.801,12,0.227,13,0.801,18,1.006,22,0.016,23,0.539,28,0.009,29,0.009,30,2.332,42,1.783,44,2.69,60,2.716,87,2.561,93,1.738,101,2.332,104,0.982,106,1.601,111,2.423,132,5.624,219,2.159,269,3.35,283,1.264,412,2.332,439,1.891,449,2.332,465,2.332,480,2.332,502,2.332,510,2.549,542,3.661,545,2.549,569,2.549,659,4.2,711,2.549,850,2.549,853,4.284,855,2.84,856,2.549,857,2.84,858,2.84,859,2.84,860,2.84,861,2.84,862,2.84,871,2.332,896,3.661,898,3.661,900,3.661,902,3.661,908,2.84,931,2.84,932,2.84,933,2.84,935,2.84,964,2.332,1016,2.84,1017,3.281,1018,6.027,1019,3.281,1020,3.281,1021,3.281,1022,3.281,1023,7.132,1024,3.281,1025,3.281,1026,3.281,1027,3.281,1028,4.712,1029,3.281,1030,3.281]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQuery.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":420,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{},"injectables/TodoRepository.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1012,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["0.3.6",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":910,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":233,"title":{"interfaces/Category-1.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor-1.html":{}},"body":{"injectables/LoggingInterceptor.html":{}}}],["1/3",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":1008,"title":{},"body":{"overview.html":{}}}],["2.1.0",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":690,"title":{},"body":{"entities/Todo.html":{}}}],["3.0.2",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":1009,"title":{},"body":{"overview.html":{}}}],["33",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["4.4.0",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":177,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["7",{"_index":1007,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["8.0.4",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["8.1.2",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1010,"title":{},"body":{"overview.html":{}}}],["_",{"_index":457,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{}}}],["_q",{"_index":489,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["_q.getid",{"_index":490,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["_q.getname",{"_index":491,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["_query",{"_index":485,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["adapter",{"_index":600,"title":{},"body":{"injectables/LoggerService.html":{}}}],["add",{"_index":9,"title":{},"body":{"classes/AddCategoryCommand.html":{}}}],["addcategory",{"_index":238,"title":{},"body":{"controllers/CategoryController.html":{}}}],["addcategory(@body",{"_index":290,"title":{},"body":{"controllers/CategoryController.html":{}}}],["addcategory(addcategory",{"_index":241,"title":{},"body":{"controllers/CategoryController.html":{}}}],["addcategorycommand",{"_index":1,"title":{"classes/AddCategoryCommand.html":{}},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"controllers/CategoryController.html":{},"coverage.html":{}}}],["addcategorycommand(name",{"_index":292,"title":{},"body":{"controllers/CategoryController.html":{}}}],["addcategorycommandhandler",{"_index":30,"title":{"classes/AddCategoryCommandHandler.html":{}},"body":{"classes/AddCategoryCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["addcategorydto",{"_index":76,"title":{"classes/AddCategoryDto.html":{}},"body":{"classes/AddCategoryDto.html":{},"controllers/CategoryController.html":{},"coverage.html":{}}}],["addtodo",{"_index":719,"title":{},"body":{"controllers/TodoController.html":{}}}],["addtodo(@body",{"_index":763,"title":{},"body":{"controllers/TodoController.html":{}}}],["addtodo(addtodo",{"_index":723,"title":{},"body":{"controllers/TodoController.html":{}}}],["addtodocommand",{"_index":88,"title":{"classes/AddTodoCommand.html":{}},"body":{"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"interfaces/Category-1.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["addtodocommand(content",{"_index":764,"title":{},"body":{"controllers/TodoController.html":{}}}],["addtodocommandhandler",{"_index":101,"title":{"classes/AddTodoCommandHandler.html":{}},"body":{"classes/AddTodoCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["addtododto",{"_index":120,"title":{"classes/AddTodoDto.html":{}},"body":{"classes/AddTodoDto.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["allexceptionfilter",{"_index":134,"title":{"classes/AllExceptionFilter.html":{}},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["allof",{"_index":1027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":978,"title":{},"body":{"index.html":{}}}],["api/api.module",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["apiextramodels",{"_index":264,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["apiextramodels(categorypresenter",{"_index":279,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apiextramodels(todopresenter",{"_index":750,"title":{},"body":{"controllers/TodoController.html":{}}}],["apimodule",{"_index":189,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apiokresponse",{"_index":1026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiproperty",{"_index":82,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"classes/CategoryTodoPresenter.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"classes/TodoPresenter.html":{},"classes/UpdateTodoDto.html":{}}}],["apiproperty()@isboolean",{"_index":888,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["apiproperty()@isnumber",{"_index":883,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["apiproperty({default",{"_index":126,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["apiproperty({required",{"_index":79,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"classes/UpdateTodoDto.html":{}}}],["apiresponse",{"_index":265,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["apiresponsetype",{"_index":269,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiresponsetype(categorypresenter",{"_index":280,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apiresponsetype(categorytodopresenter",{"_index":287,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apiresponsetype(messagepresenter",{"_index":289,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["apiresponsetype(todopresenter",{"_index":752,"title":{},"body":{"controllers/TodoController.html":{}}}],["apitags",{"_index":266,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["apitags('category",{"_index":276,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('todo",{"_index":749,"title":{},"body":{"controllers/TodoController.html":{}}}],["app",{"_index":984,"title":{},"body":{"index.html":{}}}],["applydecorators",{"_index":1025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":199,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["architecture",{"_index":974,"title":{},"body":{"index.html":{}}}],["argumentshost",{"_index":145,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["array.isarray(data",{"_index":669,"title":{},"body":{"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["async",{"_index":37,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["author",{"_index":1015,"title":{},"body":{"properties.html":{}}}],["autoloadentities",{"_index":858,"title":{},"body":{"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":1001,"title":{},"body":{"modules.html":{}}}],["await",{"_index":70,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{}}}],["badrequestexception",{"_index":432,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["badrequestexception(data",{"_index":436,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["below",{"_index":992,"title":{},"body":{"index.html":{}}}],["body",{"_index":252,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["boolean",{"_index":93,"title":{},"body":{"classes/AddTodoCommand.html":{},"classes/AddTodoDto.html":{},"interfaces/Category-1.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/ITodoRepository.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"entities/Todo.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoDto.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":926,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1002,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1003,"title":{},"body":{"modules.html":{}}}],["callhandler",{"_index":620,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["cascade",{"_index":228,"title":{},"body":{"entities/Category.html":{},"entities/Todo.html":{}}}],["catch",{"_index":137,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["catch(exception",{"_index":143,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["categoey",{"_index":710,"title":{},"body":{"classes/TodoCategory.html":{}}}],["categories",{"_index":281,"title":{},"body":{"controllers/CategoryController.html":{},"classes/GetAllCategoryQueryHandler.html":{}}}],["categories?.map((category",{"_index":284,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categories?.map((x",{"_index":461,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["category",{"_index":11,"title":{"entities/Category.html":{},"interfaces/Category-1.html":{}},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryTodoPresenter.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/ITodoRepository.html":{},"modules/RepositoriesModule.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["category.entity",{"_index":703,"title":{},"body":{"entities/Todo.html":{}}}],["category.id",{"_index":119,"title":{},"body":{"classes/AddTodoCommandHandler.html":{},"classes/CategoryPresenter.html":{},"classes/CategoryTodoPresenter.html":{},"controllers/TodoController.html":{}}}],["category.name",{"_index":304,"title":{},"body":{"classes/CategoryPresenter.html":{},"classes/CategoryTodoPresenter.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{}}}],["category.repossitory",{"_index":653,"title":{},"body":{"modules/RepositoriesModule.html":{}}}],["category.todo",{"_index":684,"title":{},"body":{"entities/Todo.html":{}}}],["category.todos?.map((todo",{"_index":396,"title":{},"body":{"classes/CategoryTodoPresenter.html":{}}}],["category/command",{"_index":897,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["category/query",{"_index":899,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["category?.map",{"_index":488,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["category?.map((entity",{"_index":351,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["categorycommandhandlers",{"_index":896,"title":{},"body":{"modules/UsecaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["categorycontroller",{"_index":194,"title":{"controllers/CategoryController.html":{}},"body":{"modules/ApiModule.html":{},"controllers/CategoryController.html":{},"coverage.html":{}}}],["categorydto",{"_index":122,"title":{"classes/CategoryDto.html":{}},"body":{"classes/AddTodoDto.html":{},"classes/CategoryDto.html":{},"classes/TodoPresenter.html":{},"coverage.html":{}}}],["categoryentity",{"_index":335,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["categoryentity.id",{"_index":362,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["categoryentity.name",{"_index":361,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["categoryentity.todo",{"_index":363,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["categoryentity.todo.map",{"_index":364,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["categoryid",{"_index":586,"title":{},"body":{"interfaces/ITodoRepository.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}}}],["categoryname",{"_index":582,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["categorypresenter",{"_index":256,"title":{"classes/CategoryPresenter.html":{}},"body":{"controllers/CategoryController.html":{},"classes/CategoryPresenter.html":{},"coverage.html":{}}}],["categorypresenter(category",{"_index":285,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categoryqueryhandlers",{"_index":898,"title":{},"body":{"modules/UsecaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["categoryrepo",{"_index":319,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["categoryrepoitory",{"_index":454,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["categoryrepository",{"_index":46,"title":{"injectables/CategoryRepository.html":{}},"body":{"classes/AddCategoryCommandHandler.html":{},"injectables/CategoryRepository.html":{},"modules/RepositoriesModule.html":{},"coverage.html":{}}}],["categoryresponse",{"_index":262,"title":{"classes/CategoryResponse.html":{}},"body":{"controllers/CategoryController.html":{},"classes/CategoryPresenter.html":{},"classes/CategoryResponse.html":{},"classes/GetAllCategoryQueryHandler.html":{},"coverage.html":{}}}],["categoryresponse(x.getname",{"_index":462,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["categorytodopresenter",{"_index":250,"title":{"classes/CategoryTodoPresenter.html":{}},"body":{"controllers/CategoryController.html":{},"classes/CategoryTodoPresenter.html":{},"coverage.html":{}}}],["categorytodopresenter(category",{"_index":288,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categorytodoresponse",{"_index":273,"title":{"classes/CategoryTodoResponse.html":{}},"body":{"controllers/CategoryController.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"coverage.html":{}}}],["categprydto",{"_index":131,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["catentity",{"_index":357,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["class",{"_index":0,"title":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQuery.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"classes/TodoCategory.html":{},"classes/TodoPresenter.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQuery.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQuery.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"classes/TodoCategory.html":{},"classes/TodoPresenter.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"overview.html":{}}}],["clean",{"_index":973,"title":{},"body":{"index.html":{}}}],["click",{"_index":991,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":588,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":589,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_usecasemodule",{"_index":891,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["cluster_usecasemodule_imports",{"_index":892,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["code_error",{"_index":167,"title":{},"body":{"classes/AllExceptionFilter.html":{},"interfaces/IError.html":{},"interfaces/IFormatExceptionMessage.html":{}}}],["column",{"_index":223,"title":{},"body":{"entities/Category.html":{},"entities/Todo.html":{}}}],["column('boolean",{"_index":699,"title":{},"body":{"entities/Todo.html":{}}}],["column('varchar",{"_index":688,"title":{},"body":{"entities/Todo.html":{}}}],["command",{"_index":8,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{},"index.html":{}}}],["commandbus",{"_index":254,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["commandhandler",{"_index":57,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["commandhandler(addcategorycommand",{"_index":64,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["commandhandler(addtodocommand",{"_index":115,"title":{},"body":{"classes/AddTodoCommandHandler.html":{}}}],["commandhandler(deletetodocommand",{"_index":418,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["commandhandler(updatetodocommand",{"_index":879,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["compose",{"_index":988,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":851,"title":{},"body":{"modules/TypeormConfigModule.html":{}}}],["configmodule.forroot",{"_index":863,"title":{},"body":{"modules/TypeormConfigModule.html":{}}}],["const",{"_index":69,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IException.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["constructor",{"_index":16,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["constructor(category",{"_index":298,"title":{},"body":{"classes/CategoryPresenter.html":{},"classes/CategoryTodoPresenter.html":{}}}],["constructor(categoryrepo",{"_index":316,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["constructor(categoryrepoitory",{"_index":452,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["constructor(categoryrepository",{"_index":41,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["constructor(content",{"_index":92,"title":{},"body":{"classes/AddTodoCommand.html":{},"classes/TodoTask.html":{}}}],["constructor(id",{"_index":400,"title":{},"body":{"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/GetTodoByIdQuery.html":{},"classes/TodoResponse.html":{},"classes/UpdateTodoCommand.html":{}}}],["constructor(logger",{"_index":139,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["constructor(message",{"_index":648,"title":{},"body":{"classes/MessagePresenter.html":{}}}],["constructor(name",{"_index":17,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/CategoryResponse.html":{},"classes/TodoCategory.html":{}}}],["constructor(private",{"_index":156,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["constructor(public",{"_index":27,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/GetTodoByIdQuery.html":{}}}],["constructor(todo",{"_index":766,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["constructor(todorepo",{"_index":784,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["constructor(todorepository",{"_index":105,"title":{},"body":{"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["content",{"_index":90,"title":{},"body":{"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"interfaces/Category-1.html":{},"interfaces/ITodoRepository.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}}}],["context",{"_index":559,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["context.switchtohttp",{"_index":629,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["controller",{"_index":235,"title":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["controller('category",{"_index":275,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('todo",{"_index":748,"title":{},"body":{"controllers/TodoController.html":{}}}],["controller/category/category.controller",{"_index":197,"title":{},"body":{"modules/ApiModule.html":{}}}],["controller/todo/todo.controller",{"_index":196,"title":{},"body":{"modules/ApiModule.html":{}}}],["controllers",{"_index":192,"title":{},"body":{"modules/ApiModule.html":{},"controllers/CategoryController.html":{},"controllers/TodoController.html":{},"overview.html":{}}}],["coverage",{"_index":904,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cqrsmodule",{"_index":195,"title":{},"body":{"modules/ApiModule.html":{},"modules/UsecaseModule.html":{}}}],["create",{"_index":516,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{},"interfaces/ITodoRepository.html":{}}}],["createdate",{"_index":681,"title":{},"body":{"entities/Todo.html":{},"classes/TodoPresenter.html":{},"classes/TodoTask.html":{}}}],["createdatecolumn",{"_index":704,"title":{},"body":{"entities/Todo.html":{}}}],["createdatecolumn({name",{"_index":694,"title":{},"body":{"entities/Todo.html":{}}}],["createddate",{"_index":827,"title":{},"body":{"classes/TodoResponse.html":{}}}],["createquerybuilder('category",{"_index":344,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["creating",{"_index":33,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["creation",{"_index":103,"title":{},"body":{"classes/AddTodoCommandHandler.html":{}}}],["ctx",{"_index":157,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":161,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":160,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["customized",{"_index":848,"title":{},"body":{"classes/TodoTask.html":{}}}],["data",{"_index":439,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":537,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["datase",{"_index":539,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["date",{"_index":693,"title":{},"body":{"entities/Todo.html":{},"classes/TodoPresenter.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{}}}],["date().toisostring",{"_index":172,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["date.now",{"_index":627,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["debug",{"_index":553,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["debug(context",{"_index":557,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["decorators",{"_index":78,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"classes/CategoryTodoPresenter.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"classes/UpdateTodoDto.html":{}}}],["default",{"_index":132,"title":{},"body":{"classes/AddTodoDto.html":{},"entities/Todo.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":19,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IException.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}}}],["delete",{"_index":518,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{},"interfaces/ITodoRepository.html":{},"controllers/TodoController.html":{}}}],["delete(':id",{"_index":760,"title":{},"body":{"controllers/TodoController.html":{}}}],["delete(':id')@apiresponsetype(messagepresenter",{"_index":726,"title":{},"body":{"controllers/TodoController.html":{}}}],["deletebyid",{"_index":570,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["deletebyid(id",{"_index":575,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["deleted",{"_index":422,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["deletetodo",{"_index":720,"title":{},"body":{"controllers/TodoController.html":{}}}],["deletetodo(@param('id",{"_index":761,"title":{},"body":{"controllers/TodoController.html":{}}}],["deletetodo(id",{"_index":725,"title":{},"body":{"controllers/TodoController.html":{}}}],["deletetodocommand",{"_index":408,"title":{"classes/DeleteTodoCommand.html":{}},"body":{"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["deletetodocommand(id",{"_index":762,"title":{},"body":{"controllers/TodoController.html":{}}}],["deletetodocommandhandler",{"_index":412,"title":{"classes/DeleteTodoCommandHandler.html":{}},"body":{"classes/DeleteTodoCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["demo",{"_index":861,"title":{},"body":{"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":200,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UsecaseModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deployment",{"_index":994,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"controllers/CategoryController.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/ITodoRepository.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoTask.html":{},"index.html":{},"properties.html":{}}}],["docker",{"_index":970,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":905,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["domain",{"_index":979,"title":{},"body":{"index.html":{}}}],["dto/categprydto",{"_index":773,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["duration",{"_index":658,"title":{},"body":{"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["duration=${date.now",{"_index":637,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["eager",{"_index":685,"title":{},"body":{"entities/Todo.html":{}}}],["empty",{"_index":881,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["end",{"_index":179,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["enity/category.entity",{"_index":339,"title":{},"body":{"injectables/CategoryRepository.html":{},"modules/RepositoriesModule.html":{},"injectables/TodoRepository.html":{}}}],["enity/todo.entity",{"_index":340,"title":{},"body":{"injectables/CategoryRepository.html":{},"modules/RepositoriesModule.html":{},"injectables/TodoRepository.html":{}}}],["entities",{"_index":219,"title":{},"body":{"entities/Category.html":{},"entities/Todo.html":{},"modules/TypeormConfigModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":218,"title":{"entities/Category.html":{},"entities/Todo.html":{}},"body":{"entities/Category.html":{},"entities/Todo.html":{},"coverage.html":{}}}],["entity('todo",{"_index":708,"title":{},"body":{"entities/Todo.html":{}}}],["error",{"_index":278,"title":{},"body":{"controllers/CategoryController.html":{},"interfaces/ILogger.html":{},"injectables/LoggerService.html":{},"controllers/TodoController.html":{}}}],["error('category",{"_index":810,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["error('content",{"_index":847,"title":{},"body":{"classes/TodoTask.html":{}}}],["error(context",{"_index":560,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["error).message",{"_index":166,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception",{"_index":43,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["exception.getresponse",{"_index":165,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.getstatus",{"_index":163,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.stack",{"_index":186,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exceptionfilter",{"_index":136,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exceptions.service",{"_index":426,"title":{},"body":{"modules/ExceptionsModule.html":{}}}],["exceptionsmodule",{"_index":203,"title":{"modules/ExceptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExceptionsModule.html":{},"modules/UsecaseModule.html":{},"modules.html":{},"overview.html":{}}}],["exceptionsservice",{"_index":425,"title":{"injectables/ExceptionsService.html":{}},"body":{"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"coverage.html":{}}}],["execute",{"_index":38,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["execute(_",{"_index":455,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{}}}],["execute(_query",{"_index":483,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["execute(command",{"_index":47,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["execute(query",{"_index":505,"title":{},"body":{"classes/GetTodoByIdQueryHandler.html":{}}}],["executioncontext",{"_index":618,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["export",{"_index":26,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQuery.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{}}}],["exports",{"_index":430,"title":{},"body":{"modules/ExceptionsModule.html":{},"modules/RepositoriesModule.html":{}}}],["express",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":593,"title":{},"body":{"injectables/LoggerService.html":{}}}],["false",{"_index":133,"title":{},"body":{"classes/AddTodoDto.html":{},"controllers/CategoryController.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{}}}],["false})@isboolean",{"_index":127,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQuery.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{},"coverage.html":{}}}],["findall",{"_index":571,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["findbyid",{"_index":572,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["findbyid(id",{"_index":578,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["folder",{"_index":975,"title":{},"body":{"index.html":{}}}],["following",{"_index":987,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":433,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["forbiddenexception(data",{"_index":440,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["forwarded",{"_index":641,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["found",{"_index":811,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["function",{"_index":925,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":965,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":751,"title":{},"body":{"controllers/TodoController.html":{}}}],["get(':id')@apiresponsetype(todopresenter",{"_index":729,"title":{},"body":{"controllers/TodoController.html":{}}}],["get('todo",{"_index":286,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get('todo')@apiresponsetype(categorytodopresenter",{"_index":248,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get()@apiresponsetype(categorypresenter",{"_index":246,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get()@apiresponsetype(todopresenter",{"_index":731,"title":{},"body":{"controllers/TodoController.html":{}}}],["getall",{"_index":308,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["getallcategoryquery",{"_index":258,"title":{"classes/GetAllCategoryQuery.html":{}},"body":{"controllers/CategoryController.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"coverage.html":{}}}],["getallcategoryqueryhandler",{"_index":449,"title":{"classes/GetAllCategoryQueryHandler.html":{}},"body":{"classes/GetAllCategoryQueryHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getalltodoquery",{"_index":463,"title":{"classes/GetAllTodoQuery.html":{}},"body":{"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["getalltodoqueryhandler",{"_index":465,"title":{"classes/GetAllTodoQueryHandler.html":{}},"body":{"classes/GetAllTodoQueryHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getallwithtodo",{"_index":309,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["getbycategoryname",{"_index":573,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["getbycategoryname(categoryname",{"_index":580,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["getbyid",{"_index":310,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["getbyid(id",{"_index":322,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["getbyname",{"_index":311,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["getbyname(name",{"_index":324,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["getcategories",{"_index":239,"title":{},"body":{"controllers/CategoryController.html":{}}}],["getcategory",{"_index":835,"title":{},"body":{"classes/TodoTask.html":{}}}],["getcategorytodo",{"_index":240,"title":{},"body":{"controllers/CategoryController.html":{}}}],["getcategorywithtodoquery",{"_index":271,"title":{"classes/GetCategoryWithTodoQuery.html":{}},"body":{"controllers/CategoryController.html":{},"classes/GetCategoryWithTodoQuery.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"coverage.html":{}}}],["getcategorywithtodoqueryhandler",{"_index":480,"title":{"classes/GetCategoryWithTodoQueryHandler.html":{}},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcontent",{"_index":836,"title":{},"body":{"classes/TodoTask.html":{}}}],["getcreateddate",{"_index":837,"title":{},"body":{"classes/TodoTask.html":{}}}],["getdatabasehost",{"_index":522,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["getdatabasename",{"_index":523,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["getdatabasepassword",{"_index":524,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["getdatabaseport",{"_index":525,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["getdatabaseschema",{"_index":526,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["getdatabasesync",{"_index":527,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["getdatabaseuser",{"_index":528,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["getid",{"_index":712,"title":{},"body":{"classes/TodoCategory.html":{},"classes/TodoTask.html":{}}}],["getip",{"_index":612,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["getip(request",{"_index":615,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["getisdone",{"_index":838,"title":{},"body":{"classes/TodoTask.html":{}}}],["getmany",{"_index":346,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["getname",{"_index":713,"title":{},"body":{"classes/TodoCategory.html":{}}}],["getschemapath(model",{"_index":1030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(responseformat",{"_index":1029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getting",{"_index":967,"title":{"index.html":{}},"body":{}}],["gettodo",{"_index":492,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{}}}],["gettodo(@param('id",{"_index":753,"title":{},"body":{"controllers/TodoController.html":{}}}],["gettodo(id",{"_index":728,"title":{},"body":{"controllers/TodoController.html":{}}}],["gettodobyidquery",{"_index":498,"title":{"classes/GetTodoByIdQuery.html":{}},"body":{"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["gettodobyidquery(id",{"_index":754,"title":{},"body":{"controllers/TodoController.html":{}}}],["gettodobyidqueryhandler",{"_index":502,"title":{"classes/GetTodoByIdQueryHandler.html":{}},"body":{"classes/GetTodoByIdQueryHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gettodoresponse",{"_index":469,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{}}}],["gettodos",{"_index":721,"title":{},"body":{"controllers/TodoController.html":{}}}],["getupdateddate",{"_index":839,"title":{},"body":{"classes/TodoTask.html":{}}}],["graph",{"_index":1000,"title":{},"body":{"modules.html":{}}}],["handles",{"_index":32,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{}}}],["host",{"_index":144,"title":{},"body":{"classes/AllExceptionFilter.html":{},"interfaces/IDatabaseConfig.html":{}}}],["host.switchtohttp",{"_index":158,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["http://localhost:8080/api/test",{"_index":995,"title":{},"body":{"index.html":{}}}],["httpcontext",{"_index":628,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["httpcontext.getrequest",{"_index":630,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["httpexception",{"_index":152,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["https://www.docker.com/get",{"_index":971,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":153,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":164,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["icategory_repository",{"_index":60,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"modules/RepositoriesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["icategoryrepsoitory",{"_index":42,"title":{"interfaces/ICategoryRepsoitory.html":{}},"body":{"classes/AddCategoryCommandHandler.html":{},"injectables/CategoryRepository.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["icommandhandler",{"_index":35,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["id",{"_index":99,"title":{},"body":{"classes/AddTodoCommand.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/ITodoRepository.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}}}],["idatabaseconfig",{"_index":520,"title":{"interfaces/IDatabaseConfig.html":{}},"body":{"interfaces/IDatabaseConfig.html":{},"coverage.html":{}}}],["identifier",{"_index":906,"title":{},"body":{"coverage.html":{}}}],["ierror",{"_index":148,"title":{"interfaces/IError.html":{}},"body":{"classes/AllExceptionFilter.html":{},"interfaces/IError.html":{},"coverage.html":{}}}],["iexception",{"_index":44,"title":{"interfaces/IException.html":{}},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"interfaces/IException.html":{},"classes/UpdateTodoCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["iformatexceptionmessage",{"_index":437,"title":{"interfaces/IFormatExceptionMessage.html":{}},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"coverage.html":{}}}],["ilogger",{"_index":551,"title":{"interfaces/ILogger.html":{}},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{},"coverage.html":{}}}],["implements",{"_index":34,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"injectables/TodoRepository.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["import",{"_index":54,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IException.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{}}}],["imports",{"_index":198,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/RepositoriesModule.html":{},"modules/TypeormConfigModule.html":{},"modules/UsecaseModule.html":{}}}],["incoming",{"_index":634,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQuery.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{}}}],["infrastructure",{"_index":980,"title":{},"body":{"index.html":{}}}],["infrastructure/config/typeorm/typeorm.module",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/exceptions/exceptions.module",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/logger/logger.module",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/repositories/repositories.module",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["inject",{"_index":55,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["inject(icategory_repository",{"_index":65,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["inject(iexception",{"_index":67,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["inject(itodo_repository",{"_index":116,"title":{},"body":{"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["injectable",{"_index":305,"title":{"injectables/CategoryRepository.html":{},"injectables/ExceptionsService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"injectables/TodoRepository.html":{}},"body":{"injectables/CategoryRepository.html":{},"injectables/ExceptionsService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"injectables/TodoRepository.html":{},"coverage.html":{}}}],["injectables",{"_index":306,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/ExceptionsService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"injectables/TodoRepository.html":{},"overview.html":{}}}],["injectrepository",{"_index":336,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["injectrepository(category",{"_index":341,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["injectrepository(todo",{"_index":796,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["insert",{"_index":312,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["insert(category",{"_index":326,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["insert(todo",{"_index":583,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["installation",{"_index":982,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":162,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["integer",{"_index":697,"title":{},"body":{"entities/Todo.html":{}}}],["intercept",{"_index":613,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["intercept(context",{"_index":617,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["interface",{"_index":98,"title":{"interfaces/Category-1.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{}},"body":{"classes/AddTodoCommand.html":{},"interfaces/Category-1.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"classes/TodoResponse.html":{},"coverage.html":{}}}],["interfaces",{"_index":234,"title":{},"body":{"interfaces/Category-1.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"overview.html":{}}}],["internal",{"_index":277,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["internalservererrorexception",{"_index":434,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["internalservererrorexception(data",{"_index":442,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["ip",{"_index":631,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ip.replace('::ffff",{"_index":646,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ip=${ip",{"_index":635,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ipaddr",{"_index":639,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ipaddr.split",{"_index":643,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["iqueryhandler",{"_index":451,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{}}}],["isarray",{"_index":659,"title":{},"body":{"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"miscellaneous/variables.html":{}}}],["isboolean",{"_index":129,"title":{},"body":{"classes/AddTodoDto.html":{},"classes/UpdateTodoDto.html":{}}}],["isdone",{"_index":91,"title":{},"body":{"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"interfaces/Category-1.html":{},"interfaces/ITodoRepository.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}}}],["isnotempty",{"_index":84,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"classes/UpdateTodoDto.html":{}}}],["isnumber",{"_index":890,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["isobject",{"_index":130,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["isstring",{"_index":85,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"classes/UpdateTodoDto.html":{}}}],["item",{"_index":421,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["itodo_repository",{"_index":111,"title":{},"body":{"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ITodoRepository.html":{},"modules/RepositoriesModule.html":{},"classes/UpdateTodoCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["itodorepository",{"_index":106,"title":{"interfaces/ITodoRepository.html":{}},"body":{"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{},"classes/UpdateTodoCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["joincolumn",{"_index":707,"title":{},"body":{"entities/Todo.html":{}}}],["leftjoinandselect('category.todo",{"_index":345,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["length",{"_index":689,"title":{},"body":{"entities/Todo.html":{}}}],["license",{"_index":1013,"title":{},"body":{"properties.html":{}}}],["list",{"_index":642,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["list[list.length",{"_index":644,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["log",{"_index":554,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["log(context",{"_index":563,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["logger",{"_index":142,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{}}}],["logger.service",{"_index":591,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logger/logger.service",{"_index":155,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["loggermodule",{"_index":204,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["loggerservice",{"_index":140,"title":{"injectables/LoggerService.html":{}},"body":{"classes/AllExceptionFilter.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["logginginterceptor",{"_index":610,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["logmessage",{"_index":138,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["logmessage(request",{"_index":147,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["manytoone",{"_index":706,"title":{},"body":{"entities/Todo.html":{}}}],["manytoone(undefined",{"_index":683,"title":{},"body":{"entities/Todo.html":{}}}],["map",{"_index":493,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["map((data",{"_index":668,"title":{},"body":{"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["matching",{"_index":29,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQuery.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":74,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"classes/DeleteTodoCommandHandler.html":{},"interfaces/IError.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"injectables/LoggerService.html":{},"classes/MessagePresenter.html":{},"controllers/TodoController.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["message.code_error",{"_index":183,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["message.message",{"_index":185,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["message=${message.message",{"_index":184,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["messagepresenter",{"_index":267,"title":{"classes/MessagePresenter.html":{}},"body":{"controllers/CategoryController.html":{},"classes/MessagePresenter.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["metadata",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":660,"title":{},"body":{"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["method=${request.method",{"_index":181,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["methods",{"_index":36,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IException.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["miscellaneous",{"_index":964,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":711,"title":{},"body":{"classes/TodoCategory.html":{},"classes/TodoTask.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":188,"title":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/ExceptionsModule.html":{},"modules/LoggerModule.html":{},"modules/RepositoriesModule.html":{},"modules/TypeormConfigModule.html":{},"modules/UsecaseModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/ExceptionsModule.html":{},"modules/LoggerModule.html":{},"modules/RepositoriesModule.html":{},"modules/TypeormConfigModule.html":{},"modules/UsecaseModule.html":{}}}],["modules",{"_index":190,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/ExceptionsModule.html":{},"modules/LoggerModule.html":{},"modules/RepositoriesModule.html":{},"modules/TypeormConfigModule.html":{},"modules/UsecaseModule.html":{},"modules.html":{},"overview.html":{}}}],["mysql2",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":15,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IException.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["nestinterceptor",{"_index":623,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["nestjs",{"_index":602,"title":{},"body":{"injectables/LoggerService.html":{}}}],["nestjs/common",{"_index":56,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommandHandler.html":{},"modules/UsecaseModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":852,"title":{},"body":{"modules/TypeormConfigModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["nestjs/cqrs",{"_index":58,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"modules/ApiModule.html":{},"controllers/CategoryController.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"controllers/TodoController.html":{},"classes/UpdateTodoCommandHandler.html":{},"modules/UsecaseModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":83,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"classes/CategoryTodoPresenter.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"classes/UpdateTodoDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":337,"title":{},"body":{"injectables/CategoryRepository.html":{},"modules/RepositoriesModule.html":{},"injectables/TodoRepository.html":{},"modules/TypeormConfigModule.html":{},"dependencies.html":{}}}],["new",{"_index":10,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryTodoPresenter.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/ITodoRepository.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"coverage.html":{}}}],["next",{"_index":619,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["next.handle().pipe",{"_index":636,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["now",{"_index":626,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["now}ms",{"_index":638,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["npm",{"_index":998,"title":{},"body":{"index.html":{}}}],["null",{"_index":168,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/CategoryRepository.html":{},"classes/GetTodoByIdQueryHandler.html":{},"classes/TodoCategory.html":{}}}],["nullable",{"_index":691,"title":{},"body":{"entities/Todo.html":{}}}],["number",{"_index":100,"title":{},"body":{"classes/AddTodoCommand.html":{},"classes/AllExceptionFilter.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/GetTodoByIdQuery.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ITodoRepository.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoDto.html":{}}}],["observable",{"_index":622,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["ondelete",{"_index":227,"title":{},"body":{"entities/Category.html":{},"entities/Todo.html":{}}}],["onetomany",{"_index":231,"title":{},"body":{"entities/Category.html":{}}}],["onetomany(undefined",{"_index":225,"title":{},"body":{"entities/Category.html":{}}}],["optional",{"_index":24,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["out",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UsecaseModule.html":{},"overview.html":{}}}],["overview",{"_index":1006,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":938,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":519,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{},"interfaces/ITodoRepository.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TodoController.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IException.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["parseintpipe",{"_index":737,"title":{},"body":{"controllers/TodoController.html":{}}}],["password",{"_index":541,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["path",{"_index":173,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["pg",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["port",{"_index":538,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["post",{"_index":253,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["post()@apiresponsetype(messagepresenter",{"_index":242,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["postgres",{"_index":855,"title":{},"body":{"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":237,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["prerequisites",{"_index":969,"title":{},"body":{"index.html":{}}}],["presenter/categorytodopresenter",{"_index":251,"title":{},"body":{"controllers/CategoryController.html":{}}}],["primarygeneratedcolumn",{"_index":221,"title":{},"body":{"entities/Category.html":{},"entities/Todo.html":{}}}],["primarygeneratedcolumn({type",{"_index":696,"title":{},"body":{"entities/Todo.html":{}}}],["private",{"_index":39,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"injectables/LoggingInterceptor.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["process.env.database_schema",{"_index":859,"title":{},"body":{"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.database_url",{"_index":857,"title":{},"body":{"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":603,"title":{},"body":{"injectables/LoggerService.html":{}}}],["production",{"_index":604,"title":{},"body":{"injectables/LoggerService.html":{}}}],["promise",{"_index":50,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["properties",{"_index":13,"title":{"properties.html":{}},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoDto.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/GetTodoByIdQuery.html":{},"interfaces/IError.html":{},"interfaces/IFormatExceptionMessage.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"entities/Todo.html":{},"classes/TodoPresenter.html":{},"classes/TodoResponse.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["provide",{"_index":428,"title":{},"body":{"modules/ExceptionsModule.html":{},"modules/RepositoriesModule.html":{}}}],["providers",{"_index":427,"title":{},"body":{"modules/ExceptionsModule.html":{},"modules/LoggerModule.html":{},"modules/RepositoriesModule.html":{},"modules/UsecaseModule.html":{}}}],["public",{"_index":14,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddTodoCommand.html":{},"interfaces/Category-1.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/GetTodoByIdQuery.html":{},"classes/TodoCategory.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{}}}],["purpose",{"_index":862,"title":{},"body":{"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["put",{"_index":738,"title":{},"body":{"controllers/TodoController.html":{}}}],["put()@apiresponsetype(messagepresenter",{"_index":735,"title":{},"body":{"controllers/TodoController.html":{}}}],["query",{"_index":342,"title":{},"body":{"injectables/CategoryRepository.html":{},"classes/GetTodoByIdQueryHandler.html":{}}}],["query.map((q",{"_index":347,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["querybus",{"_index":255,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["queryhandler",{"_index":458,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{}}}],["queryhandler(getallcategoryquery",{"_index":459,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["queryhandler(getalltodoquery",{"_index":470,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{}}}],["queryhandler(getcategorywithtodoquery",{"_index":486,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["queryhandler(gettodobyidquery",{"_index":507,"title":{},"body":{"classes/GetTodoByIdQueryHandler.html":{}}}],["readonly",{"_index":66,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"injectables/LoggingInterceptor.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}}}],["ref",{"_index":1028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["relations",{"_index":804,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["remove",{"_index":313,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["remove(id",{"_index":328,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["repositoriesmodule",{"_index":205,"title":{"modules/RepositoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RepositoriesModule.html":{},"modules/UsecaseModule.html":{},"modules.html":{},"overview.html":{}}}],["repository",{"_index":317,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["request",{"_index":151,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["request.connection.remoteaddress",{"_index":645,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.headers['x",{"_index":640,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.method",{"_index":670,"title":{},"body":{"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["request.path",{"_index":180,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["request.url",{"_index":174,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["required",{"_index":75,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}}}],["reset",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UsecaseModule.html":{},"overview.html":{}}}],["response",{"_index":159,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["response.status(status).json(responsedata",{"_index":176,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["responsedata",{"_index":169,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["responseformat",{"_index":656,"title":{"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{}},"body":{"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"coverage.html":{}}}],["responseinterceptor",{"_index":667,"title":{"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}},"body":{"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"coverage.html":{}}}],["results",{"_index":28,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQuery.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":283,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":49,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IException.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["rimraf",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":985,"title":{},"body":{"index.html":{}}}],["rquest",{"_index":877,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["run",{"_index":986,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":625,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":666,"title":{},"body":{"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{}}}],["sample",{"_index":972,"title":{},"body":{"index.html":{}}}],["schema",{"_index":542,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["select",{"_index":350,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["service",{"_index":601,"title":{},"body":{"injectables/LoggerService.html":{}}}],["set",{"_index":423,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQuery.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{}}}],["src",{"_index":977,"title":{},"body":{"index.html":{}}}],["src/.../apiresponsedecorator.ts",{"_index":1017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../icategoryrepository.ts",{"_index":1019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../iexception.ts",{"_index":1020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":1018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../itodorepository.ts",{"_index":1021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":966,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../typeorm.module.ts",{"_index":1022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/api/api.module.ts",{"_index":191,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/api/common/apiresponsedecorator",{"_index":270,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["src/api/common/apiresponsedecorator.ts",{"_index":908,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/api/common/responseinterceptor.ts",{"_index":657,"title":{},"body":{"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["src/api/common/responseinterceptor.ts:16",{"_index":663,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/api/common/responseinterceptor.ts:18",{"_index":665,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/api/common/responseinterceptor.ts:20",{"_index":662,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/api/common/responseinterceptor.ts:22",{"_index":664,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/api/common/responseinterceptor.ts:24",{"_index":661,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/api/common/responseinterceptor.ts:40",{"_index":677,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["src/api/controller/category/category.controller.ts",{"_index":236,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/api/controller/category/category.controller.ts:27",{"_index":247,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/api/controller/category/category.controller.ts:36",{"_index":249,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/api/controller/category/category.controller.ts:46",{"_index":244,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/api/controller/todo/todo.controller.ts",{"_index":718,"title":{},"body":{"controllers/TodoController.html":{},"coverage.html":{}}}],["src/api/controller/todo/todo.controller.ts:39",{"_index":730,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/controller/todo/todo.controller.ts:46",{"_index":732,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/controller/todo/todo.controller.ts:55",{"_index":736,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/controller/todo/todo.controller.ts:65",{"_index":727,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/controller/todo/todo.controller.ts:71",{"_index":724,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/dto/addcategorydto",{"_index":260,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/api/dto/addcategorydto.ts",{"_index":77,"title":{},"body":{"classes/AddCategoryDto.html":{},"coverage.html":{}}}],["src/api/dto/addcategorydto.ts:8",{"_index":81,"title":{},"body":{"classes/AddCategoryDto.html":{}}}],["src/api/dto/addtododto",{"_index":739,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/dto/addtododto.ts",{"_index":121,"title":{},"body":{"classes/AddTodoDto.html":{},"coverage.html":{}}}],["src/api/dto/addtododto.ts:13",{"_index":128,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["src/api/dto/addtododto.ts:17",{"_index":124,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["src/api/dto/addtododto.ts:9",{"_index":125,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["src/api/dto/categprydto.ts",{"_index":294,"title":{},"body":{"classes/CategoryDto.html":{},"coverage.html":{}}}],["src/api/dto/categprydto.ts:5",{"_index":295,"title":{},"body":{"classes/CategoryDto.html":{}}}],["src/api/dto/categprydto.ts:7",{"_index":296,"title":{},"body":{"classes/CategoryDto.html":{}}}],["src/api/dto/updatetododto",{"_index":740,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/dto/updatetododto.ts",{"_index":882,"title":{},"body":{"classes/UpdateTodoDto.html":{},"coverage.html":{}}}],["src/api/dto/updatetododto.ts:12",{"_index":889,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["src/api/dto/updatetododto.ts:17",{"_index":885,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["src/api/dto/updatetododto.ts:21",{"_index":884,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["src/api/dto/updatetododto.ts:8",{"_index":887,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["src/api/presenter/categorypresenter",{"_index":257,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/api/presenter/categorypresenter.ts",{"_index":297,"title":{},"body":{"classes/CategoryPresenter.html":{},"coverage.html":{}}}],["src/api/presenter/categorypresenter.ts:11",{"_index":299,"title":{},"body":{"classes/CategoryPresenter.html":{}}}],["src/api/presenter/categorypresenter.ts:7",{"_index":300,"title":{},"body":{"classes/CategoryPresenter.html":{}}}],["src/api/presenter/categorypresenter.ts:9",{"_index":301,"title":{},"body":{"classes/CategoryPresenter.html":{}}}],["src/api/presenter/categorytodopresenter.ts",{"_index":390,"title":{},"body":{"classes/CategoryTodoPresenter.html":{},"coverage.html":{}}}],["src/api/presenter/categorytodopresenter.ts:11",{"_index":391,"title":{},"body":{"classes/CategoryTodoPresenter.html":{}}}],["src/api/presenter/categorytodopresenter.ts:7",{"_index":392,"title":{},"body":{"classes/CategoryTodoPresenter.html":{}}}],["src/api/presenter/categorytodopresenter.ts:9",{"_index":393,"title":{},"body":{"classes/CategoryTodoPresenter.html":{}}}],["src/api/presenter/messagepresenter",{"_index":268,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["src/api/presenter/messagepresenter.ts",{"_index":647,"title":{},"body":{"classes/MessagePresenter.html":{},"coverage.html":{}}}],["src/api/presenter/messagepresenter.ts:5",{"_index":649,"title":{},"body":{"classes/MessagePresenter.html":{}}}],["src/api/presenter/todopresenter",{"_index":741,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/presenter/todopresenter.ts",{"_index":765,"title":{},"body":{"classes/TodoPresenter.html":{},"coverage.html":{}}}],["src/api/presenter/todopresenter.ts:11",{"_index":771,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["src/api/presenter/todopresenter.ts:13",{"_index":769,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["src/api/presenter/todopresenter.ts:15",{"_index":772,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["src/api/presenter/todopresenter.ts:17",{"_index":767,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["src/api/presenter/todopresenter.ts:7",{"_index":770,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["src/api/presenter/todopresenter.ts:9",{"_index":768,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["src/app.module.ts",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts",{"_index":521,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"coverage.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts:11",{"_index":532,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts:16",{"_index":535,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts:21",{"_index":531,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts:26",{"_index":530,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts:31",{"_index":533,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts:36",{"_index":534,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts:6",{"_index":529,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["src/domain/interface/exception/ierror",{"_index":154,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["src/domain/interface/exception/ierror.ts",{"_index":544,"title":{},"body":{"interfaces/IError.html":{},"coverage.html":{}}}],["src/domain/interface/exception/iexception",{"_index":59,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["src/domain/interface/exception/iexception.ts",{"_index":545,"title":{},"body":{"interfaces/IException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/domain/interface/exception/iexception.ts:4",{"_index":546,"title":{},"body":{"interfaces/IException.html":{}}}],["src/domain/interface/exception/iexception.ts:5",{"_index":548,"title":{},"body":{"interfaces/IException.html":{}}}],["src/domain/interface/exception/iexception.ts:6",{"_index":547,"title":{},"body":{"interfaces/IException.html":{}}}],["src/domain/interface/exception/iexception.ts:7",{"_index":549,"title":{},"body":{"interfaces/IException.html":{}}}],["src/domain/interface/exception/iformatexceptionmessage",{"_index":446,"title":{},"body":{"injectables/ExceptionsService.html":{}}}],["src/domain/interface/exception/iformatexceptionmessage.ts",{"_index":550,"title":{},"body":{"interfaces/IFormatExceptionMessage.html":{},"coverage.html":{}}}],["src/domain/interface/logger/ilogger",{"_index":599,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/domain/interface/logger/ilogger.ts",{"_index":552,"title":{},"body":{"interfaces/ILogger.html":{},"coverage.html":{}}}],["src/domain/interface/logger/ilogger.ts:2",{"_index":558,"title":{},"body":{"interfaces/ILogger.html":{}}}],["src/domain/interface/logger/ilogger.ts:3",{"_index":564,"title":{},"body":{"interfaces/ILogger.html":{}}}],["src/domain/interface/logger/ilogger.ts:4",{"_index":562,"title":{},"body":{"interfaces/ILogger.html":{}}}],["src/domain/interface/logger/ilogger.ts:5",{"_index":568,"title":{},"body":{"interfaces/ILogger.html":{}}}],["src/domain/interface/logger/ilogger.ts:6",{"_index":566,"title":{},"body":{"interfaces/ILogger.html":{}}}],["src/domain/interface/repository/icategoryrepository",{"_index":61,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"injectables/CategoryRepository.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"modules/RepositoriesModule.html":{}}}],["src/domain/interface/repository/icategoryrepository.ts",{"_index":510,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/domain/interface/repository/icategoryrepository.ts:15",{"_index":515,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{}}}],["src/domain/interface/repository/icategoryrepository.ts:21",{"_index":517,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{}}}],["src/domain/interface/repository/icategoryrepository.ts:26",{"_index":513,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{}}}],["src/domain/interface/repository/icategoryrepository.ts:31",{"_index":511,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{}}}],["src/domain/interface/repository/icategoryrepository.ts:36",{"_index":512,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{}}}],["src/domain/interface/repository/icategoryrepository.ts:9",{"_index":514,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{}}}],["src/domain/interface/repository/itodorepository",{"_index":112,"title":{},"body":{"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"modules/RepositoriesModule.html":{},"injectables/TodoRepository.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["src/domain/interface/repository/itodorepository.ts",{"_index":569,"title":{},"body":{"interfaces/ITodoRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/domain/interface/repository/itodorepository.ts:14",{"_index":577,"title":{},"body":{"interfaces/ITodoRepository.html":{}}}],["src/domain/interface/repository/itodorepository.ts:20",{"_index":579,"title":{},"body":{"interfaces/ITodoRepository.html":{}}}],["src/domain/interface/repository/itodorepository.ts:29",{"_index":587,"title":{},"body":{"interfaces/ITodoRepository.html":{}}}],["src/domain/interface/repository/itodorepository.ts:40",{"_index":576,"title":{},"body":{"interfaces/ITodoRepository.html":{}}}],["src/domain/interface/repository/itodorepository.ts:46",{"_index":581,"title":{},"body":{"interfaces/ITodoRepository.html":{}}}],["src/domain/interface/repository/itodorepository.ts:9",{"_index":584,"title":{},"body":{"interfaces/ITodoRepository.html":{}}}],["src/domain/model/todocategory",{"_index":63,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{},"injectables/TodoRepository.html":{}}}],["src/domain/model/todocategory.ts",{"_index":709,"title":{},"body":{"classes/TodoCategory.html":{},"coverage.html":{}}}],["src/domain/model/todocategory.ts:13",{"_index":716,"title":{},"body":{"classes/TodoCategory.html":{}}}],["src/domain/model/todocategory.ts:17",{"_index":715,"title":{},"body":{"classes/TodoCategory.html":{}}}],["src/domain/model/todocategory.ts:21",{"_index":717,"title":{},"body":{"classes/TodoCategory.html":{}}}],["src/domain/model/todocategory.ts:6",{"_index":714,"title":{},"body":{"classes/TodoCategory.html":{}}}],["src/domain/model/todotask",{"_index":114,"title":{},"body":{"classes/AddTodoCommandHandler.html":{},"injectables/CategoryRepository.html":{},"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["src/domain/model/todotask.ts",{"_index":834,"title":{},"body":{"classes/TodoTask.html":{},"coverage.html":{}}}],["src/domain/model/todotask.ts:20",{"_index":844,"title":{},"body":{"classes/TodoTask.html":{}}}],["src/domain/model/todotask.ts:23",{"_index":842,"title":{},"body":{"classes/TodoTask.html":{}}}],["src/domain/model/todotask.ts:26",{"_index":845,"title":{},"body":{"classes/TodoTask.html":{}}}],["src/domain/model/todotask.ts:29",{"_index":843,"title":{},"body":{"classes/TodoTask.html":{}}}],["src/domain/model/todotask.ts:32",{"_index":846,"title":{},"body":{"classes/TodoTask.html":{}}}],["src/domain/model/todotask.ts:35",{"_index":841,"title":{},"body":{"classes/TodoTask.html":{}}}],["src/domain/model/todotask.ts:6",{"_index":840,"title":{},"body":{"classes/TodoTask.html":{}}}],["src/infrastructure/config/typeorm/typeorm.module.ts",{"_index":850,"title":{},"body":{"modules/TypeormConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/enity/category.entity",{"_index":854,"title":{},"body":{"modules/TypeormConfigModule.html":{}}}],["src/infrastructure/enity/category.entity.ts",{"_index":220,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/infrastructure/enity/category.entity.ts:12",{"_index":229,"title":{},"body":{"entities/Category.html":{}}}],["src/infrastructure/enity/category.entity.ts:6",{"_index":222,"title":{},"body":{"entities/Category.html":{}}}],["src/infrastructure/enity/category.entity.ts:9",{"_index":224,"title":{},"body":{"entities/Category.html":{}}}],["src/infrastructure/enity/todo.entity",{"_index":230,"title":{},"body":{"entities/Category.html":{},"modules/TypeormConfigModule.html":{}}}],["src/infrastructure/enity/todo.entity.ts",{"_index":680,"title":{},"body":{"entities/Todo.html":{},"coverage.html":{}}}],["src/infrastructure/enity/todo.entity.ts:15",{"_index":698,"title":{},"body":{"entities/Todo.html":{}}}],["src/infrastructure/enity/todo.entity.ts:18",{"_index":692,"title":{},"body":{"entities/Todo.html":{}}}],["src/infrastructure/enity/todo.entity.ts:21",{"_index":700,"title":{},"body":{"entities/Todo.html":{}}}],["src/infrastructure/enity/todo.entity.ts:24",{"_index":695,"title":{},"body":{"entities/Todo.html":{}}}],["src/infrastructure/enity/todo.entity.ts:27",{"_index":702,"title":{},"body":{"entities/Todo.html":{}}}],["src/infrastructure/enity/todo.entity.ts:34",{"_index":687,"title":{},"body":{"entities/Todo.html":{}}}],["src/infrastructure/exceptions/exceptions.module",{"_index":894,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["src/infrastructure/exceptions/exceptions.module.ts",{"_index":424,"title":{},"body":{"modules/ExceptionsModule.html":{}}}],["src/infrastructure/exceptions/exceptions.service.ts",{"_index":431,"title":{},"body":{"injectables/ExceptionsService.html":{},"coverage.html":{}}}],["src/infrastructure/exceptions/exceptions.service.ts:13",{"_index":438,"title":{},"body":{"injectables/ExceptionsService.html":{}}}],["src/infrastructure/exceptions/exceptions.service.ts:16",{"_index":443,"title":{},"body":{"injectables/ExceptionsService.html":{}}}],["src/infrastructure/exceptions/exceptions.service.ts:19",{"_index":441,"title":{},"body":{"injectables/ExceptionsService.html":{}}}],["src/infrastructure/exceptions/exceptions.service.ts:22",{"_index":445,"title":{},"body":{"injectables/ExceptionsService.html":{}}}],["src/infrastructure/filter/allexceptionfilter.ts",{"_index":135,"title":{},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["src/infrastructure/filter/allexceptionfilter.ts:12",{"_index":141,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["src/infrastructure/filter/allexceptionfilter.ts:14",{"_index":146,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["src/infrastructure/filter/allexceptionfilter.ts:42",{"_index":150,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["src/infrastructure/interceptor/logging/logginginterceptor.ts",{"_index":611,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/infrastructure/interceptor/logging/logginginterceptor.ts:11",{"_index":614,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/infrastructure/interceptor/logging/logginginterceptor.ts:14",{"_index":621,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/infrastructure/interceptor/logging/logginginterceptor.ts:36",{"_index":616,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/infrastructure/interceptor/response/responseformat.ts",{"_index":671,"title":{},"body":{"classes/ResponseFormat-1.html":{},"coverage.html":{}}}],["src/infrastructure/interceptor/response/responseformat.ts:11",{"_index":675,"title":{},"body":{"classes/ResponseFormat-1.html":{}}}],["src/infrastructure/interceptor/response/responseformat.ts:13",{"_index":672,"title":{},"body":{"classes/ResponseFormat-1.html":{}}}],["src/infrastructure/interceptor/response/responseformat.ts:5",{"_index":674,"title":{},"body":{"classes/ResponseFormat-1.html":{}}}],["src/infrastructure/interceptor/response/responseformat.ts:7",{"_index":676,"title":{},"body":{"classes/ResponseFormat-1.html":{}}}],["src/infrastructure/interceptor/response/responseformat.ts:9",{"_index":673,"title":{},"body":{"classes/ResponseFormat-1.html":{}}}],["src/infrastructure/interceptor/response/responseinterceptor.ts",{"_index":678,"title":{},"body":{"injectables/ResponseInterceptor-1.html":{},"coverage.html":{}}}],["src/infrastructure/interceptor/response/responseinterceptor.ts:14",{"_index":679,"title":{},"body":{"injectables/ResponseInterceptor-1.html":{}}}],["src/infrastructure/logger/logger.module.ts",{"_index":590,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/infrastructure/logger/logger.service.ts",{"_index":592,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/infrastructure/logger/logger.service.ts:14",{"_index":596,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/infrastructure/logger/logger.service.ts:17",{"_index":595,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/infrastructure/logger/logger.service.ts:20",{"_index":598,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/infrastructure/logger/logger.service.ts:23",{"_index":597,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/infrastructure/logger/logger.service.ts:9",{"_index":594,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts",{"_index":307,"title":{},"body":{"injectables/CategoryRepository.html":{},"coverage.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:11",{"_index":318,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:16",{"_index":321,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:23",{"_index":320,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:30",{"_index":323,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:34",{"_index":325,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:38",{"_index":327,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:42",{"_index":329,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:45",{"_index":334,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:69",{"_index":331,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/repositories.module",{"_index":895,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["src/infrastructure/repositories/repositories.module.ts",{"_index":651,"title":{},"body":{"modules/RepositoriesModule.html":{}}}],["src/infrastructure/repositories/todo.repository.ts",{"_index":783,"title":{},"body":{"injectables/TodoRepository.html":{},"coverage.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:100",{"_index":792,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:12",{"_index":785,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:19",{"_index":790,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:26",{"_index":791,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:50",{"_index":788,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:57",{"_index":789,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:62",{"_index":795,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:85",{"_index":787,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:89",{"_index":794,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/main.ts",{"_index":924,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommand",{"_index":261,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommand.ts",{"_index":6,"title":{},"body":{"classes/AddCategoryCommand.html":{},"coverage.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommand.ts:4",{"_index":20,"title":{},"body":{"classes/AddCategoryCommand.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommand.ts:5",{"_index":25,"title":{},"body":{"classes/AddCategoryCommand.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommandhandler.ts",{"_index":31,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"coverage.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommandhandler.ts:20",{"_index":45,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommandhandler.ts:27",{"_index":48,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommandhandler.ts:32",{"_index":52,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["src/usecase/category/command/index.ts",{"_index":931,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/usecase/category/query/getallcategory/categoryresponse",{"_index":263,"title":{},"body":{"controllers/CategoryController.html":{},"classes/CategoryPresenter.html":{}}}],["src/usecase/category/query/getallcategory/categoryresponse.ts",{"_index":387,"title":{},"body":{"classes/CategoryResponse.html":{},"coverage.html":{}}}],["src/usecase/category/query/getallcategory/categoryresponse.ts:1",{"_index":388,"title":{},"body":{"classes/CategoryResponse.html":{}}}],["src/usecase/category/query/getallcategory/categoryresponse.ts:2",{"_index":389,"title":{},"body":{"classes/CategoryResponse.html":{}}}],["src/usecase/category/query/getallcategory/getallcategoryquery",{"_index":259,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/usecase/category/query/getallcategory/getallcategoryquery.ts",{"_index":448,"title":{},"body":{"classes/GetAllCategoryQuery.html":{},"coverage.html":{}}}],["src/usecase/category/query/getallcategory/getallcategoryqueryhandler.ts",{"_index":450,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{},"coverage.html":{}}}],["src/usecase/category/query/getallcategory/getallcategoryqueryhandler.ts:13",{"_index":453,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["src/usecase/category/query/getallcategory/getallcategoryqueryhandler.ts:18",{"_index":456,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["src/usecase/category/query/getcategorywithtodo/categorytodoresponse",{"_index":274,"title":{},"body":{"controllers/CategoryController.html":{},"classes/CategoryTodoPresenter.html":{}}}],["src/usecase/category/query/getcategorywithtodo/categorytodoresponse.ts",{"_index":398,"title":{},"body":{"classes/CategoryTodoResponse.html":{},"coverage.html":{}}}],["src/usecase/category/query/getcategorywithtodo/categorytodoresponse.ts:3",{"_index":402,"title":{},"body":{"classes/CategoryTodoResponse.html":{}}}],["src/usecase/category/query/getcategorywithtodo/categorytodoresponse.ts:5",{"_index":404,"title":{},"body":{"classes/CategoryTodoResponse.html":{}}}],["src/usecase/category/query/getcategorywithtodo/categorytodoresponse.ts:6",{"_index":405,"title":{},"body":{"classes/CategoryTodoResponse.html":{}}}],["src/usecase/category/query/getcategorywithtodo/categorytodoresponse.ts:7",{"_index":406,"title":{},"body":{"classes/CategoryTodoResponse.html":{}}}],["src/usecase/category/query/getcategorywithtodo/getcategorywithtodoquery",{"_index":272,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/usecase/category/query/getcategorywithtodo/getcategorywithtodoquery.ts",{"_index":479,"title":{},"body":{"classes/GetCategoryWithTodoQuery.html":{},"coverage.html":{}}}],["src/usecase/category/query/getcategorywithtodo/getcategorywithtodoqueryhandler.ts",{"_index":481,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{},"coverage.html":{}}}],["src/usecase/category/query/getcategorywithtodo/getcategorywithtodoqueryhandler.ts:14",{"_index":482,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["src/usecase/category/query/getcategorywithtodo/getcategorywithtodoqueryhandler.ts:19",{"_index":484,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["src/usecase/category/query/index.ts",{"_index":932,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommand",{"_index":742,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommand.ts",{"_index":89,"title":{},"body":{"classes/AddTodoCommand.html":{},"interfaces/Category-1.html":{},"coverage.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommand.ts:1",{"_index":94,"title":{},"body":{"classes/AddTodoCommand.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommand.ts:3",{"_index":96,"title":{},"body":{"classes/AddTodoCommand.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommand.ts:4",{"_index":97,"title":{},"body":{"classes/AddTodoCommand.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommand.ts:5",{"_index":95,"title":{},"body":{"classes/AddTodoCommand.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommandhandler.ts",{"_index":102,"title":{},"body":{"classes/AddTodoCommandHandler.html":{},"coverage.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommandhandler.ts:18",{"_index":107,"title":{},"body":{"classes/AddTodoCommandHandler.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommandhandler.ts:24",{"_index":109,"title":{},"body":{"classes/AddTodoCommandHandler.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommandhandler.ts:36",{"_index":110,"title":{},"body":{"classes/AddTodoCommandHandler.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommand",{"_index":743,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommand.ts",{"_index":409,"title":{},"body":{"classes/DeleteTodoCommand.html":{},"coverage.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommand.ts:1",{"_index":410,"title":{},"body":{"classes/DeleteTodoCommand.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommand.ts:2",{"_index":411,"title":{},"body":{"classes/DeleteTodoCommand.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommandhandler.ts",{"_index":413,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{},"coverage.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommandhandler.ts:16",{"_index":414,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommandhandler.ts:21",{"_index":415,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommandhandler.ts:26",{"_index":417,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["src/usecase/todo/command/index.ts",{"_index":933,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommand",{"_index":745,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommand.ts",{"_index":865,"title":{},"body":{"classes/UpdateTodoCommand.html":{},"coverage.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommand.ts:1",{"_index":866,"title":{},"body":{"classes/UpdateTodoCommand.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommand.ts:3",{"_index":869,"title":{},"body":{"classes/UpdateTodoCommand.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommand.ts:4",{"_index":868,"title":{},"body":{"classes/UpdateTodoCommand.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommand.ts:5",{"_index":870,"title":{},"body":{"classes/UpdateTodoCommand.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommand.ts:6",{"_index":867,"title":{},"body":{"classes/UpdateTodoCommand.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommandhandler.ts",{"_index":872,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{},"coverage.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommandhandler.ts:16",{"_index":873,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommandhandler.ts:21",{"_index":874,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommandhandler.ts:30",{"_index":876,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["src/usecase/todo/query/getalltodo/getalltodoquery",{"_index":746,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/usecase/todo/query/getalltodo/getalltodoquery.ts",{"_index":464,"title":{},"body":{"classes/GetAllTodoQuery.html":{},"coverage.html":{}}}],["src/usecase/todo/query/getalltodo/getalltodoqueryhandler.ts",{"_index":466,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{},"coverage.html":{}}}],["src/usecase/todo/query/getalltodo/getalltodoqueryhandler.ts:13",{"_index":467,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{}}}],["src/usecase/todo/query/getalltodo/getalltodoqueryhandler.ts:17",{"_index":468,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{}}}],["src/usecase/todo/query/getalltodobyid/gettodobyidquery",{"_index":747,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/usecase/todo/query/getalltodobyid/gettodobyidquery.ts",{"_index":499,"title":{},"body":{"classes/GetTodoByIdQuery.html":{},"coverage.html":{}}}],["src/usecase/todo/query/getalltodobyid/gettodobyidquery.ts:1",{"_index":500,"title":{},"body":{"classes/GetTodoByIdQuery.html":{}}}],["src/usecase/todo/query/getalltodobyid/gettodobyidquery.ts:2",{"_index":501,"title":{},"body":{"classes/GetTodoByIdQuery.html":{}}}],["src/usecase/todo/query/getalltodobyid/gettodobyidqueryhandler.ts",{"_index":503,"title":{},"body":{"classes/GetTodoByIdQueryHandler.html":{},"coverage.html":{}}}],["src/usecase/todo/query/getalltodobyid/gettodobyidqueryhandler.ts:13",{"_index":504,"title":{},"body":{"classes/GetTodoByIdQueryHandler.html":{}}}],["src/usecase/todo/query/getalltodobyid/gettodobyidqueryhandler.ts:17",{"_index":506,"title":{},"body":{"classes/GetTodoByIdQueryHandler.html":{}}}],["src/usecase/todo/query/gettodoresponse",{"_index":407,"title":{},"body":{"classes/CategoryTodoResponse.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{}}}],["src/usecase/todo/query/gettodoresponse.ts",{"_index":826,"title":{},"body":{"classes/TodoResponse.html":{},"coverage.html":{}}}],["src/usecase/todo/query/gettodoresponse.ts:1",{"_index":828,"title":{},"body":{"classes/TodoResponse.html":{}}}],["src/usecase/todo/query/gettodoresponse.ts:3",{"_index":832,"title":{},"body":{"classes/TodoResponse.html":{}}}],["src/usecase/todo/query/gettodoresponse.ts:4",{"_index":830,"title":{},"body":{"classes/TodoResponse.html":{}}}],["src/usecase/todo/query/gettodoresponse.ts:5",{"_index":833,"title":{},"body":{"classes/TodoResponse.html":{}}}],["src/usecase/todo/query/gettodoresponse.ts:6",{"_index":831,"title":{},"body":{"classes/TodoResponse.html":{}}}],["src/usecase/todo/query/gettodoresponse.ts:7",{"_index":829,"title":{},"body":{"classes/TodoResponse.html":{}}}],["src/usecase/todo/query/index.ts",{"_index":935,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/usecase/usecase.module.ts",{"_index":893,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["start:docker",{"_index":990,"title":{},"body":{"index.html":{}}}],["started",{"_index":968,"title":{"index.html":{}},"body":{"index.html":{}}}],["statements",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":149,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["status=${status",{"_index":182,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["statuscode",{"_index":170,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["string",{"_index":18,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoDto.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoDto.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":976,"title":{},"body":{"index.html":{}}}],["succesful",{"_index":993,"title":{},"body":{"index.html":{}}}],["success",{"_index":293,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["summary",{"_index":536,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"injectables/LoggerService.html":{}}}],["super.debug(`[debug",{"_index":605,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.error(`[error",{"_index":607,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.log(`[info",{"_index":606,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.verbose(`[verbose",{"_index":609,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.warn(`[warn",{"_index":608,"title":{},"body":{"injectables/LoggerService.html":{}}}],["support",{"_index":1004,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1005,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["sync",{"_index":543,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["synchronize",{"_index":860,"title":{},"body":{"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":380,"title":{},"body":{"injectables/CategoryRepository.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{}}}],["t.content",{"_index":381,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["t.getcontent",{"_index":495,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["t.getcreateddate",{"_index":497,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["t.getid",{"_index":494,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["t.getisdone",{"_index":496,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["t.id",{"_index":385,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["t.isdone",{"_index":383,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["table",{"_index":937,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":624,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["test",{"_index":999,"title":{},"body":{"index.html":{}}}],["tests",{"_index":997,"title":{},"body":{"index.html":{}}}],["this.category",{"_index":781,"title":{},"body":{"classes/TodoPresenter.html":{},"classes/TodoTask.html":{}}}],["this.categoryrepo",{"_index":343,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["this.categoryrepo.delete(id",{"_index":360,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["this.categoryrepo.find",{"_index":349,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["this.categoryrepo.findoneby",{"_index":355,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["this.categoryrepo.findonebyorfail",{"_index":353,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["this.categoryrepo.insert(category",{"_index":802,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.categoryrepo.insert(catentity",{"_index":359,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["this.categoryrepoitory.getall",{"_index":460,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["this.categoryrepository.insert(new",{"_index":71,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["this.commandbus.execute",{"_index":758,"title":{},"body":{"controllers/TodoController.html":{}}}],["this.commandbus.execute(new",{"_index":291,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["this.content",{"_index":775,"title":{},"body":{"classes/TodoPresenter.html":{},"classes/TodoTask.html":{}}}],["this.createdate",{"_index":779,"title":{},"body":{"classes/TodoPresenter.html":{},"classes/TodoTask.html":{}}}],["this.exception.badrequestexception",{"_index":73,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["this.getip(request",{"_index":632,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.id",{"_index":302,"title":{},"body":{"classes/CategoryPresenter.html":{},"classes/CategoryTodoPresenter.html":{},"classes/TodoCategory.html":{},"classes/TodoPresenter.html":{},"classes/TodoTask.html":{}}}],["this.isdone",{"_index":777,"title":{},"body":{"classes/TodoPresenter.html":{},"classes/TodoTask.html":{}}}],["this.logger.error",{"_index":178,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["this.logger.log",{"_index":633,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.logger.warn",{"_index":187,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["this.logmessage(request",{"_index":175,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["this.message",{"_index":650,"title":{},"body":{"classes/MessagePresenter.html":{}}}],["this.name",{"_index":303,"title":{},"body":{"classes/CategoryPresenter.html":{},"classes/CategoryTodoPresenter.html":{},"classes/TodoCategory.html":{}}}],["this.querybus.execute",{"_index":755,"title":{},"body":{"controllers/TodoController.html":{}}}],["this.querybus.execute(new",{"_index":282,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["this.todo",{"_index":395,"title":{},"body":{"classes/CategoryTodoPresenter.html":{},"classes/TodoCategory.html":{}}}],["this.todorepo.delete(id",{"_index":813,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.todorepo.find",{"_index":803,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.todorepo.findby",{"_index":797,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.todorepo.findoneby",{"_index":806,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.todorepo.save(todo",{"_index":812,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.todorepo.save(todoentity",{"_index":801,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.todorepository.deletebyid(id",{"_index":419,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["this.todorepository.findall",{"_index":471,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{}}}],["this.todorepository.findbyid(id",{"_index":508,"title":{},"body":{"classes/GetTodoByIdQueryHandler.html":{}}}],["this.todorepository.getallwithtodo",{"_index":487,"title":{},"body":{"classes/GetCategoryWithTodoQueryHandler.html":{}}}],["this.todorepository.insert",{"_index":117,"title":{},"body":{"classes/AddTodoCommandHandler.html":{}}}],["this.todorepository.updatecontent(id",{"_index":880,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["this.toentity(category",{"_index":358,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["this.toentity(todo",{"_index":799,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.tomodel(category",{"_index":356,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["this.tomodel(entity",{"_index":352,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["this.tomodel(q",{"_index":348,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["this.tomodel(todo",{"_index":354,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["this.tomodel(todoentity",{"_index":807,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.updateddate",{"_index":849,"title":{},"body":{"classes/TodoTask.html":{}}}],["this.validate(command",{"_index":68,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["throw",{"_index":447,"title":{},"body":{"injectables/ExceptionsService.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{}}}],["timestamp",{"_index":171,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["tmodel",{"_index":1024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todo",{"_index":104,"title":{"entities/Todo.html":{}},"body":{"classes/AddTodoCommandHandler.html":{},"entities/Category.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryTodoPresenter.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/ITodoRepository.html":{},"modules/RepositoriesModule.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["todo.category",{"_index":226,"title":{},"body":{"entities/Category.html":{},"injectables/TodoRepository.html":{}}}],["todo.content",{"_index":808,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todo.getcategory().getname",{"_index":478,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{}}}],["todo.getcategory()?.getid",{"_index":477,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"injectables/TodoRepository.html":{}}}],["todo.getcategory()?.getname",{"_index":509,"title":{},"body":{"classes/GetTodoByIdQueryHandler.html":{},"injectables/TodoRepository.html":{}}}],["todo.getcontent",{"_index":474,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{}}}],["todo.getcreateddate",{"_index":476,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{}}}],["todo.getid",{"_index":473,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{}}}],["todo.getisdone",{"_index":475,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{}}}],["todo.isdone",{"_index":809,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todo.repository",{"_index":654,"title":{},"body":{"modules/RepositoriesModule.html":{}}}],["todo/command",{"_index":901,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["todo/query",{"_index":903,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["todo?.category",{"_index":782,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["todo?.content",{"_index":776,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["todo?.createddate",{"_index":780,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["todo?.id",{"_index":774,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["todo?.isdone",{"_index":778,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["todo?.map((entity",{"_index":798,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todocategory",{"_index":62,"title":{"classes/TodoCategory.html":{}},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{},"classes/TodoCategory.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"coverage.html":{}}}],["todocategory(category.name",{"_index":118,"title":{},"body":{"classes/AddTodoCommandHandler.html":{}}}],["todocategory(name",{"_index":72,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["todocategory(todoentity.category?.name",{"_index":816,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todocategory(x.category.name",{"_index":368,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["todocommandhandlers",{"_index":900,"title":{},"body":{"modules/UsecaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todocontroller",{"_index":193,"title":{"controllers/TodoController.html":{}},"body":{"modules/ApiModule.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["todoentity",{"_index":372,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["todoentity.category",{"_index":800,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity.category.id",{"_index":824,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity.category.name",{"_index":822,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity.category?.id",{"_index":817,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity.content",{"_index":814,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity.createdate",{"_index":818,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity.id",{"_index":373,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["todoentity.isdone",{"_index":815,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity.name",{"_index":375,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["todoentity.todo",{"_index":377,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["todoentity.updateddate",{"_index":819,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity?.map((entity",{"_index":805,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todomodel",{"_index":332,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["todomodel.getcategory()?.getid",{"_index":825,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todomodel.getcategory()?.getname",{"_index":823,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todomodel.getcontent",{"_index":820,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todomodel.getid",{"_index":374,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["todomodel.getisdone",{"_index":821,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todomodel.getname",{"_index":376,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["todomodel.gettodo",{"_index":378,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["todomodel.gettodo()?.map((x",{"_index":379,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["todopresenter",{"_index":394,"title":{"classes/TodoPresenter.html":{}},"body":{"classes/CategoryTodoPresenter.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"coverage.html":{}}}],["todopresenter(todo",{"_index":397,"title":{},"body":{"classes/CategoryTodoPresenter.html":{},"controllers/TodoController.html":{}}}],["todoqueryhandlers",{"_index":902,"title":{},"body":{"modules/UsecaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todorepo",{"_index":786,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todorepository",{"_index":108,"title":{"injectables/TodoRepository.html":{}},"body":{"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"modules/RepositoriesModule.html":{},"injectables/TodoRepository.html":{},"classes/UpdateTodoCommandHandler.html":{},"coverage.html":{}}}],["todoresponse",{"_index":401,"title":{"classes/TodoResponse.html":{}},"body":{"classes/CategoryTodoResponse.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"classes/TodoResponse.html":{},"coverage.html":{}}}],["todos",{"_index":399,"title":{},"body":{"classes/CategoryTodoResponse.html":{},"classes/GetAllTodoQueryHandler.html":{},"controllers/TodoController.html":{}}}],["todos?.map",{"_index":472,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{}}}],["todos?.map((todo",{"_index":756,"title":{},"body":{"controllers/TodoController.html":{}}}],["todotask",{"_index":113,"title":{"classes/TodoTask.html":{}},"body":{"classes/AddTodoCommandHandler.html":{},"injectables/CategoryRepository.html":{},"interfaces/ITodoRepository.html":{},"classes/TodoCategory.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"coverage.html":{}}}],["toentity",{"_index":314,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["toentity(todomodel",{"_index":330,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["tomodel",{"_index":315,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["tomodel(categoryentity",{"_index":333,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["tomodel(todoentity",{"_index":793,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["trace",{"_index":561,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["transformer",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":87,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"controllers/CategoryController.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoDto.html":{},"miscellaneous/variables.html":{}}}],["true})@isnotempty()@isnumber",{"_index":886,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["true})@isnotempty()@isstring",{"_index":80,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"classes/UpdateTodoDto.html":{}}}],["true})@isobject",{"_index":123,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["true})@joincolumn({name",{"_index":686,"title":{},"body":{"entities/Todo.html":{}}}],["type",{"_index":23,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/CategoryTodoPresenter.html":{},"classes/CategoryTodoResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetCategoryWithTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":232,"title":{},"body":{"entities/Category.html":{},"entities/Todo.html":{},"dependencies.html":{}}}],["typeorm/repository/repository",{"_index":338,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["typeormconfigmodule",{"_index":206,"title":{"modules/TypeormConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TypeormConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["typeormmodule",{"_index":652,"title":{},"body":{"modules/RepositoriesModule.html":{},"modules/TypeormConfigModule.html":{}}}],["typeormmodule.forfeature([todo",{"_index":655,"title":{},"body":{"modules/RepositoriesModule.html":{}}}],["typeormmodule.forroot(typeormmoduleoptions",{"_index":864,"title":{},"body":{"modules/TypeormConfigModule.html":{}}}],["typeormmoduleoptions",{"_index":853,"title":{},"body":{"modules/TypeormConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ui",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":435,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["unauthorizedexception(data",{"_index":444,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["undefined",{"_index":243,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["unit",{"_index":996,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":245,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["unlicensed",{"_index":1014,"title":{},"body":{"properties.html":{}}}],["updatecommand",{"_index":878,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["updatecontent",{"_index":574,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["updatecontent(id",{"_index":585,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["updatedatecolumn",{"_index":705,"title":{},"body":{"entities/Todo.html":{}}}],["updatedatecolumn({name",{"_index":701,"title":{},"body":{"entities/Todo.html":{}}}],["updateddate",{"_index":682,"title":{},"body":{"entities/Todo.html":{},"classes/TodoPresenter.html":{},"classes/TodoTask.html":{}}}],["updatetodo",{"_index":722,"title":{},"body":{"controllers/TodoController.html":{}}}],["updatetodo(@body",{"_index":757,"title":{},"body":{"controllers/TodoController.html":{}}}],["updatetodo(updatetododto",{"_index":733,"title":{},"body":{"controllers/TodoController.html":{}}}],["updatetodocommand",{"_index":744,"title":{"classes/UpdateTodoCommand.html":{}},"body":{"controllers/TodoController.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"coverage.html":{}}}],["updatetodocommand(id",{"_index":759,"title":{},"body":{"controllers/TodoController.html":{}}}],["updatetodocommandhandler",{"_index":871,"title":{"classes/UpdateTodoCommandHandler.html":{}},"body":{"classes/UpdateTodoCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updatetododto",{"_index":734,"title":{"classes/UpdateTodoDto.html":{}},"body":{"controllers/TodoController.html":{},"classes/UpdateTodoDto.html":{},"coverage.html":{}}}],["url",{"_index":856,"title":{},"body":{"modules/TypeormConfigModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["usecase",{"_index":981,"title":{},"body":{"index.html":{}}}],["usecase/usecase.module",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["usecasemodule",{"_index":207,"title":{"modules/UsecaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsecaseModule.html":{},"modules.html":{},"overview.html":{}}}],["useclass",{"_index":429,"title":{},"body":{"modules/ExceptionsModule.html":{},"modules/RepositoriesModule.html":{}}}],["user",{"_index":540,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["validate",{"_index":40,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["validate(command",{"_index":51,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{}}}],["validate(deletetodocommand",{"_index":416,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["validate(updatecommand",{"_index":875,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["validator",{"_index":86,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"classes/UpdateTodoDto.html":{},"dependencies.html":{}}}],["value",{"_index":1023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1016,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbose",{"_index":555,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["verbose(context",{"_index":565,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["version",{"_index":1011,"title":{},"body":{"properties.html":{}}}],["void",{"_index":53,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"interfaces/IException.html":{},"interfaces/ILogger.html":{},"injectables/LoggerService.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["warn",{"_index":556,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["warn(context",{"_index":567,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["x",{"_index":365,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["x.content",{"_index":366,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["x.createdate",{"_index":370,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["x.getcontent",{"_index":382,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["x.getid",{"_index":386,"title":{},"body":{"injectables/CategoryRepository.html":{},"classes/GetAllCategoryQueryHandler.html":{}}}],["x.getisdone",{"_index":384,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["x.id",{"_index":369,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["x.isdone",{"_index":367,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["x.updateddate",{"_index":371,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["yarn",{"_index":989,"title":{},"body":{"index.html":{}}}],["yarnrunning",{"_index":983,"title":{},"body":{"index.html":{}}}],["yes",{"_index":403,"title":{},"body":{"classes/CategoryTodoResponse.html":{},"injectables/ExceptionsService.html":{},"interfaces/IException.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"classes/TodoCategory.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{}}}],["zoom",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UsecaseModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddCategoryCommand.html":{"url":"classes/AddCategoryCommand.html","title":"class - AddCategoryCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddCategoryCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/category/command/addCategory/addCategoryCommand.ts\n        \n\n\n            \n                Description\n            \n            \n                Command to add new category\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/category/command/addCategory/addCategoryCommand.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/category/command/addCategory/addCategoryCommand.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AddCategoryCommand {\n  constructor(public name: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddCategoryCommandHandler.html":{"url":"classes/AddCategoryCommandHandler.html","title":"class - AddCategoryCommandHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddCategoryCommandHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/category/command/addCategory/addCategoryCommandHandler.ts\n        \n\n\n            \n                Description\n            \n            \n                handles creating new category\n\n            \n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                            \n                                    Private\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: ICategoryRepsoitory, exception: IException)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/category/command/addCategory/addCategoryCommandHandler.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        ICategoryRepsoitory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exception\n                                                  \n                                                        \n                                                                        IException\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: AddCategoryCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/category/command/addCategory/addCategoryCommandHandler.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                AddCategoryCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(command: AddCategoryCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/category/command/addCategory/addCategoryCommandHandler.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                AddCategoryCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport {\n  IException,\n  IEXCEPTION,\n} from 'src/domain/interface/exception/IException';\nimport {\n  ICATEGORY_REPOSITORY,\n  ICategoryRepsoitory,\n} from 'src/domain/interface/repository/ICategoryRepository';\nimport { TodoCategory } from 'src/domain/model/TodoCategory';\nimport { AddCategoryCommand } from './addCategoryCommand';\n\n/**\n * handles creating new category\n */\n@CommandHandler(AddCategoryCommand)\nexport class AddCategoryCommandHandler\n  implements ICommandHandler\n{\n  constructor(\n    @Inject(ICATEGORY_REPOSITORY)\n    private readonly categoryRepository: ICategoryRepsoitory,\n    @Inject(IEXCEPTION) private readonly exception: IException,\n  ) {}\n\n  async execute(command: AddCategoryCommand): Promise {\n    this.validate(command);\n    const { name } = command;\n    await this.categoryRepository.insert(new TodoCategory(name));\n  }\n  private validate(command: AddCategoryCommand) {\n    const { name } = command;\n    if (!name || name === '')\n      this.exception.badRequestException({\n        message: 'Category name is required',\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddCategoryDto.html":{"url":"classes/AddCategoryDto.html","title":"class - AddCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/dto/addCategoryDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/addCategoryDto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class AddCategoryDto {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  readonly name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddTodoCommand.html":{"url":"classes/AddTodoCommand.html","title":"class - AddTodoCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddTodoCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/command/addTodo/addTodoCommand.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                isDone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(content: string, isDone: boolean, category: Category)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/command/addTodo/addTodoCommand.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        content\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isDone\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        Category\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/addTodo/addTodoCommand.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/addTodo/addTodoCommand.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/addTodo/addTodoCommand.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AddTodoCommand {\n  constructor(\n    public content: string,\n    public isDone: boolean,\n    public category: Category,\n  ) {}\n}\nexport interface Category {\n  id: number;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddTodoCommandHandler.html":{"url":"classes/AddTodoCommandHandler.html","title":"class - AddTodoCommandHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddTodoCommandHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/command/addTodo/addTodoCommandHandler.ts\n        \n\n\n            \n                Description\n            \n            \n                Handles creation of new todo\n\n            \n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                            \n                                    Private\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todoRepository: ITodoRepository, exception: IException)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/command/addTodo/addTodoCommandHandler.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todoRepository\n                                                  \n                                                        \n                                                                        ITodoRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exception\n                                                  \n                                                        \n                                                                        IException\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: AddTodoCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/command/addTodo/addTodoCommandHandler.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                AddTodoCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(command: AddTodoCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/command/addTodo/addTodoCommandHandler.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                AddTodoCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport {\n  IException,\n  IEXCEPTION,\n} from 'src/domain/interface/exception/IException';\nimport {\n  ITodoRepository,\n  ITODO_REPOSITORY,\n} from 'src/domain/interface/repository/ITodoRepository';\nimport { TodoCategory } from 'src/domain/model/TodoCategory';\nimport { TodoTask } from 'src/domain/model/TodoTask';\nimport { AddTodoCommand } from './addTodoCommand';\n/**\n * Handles creation of new todo\n */\n@CommandHandler(AddTodoCommand)\nexport class AddTodoCommandHandler implements ICommandHandler {\n  constructor(\n    @Inject(ITODO_REPOSITORY) private readonly todoRepository: ITodoRepository,\n    @Inject(IEXCEPTION) private readonly exception: IException,\n  ) {}\n\n  async execute(command: AddTodoCommand): Promise {\n    this.validate(command);\n    const { content, isDone, category } = command;\n    await this.todoRepository.insert(\n      new TodoTask(\n        content,\n        isDone,\n        new TodoCategory(category.name, category.id),\n      ),\n    );\n  }\n\n  private validate(command: AddTodoCommand): void {\n    const { content, category } = command;\n    if (!content)\n      this.exception.badRequestException({\n        message: 'The content is required',\n      });\n    if (!category && !category.id)\n      this.exception.badRequestException({\n        message: 'The Todo category is required',\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddTodoDto.html":{"url":"classes/AddTodoDto.html","title":"class - AddTodoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/dto/addTodoDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                category\n                            \n                            \n                                    Readonly\n                                content\n                            \n                            \n                                    Optional\n                                isDone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/addTodoDto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/addTodoDto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({default: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/addTodoDto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsNotEmpty, IsObject, IsString } from 'class-validator';\nimport { CategoryDto } from './categprydto';\n\nexport class AddTodoDto {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  readonly content: string;\n\n  @ApiProperty({ default: false })\n  @IsBoolean()\n  isDone?: boolean;\n\n  @ApiProperty({ required: true })\n  @IsObject()\n  readonly category: CategoryDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionFilter.html":{"url":"classes/AllExceptionFilter.html","title":"class - AllExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/filter/AllExceptionFilter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                logMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/filter/AllExceptionFilter.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/filter/AllExceptionFilter.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        logMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    logMessage(request: any, message: IError, status: number, exception: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/filter/AllExceptionFilter.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                IError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { IError } from 'src/domain/interface/exception/IError';\nimport { LoggerService } from '../logger/logger.service';\n\n@Catch()\nexport class AllExceptionFilter implements ExceptionFilter {\n  constructor(private readonly logger: LoggerService) {}\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request: any = ctx.getRequest();\n\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n    const message =\n      exception instanceof HttpException\n        ? (exception.getResponse() as IError)\n        : { message: (exception as Error).message, code_error: null };\n\n    const responseData = {\n      ...{\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        path: request.url,\n      },\n      ...message,\n    };\n\n    this.logMessage(request, message, status, exception);\n\n    response.status(status).json(responseData);\n  }\n\n  private logMessage(\n    request: any,\n    message: IError,\n    status: number,\n    exception: any,\n  ) {\n    if (status === 500) {\n      this.logger.error(\n        `End Request for ${request.path}`,\n        `method=${request.method} status=${status} code_error=${\n          message.code_error ? message.code_error : null\n        } message=${message.message ? message.message : null}`,\n        status >= 500 ? exception.stack : '',\n      );\n    } else {\n      this.logger.warn(\n        `End Request for ${request.path}`,\n        `method=${request.method} status=${status} code_error=${\n          message.code_error ? message.code_error : null\n        } message=${message.message ? message.message : null}`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/api.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            TodoController\n                        \n                        \n                            CategoryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { TodoController } from './controller/todo/todo.controller';\nimport { CategoryController } from './controller/category/category.controller';\n\n@Module({\n  controllers: [TodoController, CategoryController],\n  imports: [CqrsModule],\n})\nexport class ApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nExceptionsModule\n\nExceptionsModule\n\nAppModule -->\n\nExceptionsModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nRepositoriesModule\n\nRepositoriesModule\n\nAppModule -->\n\nRepositoriesModule->AppModule\n\n\n\n\n\nTypeormConfigModule\n\nTypeormConfigModule\n\nAppModule -->\n\nTypeormConfigModule->AppModule\n\n\n\n\n\nUsecaseModule\n\nUsecaseModule\n\nAppModule -->\n\nUsecaseModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ApiModule\n                        \n                        \n                            ExceptionsModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            RepositoriesModule\n                        \n                        \n                            TypeormConfigModule\n                        \n                        \n                            UsecaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LoggerModule } from './infrastructure/logger/logger.module';\nimport { ExceptionsModule } from './infrastructure/exceptions/exceptions.module';\nimport { RepositoriesModule } from './infrastructure/repositories/repositories.module';\nimport { ApiModule } from './api/api.module';\nimport { UsecaseModule } from './usecase/usecase.module';\nimport { TypeormConfigModule } from './infrastructure/config/typeorm/typeorm.module';\n\n@Module({\n  imports: [\n    LoggerModule,\n    ExceptionsModule,\n    ApiModule,\n    UsecaseModule,\n    TypeormConfigModule,\n    RepositoriesModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/enity/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                todo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/category.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/category.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        todo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Todo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, todo => todo.category, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/category.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Todo } from 'src/infrastructure/enity/todo.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n@Entity()\nexport class Category {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @OneToMany(() => Todo, (todo) => todo.category, { onDelete: 'CASCADE' })\n  todo: Todo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Category-1.html":{"url":"interfaces/Category-1.html","title":"interface - Category-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/command/addTodo/addTodoCommand.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export class AddTodoCommand {\n  constructor(\n    public content: string,\n    public isDone: boolean,\n    public category: Category,\n  ) {}\n}\nexport interface Category {\n  id: number;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/controller/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCategory\n                            \n                            \n                                    Async\n                                getCategories\n                            \n                            \n                                    Async\n                                getCategoryTodo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCategory(addcategory: AddCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiResponseType(MessagePresenter, undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/controller/category/category.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    addcategory\n                                    \n                                                AddCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCategories\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategories()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponseType(CategoryPresenter, undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/controller/category/category.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCategoryTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategoryTodo()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('todo')@ApiResponseType(CategoryTodoPresenter, undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/controller/category/category.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { CategoryTodoPresenter } from './../../presenter/categoryTodoPresenter';\nimport { Body, Controller, Get, Post } from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { CategoryPresenter } from 'src/api/presenter/categoryPresenter';\nimport { GetAllCategoryQuery } from 'src/usecase/category/query/getAllCategory/getAllCategoryQuery';\nimport { AddCategoryDto } from 'src/api/dto/addCategoryDto';\nimport { AddCategoryCommand } from 'src/usecase/category/command/addCategory/addCategoryCommand';\nimport { CategoryResponse } from 'src/usecase/category/query/getAllCategory/categoryResponse';\nimport { ApiExtraModels, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { MessagePresenter } from 'src/api/presenter/messagePresenter';\nimport { ApiResponseType } from 'src/api/common/apiResponseDecorator';\nimport { GetCategoryWithTodoQuery } from 'src/usecase/category/query/getCategoryWithTodo/getCategoryWithTodoQuery';\nimport { CategoryTodoResponse } from 'src/usecase/category/query/getCategoryWithTodo/CategoryTodoResponse';\n\n@Controller('category')\n@ApiTags('category')\n@ApiResponse({ status: 500, description: 'Internal error' })\n@ApiExtraModels(CategoryPresenter, MessagePresenter, CategoryTodoPresenter)\nexport class CategoryController {\n  constructor(\n    private readonly commandBus: CommandBus,\n    private readonly queryBus: QueryBus,\n  ) {}\n\n  @Get()\n  @ApiResponseType(CategoryPresenter, true)\n  async getCategories() {\n    const categories = await this.queryBus.execute(new GetAllCategoryQuery());\n    return categories?.map((category) => new CategoryPresenter(category));\n  }\n  @Get('todo')\n  @ApiResponseType(CategoryTodoPresenter, true)\n  async getCategoryTodo() {\n    const categories = await this.queryBus.execute(new GetCategoryWithTodoQuery());\n    return categories?.map((category) => new CategoryTodoPresenter(category));\n  }\n\n  @Post()\n  @ApiResponseType(MessagePresenter, false)\n  async addCategory(@Body() addcategory: AddCategoryDto) {\n    const { name } = addcategory;\n    await this.commandBus.execute(new AddCategoryCommand(name));\n    return { message: 'success' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryDto.html":{"url":"classes/CategoryDto.html","title":"class - CategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/dto/categprydto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/categprydto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/categprydto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CategoryDto {\n  @ApiProperty()\n  id: number;\n  @ApiProperty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryPresenter.html":{"url":"classes/CategoryPresenter.html","title":"class - CategoryPresenter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryPresenter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/presenter/categoryPresenter.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                todo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(category: CategoryResponse)\n                    \n                \n                        \n                            \n                                Defined in src/api/presenter/categoryPresenter.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        CategoryResponse\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/categoryPresenter.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/categoryPresenter.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        todo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TodoCategory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/categoryPresenter.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { TodoCategory } from 'src/domain/model/TodoCategory';\nimport { CategoryResponse } from 'src/usecase/category/query/getAllCategory/categoryResponse';\n\nexport class CategoryPresenter {\n  @ApiProperty()\n  id: number;\n  @ApiProperty()\n  name: string;\n  @ApiProperty()\n  todo: TodoCategory[];\n  constructor(category: CategoryResponse) {\n    this.id = category.id;\n    this.name = category.name;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryRepository.html":{"url":"injectables/CategoryRepository.html","title":"injectable - CategoryRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/repositories/category.repossitory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getAllWithTodo\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByName\n                            \n                            \n                                    Async\n                                insert\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Private\n                                toEntity\n                            \n                            \n                                    Private\n                                toModel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/repositories/category.repossitory.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/category.repossitory.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllWithTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllWithTodo()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/category.repossitory.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/category.repossitory.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/category.repossitory.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(category: TodoCategory)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/category.repossitory.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                TodoCategory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/category.repossitory.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toEntity\n                        \n                    \n                \n            \n            \n                \n                    \n                    toEntity(todoModel: TodoCategory)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/category.repossitory.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    todoModel\n                                    \n                                                TodoCategory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Category\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toModel\n                        \n                    \n                \n            \n            \n                \n                    \n                    toModel(categoryEntity: Category)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/category.repossitory.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryEntity\n                                    \n                                                Category\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TodoCategory\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TodoTask } from 'src/domain/model/TodoTask';\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ICategoryRepsoitory } from 'src/domain/interface/repository/ICategoryRepository';\nimport { TodoCategory } from 'src/domain/model/TodoCategory';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { Category } from '../enity/category.entity';\nimport { Todo } from '../enity/todo.entity';\n\n@Injectable()\nexport class CategoryRepository implements ICategoryRepsoitory {\n  constructor(\n    @InjectRepository(Category)\n    private readonly categoryRepo: Repository,\n  ) {}\n  async getAllWithTodo(): Promise {\n    const query = await this.categoryRepo\n      .createQueryBuilder('category')\n      .leftJoinAndSelect('category.todo', 'todo')\n      .getMany();\n    return query.map((q) => this.toModel(q));\n  }\n  async getAll(): Promise {\n    const category = await this.categoryRepo.find({\n      select: ['id', 'name'],\n    });\n\n    return category?.map((entity) => this.toModel(entity));\n  }\n  async getById(id: number): Promise {\n    const todo = await this.categoryRepo.findOneByOrFail({ id });\n    return this.toModel(todo);\n  }\n  async getByName(name: string): Promise {\n    const category = await this.categoryRepo.findOneBy({ name });\n    return this.toModel(category);\n  }\n  async insert(category: TodoCategory): Promise {\n    const catEntity = this.toEntity(category);\n    await this.categoryRepo.insert(catEntity);\n  }\n  async remove(id: number): Promise {\n    await this.categoryRepo.delete(id);\n  }\n  private toModel(categoryEntity: Category): TodoCategory {\n    if (categoryEntity) {\n      const category: TodoCategory = new TodoCategory(\n        categoryEntity.name,\n        categoryEntity.id,\n        categoryEntity.todo\n          ? categoryEntity.todo.map(\n              (x) =>\n                new TodoTask(\n                  x.content,\n                  x.isDone,\n                  // new TodoCategory(x.category.name, x.id),\n                  null,\n                  x.id,\n                  x.createdate,\n                  x.updateddate,\n                ),\n            )\n          : null,\n      );\n      return category;\n    }\n    return null;\n  }\n  private toEntity(todoModel: TodoCategory): Category {\n    const todoEntity: Category = new Category();\n\n    if (todoModel) {\n      todoEntity.id = todoModel.getId();\n      todoEntity.name = todoModel.getName();\n      todoEntity.todo = todoModel.getTodo()\n        ? todoModel.getTodo()?.map((x) => {\n            const t = new Todo();\n            (t.content = x.getContent()), (t.isDone = x.getIsDone());\n            t.id = x.getId();\n            return t;\n          })\n        : null;\n    }\n\n    return todoEntity;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryResponse.html":{"url":"classes/CategoryResponse.html","title":"class - CategoryResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/category/query/getAllCategory/categoryResponse.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, id: number)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/category/query/getAllCategory/categoryResponse.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/category/query/getAllCategory/categoryResponse.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/category/query/getAllCategory/categoryResponse.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CategoryResponse {\n  constructor(public readonly name: string, public readonly id: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryTodoPresenter.html":{"url":"classes/CategoryTodoPresenter.html","title":"class - CategoryTodoPresenter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryTodoPresenter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/presenter/categoryTodoPresenter.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                todo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(category: CategoryTodoResponse)\n                    \n                \n                        \n                            \n                                Defined in src/api/presenter/categoryTodoPresenter.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        CategoryTodoResponse\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/categoryTodoPresenter.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/categoryTodoPresenter.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        todo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TodoPresenter[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/categoryTodoPresenter.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { CategoryTodoResponse } from 'src/usecase/category/query/getCategoryWithTodo/CategoryTodoResponse';\nimport { TodoPresenter } from './todoPresenter';\n\nexport class CategoryTodoPresenter {\n  @ApiProperty()\n  id: number;\n  @ApiProperty()\n  name: string;\n  @ApiProperty()\n  todo: TodoPresenter[];\n  constructor(category: CategoryTodoResponse) {\n    this.id = category.id;\n    this.name = category.name;\n    this.todo = category.todos?.map((todo) => new TodoPresenter(todo));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryTodoResponse.html":{"url":"classes/CategoryTodoResponse.html","title":"class - CategoryTodoResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryTodoResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/category/query/getCategoryWithTodo/CategoryTodoResponse.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                todos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number, name: string, todos?: TodoResponse[])\n                    \n                \n                        \n                            \n                                Defined in src/usecase/category/query/getCategoryWithTodo/CategoryTodoResponse.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        todos\n                                                  \n                                                        \n                                                                        TodoResponse[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/category/query/getCategoryWithTodo/CategoryTodoResponse.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/category/query/getCategoryWithTodo/CategoryTodoResponse.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        todos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TodoResponse[]\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/category/query/getCategoryWithTodo/CategoryTodoResponse.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TodoResponse } from 'src/usecase/todo/query/getTodoResponse';\n\nexport class CategoryTodoResponse {\n  constructor(\n    public readonly id: number,\n    public readonly name: string,\n    public readonly todos?: TodoResponse[],\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteTodoCommand.html":{"url":"classes/DeleteTodoCommand.html","title":"class - DeleteTodoCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteTodoCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/command/deleteTodo/deleteTodoCommand.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/command/deleteTodo/deleteTodoCommand.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/deleteTodo/deleteTodoCommand.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DeleteTodoCommand {\n  constructor(public id: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteTodoCommandHandler.html":{"url":"classes/DeleteTodoCommandHandler.html","title":"class - DeleteTodoCommandHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteTodoCommandHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/command/deleteTodo/deleteTodoCommandHandler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                            \n                                    Private\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todoRepository: ITodoRepository, exception: IException)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/command/deleteTodo/deleteTodoCommandHandler.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todoRepository\n                                                  \n                                                        \n                                                                        ITodoRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exception\n                                                  \n                                                        \n                                                                        IException\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: DeleteTodoCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/command/deleteTodo/deleteTodoCommandHandler.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                DeleteTodoCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(deleteTodoCommand: DeleteTodoCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/command/deleteTodo/deleteTodoCommandHandler.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    deleteTodoCommand\n                                    \n                                                DeleteTodoCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport {\n  IException,\n  IEXCEPTION,\n} from 'src/domain/interface/exception/IException';\nimport {\n  ITodoRepository,\n  ITODO_REPOSITORY,\n} from 'src/domain/interface/repository/ITodoRepository';\nimport { DeleteTodoCommand } from './deleteTodoCommand';\n\n@CommandHandler(DeleteTodoCommand)\nexport class DeleteTodoCommandHandler\n  implements ICommandHandler\n{\n  constructor(\n    @Inject(ITODO_REPOSITORY) private readonly todoRepository: ITodoRepository,\n    @Inject(IEXCEPTION) private readonly exception: IException,\n  ) {}\n  async execute(command: DeleteTodoCommand): Promise {\n    this.validate(command);\n    const { id } = command;\n    await this.todoRepository.deleteById(id);\n  }\n  private validate(deleteTodoCommand: DeleteTodoCommand) {\n    const { id } = deleteTodoCommand;\n    if (!id || id == 0)\n      this.exception.badRequestException({\n        message: 'The item id to be deleted must be set',\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExceptionsModule.html":{"url":"modules/ExceptionsModule.html","title":"module - ExceptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    ExceptionsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/exceptions/exceptions.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { IEXCEPTION } from 'src/domain/interface/exception/IException';\nimport { ExceptionsService } from './exceptions.service';\n\n@Module({\n  providers: [\n    {\n      provide: IEXCEPTION,\n      useClass: ExceptionsService,\n    },\n  ],\n  exports: [IEXCEPTION],\n})\nexport class ExceptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionsService.html":{"url":"injectables/ExceptionsService.html","title":"injectable - ExceptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/exceptions/exceptions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                badRequestException\n                            \n                            \n                                forbiddenException\n                            \n                            \n                                internalServerErrorException\n                            \n                            \n                                UnauthorizedException\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        badRequestException\n                        \n                    \n                \n            \n            \n                \nbadRequestException(data: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/exceptions/exceptions.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forbiddenException\n                        \n                    \n                \n            \n            \n                \nforbiddenException(data?: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/exceptions/exceptions.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        internalServerErrorException\n                        \n                    \n                \n            \n            \n                \ninternalServerErrorException(data?: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/exceptions/exceptions.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UnauthorizedException\n                        \n                    \n                \n            \n            \n                \nUnauthorizedException(data?: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/exceptions/exceptions.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable,\n  InternalServerErrorException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { IException } from 'src/domain/interface/exception/IException';\nimport { IFormatExceptionMessage } from 'src/domain/interface/exception/IFormatExceptionMessage';\n\n@Injectable()\nexport class ExceptionsService implements IException {\n  badRequestException(data: IFormatExceptionMessage): void {\n    throw new BadRequestException(data);\n  }\n  internalServerErrorException(data?: IFormatExceptionMessage): void {\n    throw new InternalServerErrorException(data);\n  }\n  forbiddenException(data?: IFormatExceptionMessage): void {\n    throw new ForbiddenException(data);\n  }\n  UnauthorizedException(data?: IFormatExceptionMessage): void {\n    throw new UnauthorizedException(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllCategoryQuery.html":{"url":"classes/GetAllCategoryQuery.html","title":"class - GetAllCategoryQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllCategoryQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/category/query/getAllCategory/getAllCategoryQuery.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetAllCategoryQuery {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllCategoryQueryHandler.html":{"url":"classes/GetAllCategoryQueryHandler.html","title":"class - GetAllCategoryQueryHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllCategoryQueryHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/category/query/getAllCategory/getAllCategoryQueryHandler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepoitory: ICategoryRepsoitory)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/category/query/getAllCategory/getAllCategoryQueryHandler.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepoitory\n                                                  \n                                                        \n                                                                        ICategoryRepsoitory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(_: GetAllCategoryQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/category/query/getAllCategory/getAllCategoryQueryHandler.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                GetAllCategoryQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport {\n  ICATEGORY_REPOSITORY,\n  ICategoryRepsoitory,\n} from 'src/domain/interface/repository/ICategoryRepository';\nimport { CategoryResponse } from './categoryResponse';\nimport { GetAllCategoryQuery } from './getAllCategoryQuery';\n\n@QueryHandler(GetAllCategoryQuery)\nexport class GetAllCategoryQueryHandler\n  implements IQueryHandler\n{\n  constructor(\n    @Inject(ICATEGORY_REPOSITORY)\n    private readonly categoryRepoitory: ICategoryRepsoitory,\n  ) {}\n  async execute(_: GetAllCategoryQuery): Promise {\n    const categories = await this.categoryRepoitory.getAll();\n    return categories?.map((x) => new CategoryResponse(x.getName(), x.getId()));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllTodoQuery.html":{"url":"classes/GetAllTodoQuery.html","title":"class - GetAllTodoQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllTodoQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/query/getAllTodo/getAllTodoQuery.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetAllTodoQuery {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllTodoQueryHandler.html":{"url":"classes/GetAllTodoQueryHandler.html","title":"class - GetAllTodoQueryHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllTodoQueryHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/query/getAllTodo/getAllTodoQueryHandler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todoRepository: ITodoRepository)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/query/getAllTodo/getAllTodoQueryHandler.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todoRepository\n                                                  \n                                                        \n                                                                        ITodoRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(_: GetAllTodoQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/query/getAllTodo/getAllTodoQueryHandler.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                GetAllTodoQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport {\n  ITodoRepository,\n  ITODO_REPOSITORY,\n} from 'src/domain/interface/repository/ITodoRepository';\nimport { TodoResponse } from '../getTodoResponse';\nimport { GetAllTodoQuery } from './getAllTodoQuery';\n\n@QueryHandler(GetAllTodoQuery)\nexport class GetAllTodoQueryHandler\n  implements IQueryHandler\n{\n  constructor(\n    @Inject(ITODO_REPOSITORY) private readonly todoRepository: ITodoRepository,\n  ) {}\n  async execute(_: GetAllTodoQuery): Promise {\n    const todos = await this.todoRepository.findAll();\n    return todos?.map(\n      (todo) =>\n        new TodoResponse(\n          todo.getId(),\n          todo.getContent(),\n          todo.getIsDone(),\n          todo.getCreatedDate(),\n          {\n            id: todo.getCategory()?.getId(),\n            name: todo.getCategory().getName(),\n          },\n        ),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCategoryWithTodoQuery.html":{"url":"classes/GetCategoryWithTodoQuery.html","title":"class - GetCategoryWithTodoQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCategoryWithTodoQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/category/query/getCategoryWithTodo/getCategoryWithTodoQuery.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetCategoryWithTodoQuery {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCategoryWithTodoQueryHandler.html":{"url":"classes/GetCategoryWithTodoQueryHandler.html","title":"class - GetCategoryWithTodoQueryHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCategoryWithTodoQueryHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/category/query/getCategoryWithTodo/getCategoryWithTodoQueryHandler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todoRepository: ICategoryRepsoitory)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/category/query/getCategoryWithTodo/getCategoryWithTodoQueryHandler.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todoRepository\n                                                  \n                                                        \n                                                                        ICategoryRepsoitory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(_query: GetCategoryWithTodoQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/category/query/getCategoryWithTodo/getCategoryWithTodoQueryHandler.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _query\n                                    \n                                                GetCategoryWithTodoQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { TodoResponse } from 'src/usecase/todo/query/getTodoResponse';\nimport {\n  ICATEGORY_REPOSITORY,\n  ICategoryRepsoitory,\n} from 'src/domain/interface/repository/ICategoryRepository';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { CategoryTodoResponse } from './CategoryTodoResponse';\nimport { GetCategoryWithTodoQuery } from './getCategoryWithTodoQuery';\nimport { Inject } from '@nestjs/common';\n\n@QueryHandler(GetCategoryWithTodoQuery)\nexport class GetCategoryWithTodoQueryHandler\n  implements IQueryHandler\n{\n  constructor(\n    @Inject(ICATEGORY_REPOSITORY)\n    private readonly todoRepository: ICategoryRepsoitory,\n  ) {}\n  async execute(\n    _query: GetCategoryWithTodoQuery,\n  ): Promise {\n    const category = await this.todoRepository.getAllWithTodo();\n    const response = category?.map(\n      (_q) =>\n        new CategoryTodoResponse(\n          _q.getId(),\n          _q.getName(),\n          _q\n            .getTodo()\n            ?.map(\n              (t) =>\n                new TodoResponse(\n                  t.getId(),\n                  t.getContent(),\n                  t.getIsDone(),\n                  t.getCreatedDate(),\n                ),\n            ),\n        ),\n    );\n    return response;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTodoByIdQuery.html":{"url":"classes/GetTodoByIdQuery.html","title":"class - GetTodoByIdQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTodoByIdQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/query/getAllTodoById/getTodoByIdQuery.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/query/getAllTodoById/getTodoByIdQuery.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/query/getAllTodoById/getTodoByIdQuery.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetTodoByIdQuery {\n  constructor(public id: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTodoByIdQueryHandler.html":{"url":"classes/GetTodoByIdQueryHandler.html","title":"class - GetTodoByIdQueryHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTodoByIdQueryHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/query/getAllTodoById/getTodoByIdQueryHandler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todoRepository: ITodoRepository)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/query/getAllTodoById/getTodoByIdQueryHandler.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todoRepository\n                                                  \n                                                        \n                                                                        ITodoRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(query: GetTodoByIdQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/query/getAllTodoById/getTodoByIdQueryHandler.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                GetTodoByIdQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport {\n  ITodoRepository,\n  ITODO_REPOSITORY,\n} from 'src/domain/interface/repository/ITodoRepository';\nimport { TodoResponse } from '../getTodoResponse';\nimport { GetTodoByIdQuery } from './getTodoByIdQuery';\n\n@QueryHandler(GetTodoByIdQuery)\nexport class GetTodoByIdQueryHandler\n  implements IQueryHandler\n{\n  constructor(\n    @Inject(ITODO_REPOSITORY) private readonly todoRepository: ITodoRepository,\n  ) {}\n  async execute(query: GetTodoByIdQuery): Promise {\n    const { id } = query;\n\n    const todo = await this.todoRepository.findById(id);\n    if (todo)\n      return new TodoResponse(\n        todo.getId(),\n        todo.getContent(),\n        todo.getIsDone(),\n        todo.getCreatedDate(),\n        {\n          id: todo.getCategory()?.getId(),\n          name: todo.getCategory()?.getName(),\n        },\n      );\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICategoryRepsoitory.html":{"url":"interfaces/ICategoryRepsoitory.html","title":"interface - ICategoryRepsoitory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICategoryRepsoitory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/interface/repository/ICategoryRepository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getAll\n                                    \n                                \n                                \n                                    \n                                        getAllWithTodo\n                                    \n                                \n                                \n                                    \n                                        getById\n                                    \n                                \n                                \n                                    \n                                        getByName\n                                    \n                                \n                                \n                                    \n                                        insert\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ICategoryRepository.ts:31\n                \n            \n\n\n            \n                \n                    Get all category\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllWithTodo\n                        \n                    \n                \n            \n            \n                \ngetAllWithTodo()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ICategoryRepository.ts:36\n                \n            \n\n\n            \n                \n                    Get all category with todo\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ICategoryRepository.ts:26\n                \n            \n\n\n            \n                \n                    Get category by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByName\n                        \n                    \n                \n            \n            \n                \ngetByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ICategoryRepository.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert(category: TodoCategory)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ICategoryRepository.ts:15\n                \n            \n\n\n            \n                \n                    create new category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                TodoCategory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : TodoCategory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ICategoryRepository.ts:21\n                \n            \n\n\n            \n                \n                    Delete category by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TodoCategory } from 'src/domain/model/TodoCategory';\nexport const ICATEGORY_REPOSITORY = 'ICategoryRepsoitory';\nexport interface ICategoryRepsoitory {\n  /**\n   *\n   * @param name : string\n   * @returns Promise\n   */\n  getByName(name: string): Promise;\n  /**\n   * create new category\n   * @param category : TodoCategory\n   * @returns Promise\n   */\n  insert(category: TodoCategory): Promise;\n  /**\n   * Delete category by id\n   * @param id : number\n   * @returns Promise\n   */\n  remove(id: number): Promise;\n  /**\n   * Get category by id\n   * @param id : number\n   */\n  getById(id: number): Promise;\n  /**\n   * Get all category\n   * @returns Promise\n   */\n  getAll(): Promise;\n  /**\n   * Get all category with todo\n   * @returns Promise\n   */\n  getAllWithTodo(): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDatabaseConfig.html":{"url":"interfaces/IDatabaseConfig.html","title":"interface - IDatabaseConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDatabaseConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/interface/config/IDatabaseConfig.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getDatabaseHost\n                                    \n                                \n                                \n                                    \n                                        getDatabaseName\n                                    \n                                \n                                \n                                    \n                                        getDatabasePassword\n                                    \n                                \n                                \n                                    \n                                        getDatabasePort\n                                    \n                                \n                                \n                                    \n                                        getDatabaseSchema\n                                    \n                                \n                                \n                                    \n                                        getDatabaseSync\n                                    \n                                \n                                \n                                    \n                                        getDatabaseUser\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDatabaseHost\n                        \n                    \n                \n            \n            \n                \ngetDatabaseHost()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/config/IDatabaseConfig.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDatabaseName\n                        \n                    \n                \n            \n            \n                \ngetDatabaseName()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/config/IDatabaseConfig.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDatabasePassword\n                        \n                    \n                \n            \n            \n                \ngetDatabasePassword()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/config/IDatabaseConfig.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDatabasePort\n                        \n                    \n                \n            \n            \n                \ngetDatabasePort()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/config/IDatabaseConfig.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDatabaseSchema\n                        \n                    \n                \n            \n            \n                \ngetDatabaseSchema()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/config/IDatabaseConfig.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDatabaseSync\n                        \n                    \n                \n            \n            \n                \ngetDatabaseSync()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/config/IDatabaseConfig.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDatabaseUser\n                        \n                    \n                \n            \n            \n                \ngetDatabaseUser()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/config/IDatabaseConfig.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface IDatabaseConfig {\n  /**\n   * @summary Get the database host\n   * @returns string\n   */\n  getDatabaseHost(): string;\n  /**\n   * @summary Get the database port\n   * @returns number\n   */\n  getDatabasePort(): number;\n  /**\n   * @summary Get the datase user name\n   * @returns string\n   */\n  getDatabaseUser(): string;\n  /**\n   * @summary Get the database password\n   * @returns string\n   */\n  getDatabasePassword(): string;\n  /**\n   * @summary Get database name\n   * @returns string\n   */\n  getDatabaseName(): string;\n  /**\n   * @summary Get database schema\n   * @returns string\n   */\n  getDatabaseSchema(): string;\n  /**\n   * @summary Get database sync\n   * @returns boolean\n   */\n  getDatabaseSync(): boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IError.html":{"url":"interfaces/IError.html","title":"interface - IError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/interface/exception/IError.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code_error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code_error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code_error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IError {\n  message: string;\n  code_error: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IException.html":{"url":"interfaces/IException.html","title":"interface - IException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/interface/exception/IException.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        badRequestException\n                                    \n                                \n                                \n                                    \n                                        forbiddenException\n                                    \n                                \n                                \n                                    \n                                        internalServerErrorException\n                                    \n                                \n                                \n                                    \n                                        UnauthorizedException\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        badRequestException\n                        \n                    \n                \n            \n            \n                \nbadRequestException(data: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/exception/IException.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forbiddenException\n                        \n                    \n                \n            \n            \n                \nforbiddenException(data?: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/exception/IException.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        internalServerErrorException\n                        \n                    \n                \n            \n            \n                \ninternalServerErrorException(data?: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/exception/IException.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UnauthorizedException\n                        \n                    \n                \n            \n            \n                \nUnauthorizedException(data?: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/exception/IException.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { IFormatExceptionMessage } from './IFormatExceptionMessage';\nexport const IEXCEPTION = 'IException';\nexport interface IException {\n  badRequestException(data: IFormatExceptionMessage): void;\n  internalServerErrorException(data?: IFormatExceptionMessage): void;\n  forbiddenException(data?: IFormatExceptionMessage): void;\n  UnauthorizedException(data?: IFormatExceptionMessage): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFormatExceptionMessage.html":{"url":"interfaces/IFormatExceptionMessage.html","title":"interface - IFormatExceptionMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFormatExceptionMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/interface/exception/IFormatExceptionMessage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            code_error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code_error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code_error:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IFormatExceptionMessage {\n  message: string;\n  code_error?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILogger.html":{"url":"interfaces/ILogger.html","title":"interface - ILogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ILogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/interface/logger/ILogger.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        debug\n                                    \n                                \n                                \n                                    \n                                        error\n                                    \n                                \n                                \n                                    \n                                        log\n                                    \n                                \n                                \n                                    \n                                        verbose\n                                    \n                                \n                                \n                                    \n                                        warn\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/logger/ILogger.ts:2\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(context: string, message: string, trace?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/logger/ILogger.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/logger/ILogger.ts:3\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/logger/ILogger.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/logger/ILogger.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ILogger {\n  debug(context: string, message: string): void;\n  log(context: string, message: string): void;\n  error(context: string, message: string, trace?: string): void;\n  warn(context: string, message: string): void;\n  verbose(context: string, message: string): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITodoRepository.html":{"url":"interfaces/ITodoRepository.html","title":"interface - ITodoRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ITodoRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/interface/repository/ITodoRepository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        deleteById\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findById\n                                    \n                                \n                                \n                                    \n                                        getByCategoryName\n                                    \n                                \n                                \n                                    \n                                        insert\n                                    \n                                \n                                \n                                    \n                                        updateContent\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteById\n                        \n                    \n                \n            \n            \n                \ndeleteById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ITodoRepository.ts:40\n                \n            \n\n\n            \n                \n                    Delete todo by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ITodoRepository.ts:14\n                \n            \n\n\n            \n                \n                    Get all todo\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ITodoRepository.ts:20\n                \n            \n\n\n            \n                \n                    Get todo by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByCategoryName\n                        \n                    \n                \n            \n            \n                \ngetByCategoryName(categoryName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ITodoRepository.ts:46\n                \n            \n\n\n            \n                \n                    get todo by category name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    categoryName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert(todo: TodoTask)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ITodoRepository.ts:9\n                \n            \n\n\n            \n                \n                    Create new todo\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    todo\n                                    \n                                                TodoTask\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : TodoTask\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateContent\n                        \n                    \n                \n            \n            \n                \nupdateContent(id: number, content: string, isDone?: boolean, categoryId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ITodoRepository.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : number\n\n                                    \n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : string\n\n                                    \n                                \n                                \n                                    isDone\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        : boolean\n\n                                    \n                                \n                                \n                                    categoryId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        : number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TodoTask } from 'src/domain/model/TodoTask';\nexport const ITODO_REPOSITORY = 'ITodoRepository';\nexport interface ITodoRepository {\n  /**\n   * Create new todo\n   * @param todo : TodoTask\n   * @returns Promise\n   */\n  insert(todo: TodoTask): Promise;\n  /**\n   * Get all todo\n   * @returns Promise\n   */\n  findAll(): Promise;\n  /**\n   * Get todo by id\n   * @param id : number\n   * @returns Promise\n   */\n  findById(id: number): Promise;\n  /**\n   *\n   * @param id : number\n   * @param content : string\n   * @param isDone : boolean\n   * @param categoryId : number\n   * @returns Promise\n   */\n  updateContent(\n    id: number,\n    content: string,\n    isDone?: boolean,\n    categoryId?: number,\n  ): Promise;\n  /**\n   * Delete todo by id\n   * @param id : number\n   * @returns Promise\n   */\n  deleteById(id: number): Promise;\n  /**\n   * get todo by category name\n   * @param categoryName : string\n   * @returns Promise\n   */\n  getByCategoryName(categoryName: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nLoggerService\n\nLoggerService\n\n\n\nLoggerModule\n\nLoggerModule\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LoggerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LoggerService } from './logger.service';\n\n@Module({\n  providers: [LoggerService]\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Logger\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/logger/logger.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(context: string, message: string, trace?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/logger/logger.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/logger/logger.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/logger/logger.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/logger/logger.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ILogger } from 'src/domain/interface/logger/ILogger';\n\n/**\n * @summary adapter service for nestjs logger\n */\n@Injectable()\nexport class LoggerService extends Logger implements ILogger {\n  debug(context: string, message: string) {\n    if (process.env.NODE_ENV !== 'production') {\n      super.debug(`[DEBUG] ${message}`, context);\n    }\n  }\n  log(context: string, message: string) {\n    super.log(`[INFO] ${message}`, context);\n  }\n  error(context: string, message: string, trace?: string) {\n    super.error(`[ERROR] ${message}`, trace, context);\n  }\n  warn(context: string, message: string) {\n    super.warn(`[WARN] ${message}`, context);\n  }\n  verbose(context: string, message: string) {\n    if (process.env.NODE_ENV !== 'production') {\n      super.verbose(`[VERBOSE] ${message}`, context);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/Interceptor/logging/LoggingInterceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getIP\n                            \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/Interceptor/logging/LoggingInterceptor.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getIP\n                        \n                    \n                \n            \n            \n                \n                    \n                    getIP(request: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/Interceptor/logging/LoggingInterceptor.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/Interceptor/logging/LoggingInterceptor.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  LoggerService,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable, tap } from 'rxjs';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  constructor(private readonly logger: LoggerService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const now = Date.now();\n    const httpContext = context.switchToHttp();\n    const request = httpContext.getRequest();\n\n    const ip = this.getIP(request);\n\n    this.logger.log(\n      `Incoming Request on ${request.path}`,\n      `method=${request.method} ip=${ip}`,\n    );\n\n    return next.handle().pipe(\n      tap(() => {\n        this.logger.log(\n          `End Request for ${request.path}`,\n          `method=${request.method} ip=${ip} duration=${Date.now() - now}ms`,\n        );\n      }),\n    );\n  }\n\n  private getIP(request: any): string {\n    let ip: string;\n    const ipAddr = request.headers['x-forwarded-for'];\n    if (ipAddr) {\n      const list = ipAddr.split(',');\n      ip = list[list.length - 1];\n    } else {\n      ip = request.connection.remoteAddress;\n    }\n    return ip.replace('::ffff:', '');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessagePresenter.html":{"url":"classes/MessagePresenter.html","title":"class - MessagePresenter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessagePresenter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/presenter/messagePresenter.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/api/presenter/messagePresenter.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/messagePresenter.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class MessagePresenter {\n  @ApiProperty()\n  message: string;\n  constructor(message: string) {\n    this.message = message;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepositoriesModule.html":{"url":"modules/RepositoriesModule.html","title":"module - RepositoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    RepositoriesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/repositories/repositories.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ICATEGORY_REPOSITORY } from 'src/domain/interface/repository/ICategoryRepository';\nimport { ITODO_REPOSITORY } from 'src/domain/interface/repository/ITodoRepository';\nimport { Category } from '../enity/category.entity';\nimport { Todo } from '../enity/todo.entity';\nimport { CategoryRepository } from './category.repossitory';\nimport { TodoRepository } from './todo.repository';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Todo, Category])],\n  providers: [\n    {\n      provide: ITODO_REPOSITORY,\n      useClass: TodoRepository,\n    },\n    {\n      provide: ICATEGORY_REPOSITORY,\n      useClass: CategoryRepository,\n    },\n  ],\n  exports: [ITODO_REPOSITORY, ICATEGORY_REPOSITORY],\n})\nexport class RepositoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseFormat.html":{"url":"classes/ResponseFormat.html","title":"class - ResponseFormat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseFormat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/common/responseInterceptor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                duration\n                            \n                            \n                                isArray\n                            \n                            \n                                method\n                            \n                            \n                                path\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/api/common/responseInterceptor.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/common/responseInterceptor.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isArray\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/common/responseInterceptor.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/common/responseInterceptor.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/common/responseInterceptor.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n *\n */\nexport class ResponseFormat {\n  @ApiProperty()\n  isArray: boolean;\n  @ApiProperty()\n  path: string;\n  @ApiProperty()\n  duration: string;\n  @ApiProperty()\n  method: string;\n\n  data: T;\n}\n\n/**\n *\n */\n@Injectable()\nexport class ResponseInterceptor\n  implements NestInterceptor>\n{\n  /**\n   *\n   * @param context\n   * @param next\n   * @returns Observable>\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    const now = Date.now();\n    const httpContext = context.switchToHttp();\n    const request = httpContext.getRequest();\n\n    return next.handle().pipe(\n      map((data) => ({\n        data,\n        isArray: Array.isArray(data),\n        path: request.path,\n        duration: `${Date.now() - now}ms`,\n        method: request.method,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseFormat-1.html":{"url":"classes/ResponseFormat-1.html","title":"class - ResponseFormat-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseFormat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/Interceptor/response/ResponseFormat.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                duration\n                            \n                            \n                                isArray\n                            \n                            \n                                method\n                            \n                            \n                                path\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/Interceptor/response/ResponseFormat.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/Interceptor/response/ResponseFormat.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isArray\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/Interceptor/response/ResponseFormat.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/Interceptor/response/ResponseFormat.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/Interceptor/response/ResponseFormat.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ResponseFormat {\n  @ApiProperty()\n  isArray: boolean;\n  @ApiProperty()\n  path: string;\n  @ApiProperty()\n  duration: string;\n  @ApiProperty()\n  method: string;\n\n  data: T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseInterceptor.html":{"url":"injectables/ResponseInterceptor.html","title":"injectable - ResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/common/responseInterceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/api/common/responseInterceptor.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        Observable>\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n *\n */\nexport class ResponseFormat {\n  @ApiProperty()\n  isArray: boolean;\n  @ApiProperty()\n  path: string;\n  @ApiProperty()\n  duration: string;\n  @ApiProperty()\n  method: string;\n\n  data: T;\n}\n\n/**\n *\n */\n@Injectable()\nexport class ResponseInterceptor\n  implements NestInterceptor>\n{\n  /**\n   *\n   * @param context\n   * @param next\n   * @returns Observable>\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    const now = Date.now();\n    const httpContext = context.switchToHttp();\n    const request = httpContext.getRequest();\n\n    return next.handle().pipe(\n      map((data) => ({\n        data,\n        isArray: Array.isArray(data),\n        path: request.path,\n        duration: `${Date.now() - now}ms`,\n        method: request.method,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseInterceptor-1.html":{"url":"injectables/ResponseInterceptor-1.html","title":"injectable - ResponseInterceptor-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/Interceptor/response/ResponseInterceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/Interceptor/response/ResponseInterceptor.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { map, Observable } from 'rxjs';\nimport { ResponseFormat } from './ResponseFormat';\n\n@Injectable()\nexport class ResponseInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    const now = Date.now();\n    const httpContext = context.switchToHttp();\n    const request = httpContext.getRequest();\n\n    return next.handle().pipe(\n      map((data) => ({\n        data,\n        isArray: Array.isArray(data),\n        path: request.path,\n        duration: `${Date.now() - now}ms`,\n        method: request.method,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Todo.html":{"url":"entities/Todo.html","title":"entity - Todo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Todo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/enity/todo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                content\n                            \n                            \n                                createdate\n                            \n                            \n                                id\n                            \n                            \n                                isDone\n                            \n                            \n                                updateddate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, category => category.todo, {onDelete: 'CASCADE', eager: true})@JoinColumn({name: 'categoryId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/todo.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/todo.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'createdate'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/todo.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/todo.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('boolean', {default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/todo.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateddate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updateddate'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/todo.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Category } from './category.entity';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\n\n@Entity('todo')\nexport class Todo {\n  @PrimaryGeneratedColumn({ type: 'integer' })\n  id: number;\n\n  @Column('varchar', { length: 255, nullable: true })\n  content: string;\n\n  @Column('boolean', { default: false })\n  isDone: boolean;\n\n  @CreateDateColumn({ name: 'createdate' })\n  createdate: Date;\n\n  @UpdateDateColumn({ name: 'updateddate' })\n  updateddate: Date;\n\n  @ManyToOne(() => Category, (category) => category.todo, {\n    onDelete: 'CASCADE',\n    eager: true,\n  })\n  @JoinColumn({ name: 'categoryId' })\n  category: Category;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TodoCategory.html":{"url":"classes/TodoCategory.html","title":"class - TodoCategory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TodoCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/model/TodoCategory.ts\n        \n\n\n            \n                Description\n            \n            \n                Categoey model\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getId\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTodo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, id?: number, todo?: TodoTask[])\n                    \n                \n                        \n                            \n                                Defined in src/domain/model/TodoCategory.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        todo\n                                                  \n                                                        \n                                                                        TodoTask[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getId()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoCategory.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     number | null\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getName()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoCategory.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTodo()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoCategory.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     [] | null\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { TodoTask } from './TodoTask';\n\n/**\n * Categoey model\n */\nexport class TodoCategory {\n  constructor(\n    private name: string,\n    private id?: number,\n    private todo?: TodoTask[],\n  ) {}\n\n  public getName(): string {\n    return this.name;\n  }\n\n  public getId(): number | null {\n    return this.id;\n  }\n\n  public getTodo(): TodoTask[] | null {\n    return this.todo;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TodoController.html":{"url":"controllers/TodoController.html","title":"controller - TodoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TodoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/controller/todo/todo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                todo\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTodo\n                            \n                            \n                                    Async\n                                deleteTodo\n                            \n                            \n                                    Async\n                                getTodo\n                            \n                            \n                                    Async\n                                getTodos\n                            \n                            \n                                    Async\n                                updateTodo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addTodo(addTodo: AddTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiResponseType(MessagePresenter, undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/controller/todo/todo.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    addTodo\n                                    \n                                                AddTodoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTodo(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiResponseType(MessagePresenter, undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/controller/todo/todo.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTodo(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiResponseType(TodoPresenter, undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/controller/todo/todo.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTodos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTodos()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponseType(TodoPresenter, undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/controller/todo/todo.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTodo(updateTodoDto: UpdateTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiResponseType(MessagePresenter, undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/controller/todo/todo.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateTodoDto\n                                    \n                                                UpdateTodoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { ApiTags, ApiResponse, ApiExtraModels } from '@nestjs/swagger';\nimport { ApiResponseType } from 'src/api/common/apiResponseDecorator';\nimport { AddTodoDto } from 'src/api/dto/addTodoDto';\nimport { UpdateTodoDto } from 'src/api/dto/updateTodoDto';\nimport { MessagePresenter } from 'src/api/presenter/messagePresenter';\nimport { TodoPresenter } from 'src/api/presenter/todoPresenter';\nimport { AddTodoCommand } from 'src/usecase/todo/command/addTodo/addTodoCommand';\nimport { DeleteTodoCommand } from 'src/usecase/todo/command/deleteTodo/deleteTodoCommand';\nimport { UpdateTodoCommand } from 'src/usecase/todo/command/updateTodo/updateTodoCommand';\nimport { GetAllTodoQuery } from 'src/usecase/todo/query/getAllTodo/getAllTodoQuery';\nimport { GetTodoByIdQuery } from 'src/usecase/todo/query/getAllTodoById/getTodoByIdQuery';\nimport { TodoResponse } from 'src/usecase/todo/query/getTodoResponse';\n/**\n *\n */\n@Controller('todo')\n@ApiTags('todo')\n@ApiResponse({ status: 500, description: 'Internal error' })\n@ApiExtraModels(TodoPresenter, MessagePresenter)\nexport class TodoController {\n  constructor(\n    private readonly commandBus: CommandBus,\n    private readonly queryBus: QueryBus,\n  ) {}\n\n  @Get(':id')\n  @ApiResponseType(TodoPresenter, false)\n  async getTodo(@Param('id', ParseIntPipe) id: number) {\n    const todo = await this.queryBus.execute(new GetTodoByIdQuery(id));\n    return new TodoPresenter(todo);\n  }\n\n  @Get()\n  @ApiResponseType(TodoPresenter, true)\n  async getTodos() {\n    const todos = await this.queryBus.execute(\n      new GetAllTodoQuery(),\n    );\n    return todos?.map((todo) => new TodoPresenter(todo));\n  }\n\n  @Put()\n  @ApiResponseType(MessagePresenter, false)\n  async updateTodo(@Body() updateTodoDto: UpdateTodoDto) {\n    const { id, content, isDone, categoryId } = updateTodoDto;\n    this.commandBus.execute(\n      new UpdateTodoCommand(id, content, isDone, categoryId),\n    );\n    return { message: 'success' };\n  }\n\n  @Delete(':id')\n  @ApiResponseType(MessagePresenter, false)\n  async deleteTodo(@Param('id', ParseIntPipe) id: number) {\n    await this.commandBus.execute(new DeleteTodoCommand(id));\n    return { message: 'success' };\n  }\n  @Post()\n  @ApiResponseType(MessagePresenter, false)\n  async addTodo(@Body() addTodo: AddTodoDto) {\n    const { content, isDone, category } = addTodo;\n    await this.commandBus.execute(\n      new AddTodoCommand(content, isDone, {\n        id: category.id,\n        name: category.name,\n      }),\n    );\n    return { message: 'success' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TodoPresenter.html":{"url":"classes/TodoPresenter.html","title":"class - TodoPresenter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TodoPresenter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/presenter/todoPresenter.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                content\n                            \n                            \n                                createdate\n                            \n                            \n                                id\n                            \n                            \n                                isDone\n                            \n                            \n                                updateddate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todo: TodoResponse)\n                    \n                \n                        \n                            \n                                Defined in src/api/presenter/todoPresenter.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todo\n                                                  \n                                                        \n                                                                        TodoResponse\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/todoPresenter.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/todoPresenter.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/todoPresenter.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/todoPresenter.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/todoPresenter.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateddate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/todoPresenter.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { TodoResponse } from 'src/usecase/todo/query/getTodoResponse';\nimport { CategoryDto } from '../dto/categprydto';\n\nexport class TodoPresenter {\n  @ApiProperty()\n  id: number;\n  @ApiProperty()\n  content: string;\n  @ApiProperty()\n  isDone: boolean;\n  @ApiProperty()\n  createdate: Date;\n  @ApiProperty()\n  updateddate: Date;\n  @ApiProperty()\n  category: CategoryDto;\n\n  constructor(todo: TodoResponse) {\n    this.id = todo?.id;\n    this.content = todo?.content;\n    this.isDone = todo?.isDone;\n    this.createdate = todo?.createdDate;\n    this.category = todo?.category;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TodoRepository.html":{"url":"injectables/TodoRepository.html","title":"injectable - TodoRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TodoRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/repositories/todo.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                getByCategoryName\n                            \n                            \n                                    Async\n                                insert\n                            \n                            \n                                    Private\n                                toEntity\n                            \n                            \n                                    Private\n                                toModel\n                            \n                            \n                                    Async\n                                updateContent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todoRepo: Repository, categoryRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/repositories/todo.repository.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todoRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoryRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByCategoryName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByCategoryName(categoryName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(todo: TodoTask)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    todo\n                                    \n                                                TodoTask\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toEntity\n                        \n                    \n                \n            \n            \n                \n                    \n                    toEntity(todoModel: TodoTask)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    todoModel\n                                    \n                                                TodoTask\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Todo\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toModel\n                        \n                    \n                \n            \n            \n                \n                    \n                    toModel(todoEntity: Todo)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    todoEntity\n                                    \n                                                Todo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TodoTask\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateContent\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateContent(id: number, content: string, isDone?: boolean, categoryId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isDone\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    categoryId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ITodoRepository } from 'src/domain/interface/repository/ITodoRepository';\nimport { TodoCategory } from 'src/domain/model/TodoCategory';\nimport { TodoTask } from 'src/domain/model/TodoTask';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { Category } from '../enity/category.entity';\n\nimport { Todo } from '../enity/todo.entity';\n\n@Injectable()\nexport class TodoRepository implements ITodoRepository {\n  constructor(\n    @InjectRepository(Todo)\n    private readonly todoRepo: Repository,\n    @InjectRepository(Category)\n    private readonly categoryRepo: Repository,\n  ) {}\n  async getByCategoryName(categoryName: string): Promise {\n    const todo = await this.todoRepo.findBy({\n      category: { name: categoryName },\n    });\n    return todo?.map((entity) => this.toModel(entity));\n  }\n\n  async insert(todo: TodoTask): Promise {\n    const categoryId = todo.getCategory()?.getId();\n    const categoryName = todo.getCategory()?.getName();\n\n    const todoEntity = this.toEntity(todo);\n    if (categoryId > 0) {\n      const category = await this.categoryRepo.findOneBy({\n        id: categoryId,\n      });\n      if (category) {\n        todoEntity.category = category;\n        await this.todoRepo.save(todoEntity);\n        return;\n      }\n    }\n    if (categoryName !== '') {\n      const category = new Category();\n      category.name = categoryName;\n      await this.categoryRepo.insert(category);\n      todoEntity.category = category;\n      await this.todoRepo.save(todoEntity);\n      return;\n    }\n  }\n  async findAll(): Promise {\n    const todoEntity = await this.todoRepo.find({\n      relations: ['category'],\n    });\n    return todoEntity?.map((entity) => this.toModel(entity));\n  }\n\n  async findById(id: number): Promise {\n    const todoEntity = await this.todoRepo.findOneBy({ id: id });\n    return this.toModel(todoEntity);\n  }\n\n  async updateContent(\n    id: number,\n    content: string,\n    isDone?: boolean,\n    categoryId?: number,\n  ): Promise {\n    const todo = await this.todoRepo.findOneBy({ id: id });\n    if (todo) {\n      if (content !== '' && content !== todo.content) {\n        todo.content = content;\n      }\n\n      if (isDone !== todo.isDone) todo.isDone = isDone;\n      if (categoryId > 0) {\n        const category = await this.categoryRepo.findOneByOrFail({\n          id: categoryId,\n        });\n        if (category) todo.category = category;\n        else throw new Error('Category not found');\n      }\n      await this.todoRepo.save(todo);\n    }\n  }\n  async deleteById(id: number): Promise {\n    await this.todoRepo.delete(id);\n  }\n\n  private toModel(todoEntity: Todo): TodoTask {\n    const todo: TodoTask = new TodoTask(\n      todoEntity.content,\n      todoEntity.isDone,\n      new TodoCategory(todoEntity.category?.name, todoEntity.category?.id),\n      todoEntity.id,\n      todoEntity.createdate,\n      todoEntity.updateddate,\n    );\n    return todo;\n  }\n  private toEntity(todoModel: TodoTask): Todo {\n    const todoEntity: Todo = new Todo();\n\n    todoEntity.id = todoModel.getId();\n    todoEntity.content = todoModel.getContent();\n    todoEntity.isDone = todoModel.getIsDone();\n    todoEntity.category = new Category();\n    todoEntity.category.name = todoModel.getCategory()?.getName();\n    todoEntity.category.id = todoModel.getCategory()?.getId();\n\n    return todoEntity;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TodoResponse.html":{"url":"classes/TodoResponse.html","title":"class - TodoResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TodoResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/query/getTodoResponse.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                category\n                            \n                            \n                                    Public\n                                    Readonly\n                                content\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                createdDate\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                isDone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number, content: string, isDone: boolean, createdDate?: Date, category?: Category)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/query/getTodoResponse.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        content\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isDone\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createdDate\n                                                  \n                                                        \n                                                                        Date\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        Category\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/query/getTodoResponse.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/query/getTodoResponse.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/query/getTodoResponse.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/query/getTodoResponse.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/query/getTodoResponse.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TodoResponse {\n  constructor(\n    public readonly id: number,\n    public readonly content: string,\n    public readonly isDone: boolean,\n    public readonly createdDate?: Date,\n    public readonly category?: Category,\n  ) {}\n}\nexport interface Category {\n  id: number;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TodoTask.html":{"url":"classes/TodoTask.html","title":"class - TodoTask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TodoTask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/model/TodoTask.ts\n        \n\n\n            \n                Description\n            \n            \n                Todo model\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getCategory\n                            \n                            \n                                    Public\n                                getContent\n                            \n                            \n                                    Public\n                                getCreatedDate\n                            \n                            \n                                    Public\n                                getId\n                            \n                            \n                                    Public\n                                getIsDone\n                            \n                            \n                                    Public\n                                getUpdatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(content: string, isDone: boolean, category: TodoCategory, id?: number, createdate?: Date, updateddate?: Date)\n                    \n                \n                        \n                            \n                                Defined in src/domain/model/TodoTask.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        content\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isDone\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        TodoCategory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        createdate\n                                                  \n                                                        \n                                                                        Date\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateddate\n                                                  \n                                                        \n                                                                        Date\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategory()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoTask.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         TodoCategory\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getContent\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContent()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoTask.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCreatedDate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCreatedDate()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoTask.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Date\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getId()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoTask.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getIsDone\n                        \n                    \n                \n            \n            \n                \n                    \n                    getIsDone()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoTask.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getUpdatedDate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUpdatedDate()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoTask.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Date\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { TodoCategory } from './TodoCategory';\n\n/**\n * Todo model\n */\nexport class TodoTask {\n  constructor(\n    private content: string,\n    private isDone: boolean,\n    private category: TodoCategory,\n    private id?: number,\n    private createdate?: Date,\n    private updateddate?: Date,\n  ) {\n    if (!content || content === '') {\n      throw new Error('Content is required'); // this be customized exception\n    }\n  }\n\n  public getId(): number {\n    return this.id;\n  }\n  public getContent(): string {\n    return this.content;\n  }\n  public getIsDone(): boolean {\n    return this.isDone;\n  }\n  public getCreatedDate(): Date {\n    return this.createdate;\n  }\n  public getUpdatedDate(): Date {\n    return this.updateddate;\n  }\n  public getCategory(): TodoCategory {\n    return this.category;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TypeormConfigModule.html":{"url":"modules/TypeormConfigModule.html","title":"module - TypeormConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    TypeormConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/config/typeorm/typeorm.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Todo } from 'src/infrastructure/enity/todo.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { Category } from 'src/infrastructure/enity/category.entity';\n\nconst typeOrmModuleOptions: TypeOrmModuleOptions = {\n  type: 'postgres',\n  url: process.env.DATABASE_URL,\n  autoLoadEntities: true,\n  schema: process.env.DATABASE_SCHEMA,\n  entities: [Todo, Category],\n  synchronize: true, //demo purpose only\n};\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    TypeOrmModule.forRoot(typeOrmModuleOptions),\n  ],\n})\nexport class TypeormConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTodoCommand.html":{"url":"classes/UpdateTodoCommand.html","title":"class - UpdateTodoCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTodoCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/command/updateTodo/updateTodoCommand.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                categoryId\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                isDone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number, content: string, isDone?: boolean, categoryId?: number)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/command/updateTodo/updateTodoCommand.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        content\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isDone\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoryId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/updateTodo/updateTodoCommand.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/updateTodo/updateTodoCommand.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/updateTodo/updateTodoCommand.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/updateTodo/updateTodoCommand.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UpdateTodoCommand {\n  constructor(\n    public id: number,\n    public content: string,\n    public isDone?: boolean,\n    public categoryId?: number,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTodoCommandHandler.html":{"url":"classes/UpdateTodoCommandHandler.html","title":"class - UpdateTodoCommandHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTodoCommandHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/command/updateTodo/updateTodoCommandHandler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                            \n                                    Private\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todoRepository: ITodoRepository, exception: IException)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/command/updateTodo/updateTodoCommandHandler.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todoRepository\n                                                  \n                                                        \n                                                                        ITodoRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exception\n                                                  \n                                                        \n                                                                        IException\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: UpdateTodoCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/command/updateTodo/updateTodoCommandHandler.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                UpdateTodoCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(updateCommand: UpdateTodoCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/command/updateTodo/updateTodoCommandHandler.ts:30\n                \n            \n\n\n            \n                \n                    Validate the rquest\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateCommand\n                                    \n                                                UpdateTodoCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport {\n  IException,\n  IEXCEPTION,\n} from 'src/domain/interface/exception/IException';\nimport {\n  ITodoRepository,\n  ITODO_REPOSITORY,\n} from 'src/domain/interface/repository/ITodoRepository';\nimport { UpdateTodoCommand } from './updateTodoCommand';\n\n@CommandHandler(UpdateTodoCommand)\nexport class UpdateTodoCommandHandler\n  implements ICommandHandler\n{\n  constructor(\n    @Inject(ITODO_REPOSITORY) private readonly todoRepository: ITodoRepository,\n    @Inject(IEXCEPTION) private readonly exception: IException,\n  ) {}\n  async execute(command: UpdateTodoCommand): Promise {\n    this.validate(command);\n    const { id, isDone, content, categoryId } = command;\n    this.todoRepository.updateContent(id, content, isDone, categoryId);\n  }\n  /**\n   * Validate the rquest\n   * @param updateCommand {UpdateTodoCommand}\n   */\n  private validate(updateCommand: UpdateTodoCommand) {\n    const { id, content, categoryId } = updateCommand;\n    if (!id)\n      this.exception.badRequestException({ message: 'The id is required' });\n    if (!content || content === '')\n      this.exception.badRequestException({\n        message: 'The content cannot be empty',\n      });\n    if (categoryId \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTodoDto.html":{"url":"classes/UpdateTodoDto.html","title":"class - UpdateTodoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/dto/updateTodoDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                categoryId\n                            \n                            \n                                    Readonly\n                                content\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                isDone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/updateTodoDto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/updateTodoDto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/updateTodoDto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/updateTodoDto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsNumber, IsBoolean, IsString } from 'class-validator';\n\nexport class UpdateTodoDto {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsNumber()\n  readonly id: number;\n\n  @ApiProperty()\n  @IsBoolean()\n  readonly isDone: boolean;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  readonly content: string;\n\n  @ApiProperty()\n  @IsNumber()\n  readonly categoryId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsecaseModule.html":{"url":"modules/UsecaseModule.html","title":"module - UsecaseModule","body":"\n                   \n\n\n\n\n    Modules\n    UsecaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsecaseModule\n\n\n\ncluster_UsecaseModule_imports\n\n\n\n\nExceptionsModule\n\nExceptionsModule\n\n\n\nUsecaseModule\n\nUsecaseModule\n\nUsecaseModule -->\n\nExceptionsModule->UsecaseModule\n\n\n\n\n\nRepositoriesModule\n\nRepositoriesModule\n\nUsecaseModule -->\n\nRepositoriesModule->UsecaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/usecase/usecase.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ExceptionsModule\n                        \n                        \n                            RepositoriesModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { ExceptionsModule } from 'src/infrastructure/exceptions/exceptions.module';\nimport { RepositoriesModule } from 'src/infrastructure/repositories/repositories.module';\nimport { CategoryCommandHandlers } from './category/command';\nimport { CategoryQueryHandlers } from './category/query';\nimport { TodoCommandHandlers } from './todo/command';\nimport { TodoQueryHandlers } from './todo/query';\n\n@Module({\n  imports: [CqrsModule, RepositoriesModule, ExceptionsModule],\n  providers: [\n    ...TodoQueryHandlers,\n    ...TodoCommandHandlers,\n    ...CategoryQueryHandlers,\n    ...CategoryCommandHandlers,\n  ],\n})\nexport class UsecaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/api/common/apiResponseDecorator.ts\n            \n            variable\n            ApiResponseType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/api/common/responseInterceptor.ts\n            \n            class\n            ResponseFormat\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/api/common/responseInterceptor.ts\n            \n            injectable\n            ResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/api/controller/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/api/controller/todo/todo.controller.ts\n            \n            controller\n            TodoController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/api/dto/addCategoryDto.ts\n            \n            class\n            AddCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/api/dto/addTodoDto.ts\n            \n            class\n            AddTodoDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/api/dto/categprydto.ts\n            \n            class\n            CategoryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/dto/updateTodoDto.ts\n            \n            class\n            UpdateTodoDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/api/presenter/categoryPresenter.ts\n            \n            class\n            CategoryPresenter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/api/presenter/categoryTodoPresenter.ts\n            \n            class\n            CategoryTodoPresenter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/api/presenter/messagePresenter.ts\n            \n            class\n            MessagePresenter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/presenter/todoPresenter.ts\n            \n            class\n            TodoPresenter\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/domain/interface/config/IDatabaseConfig.ts\n            \n            interface\n            IDatabaseConfig\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/domain/interface/exception/IError.ts\n            \n            interface\n            IError\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/interface/exception/IException.ts\n            \n            interface\n            IException\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/domain/interface/exception/IException.ts\n            \n            variable\n            IEXCEPTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/interface/exception/IFormatExceptionMessage.ts\n            \n            interface\n            IFormatExceptionMessage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/interface/logger/ILogger.ts\n            \n            interface\n            ILogger\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/domain/interface/repository/ICategoryRepository.ts\n            \n            interface\n            ICategoryRepsoitory\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/domain/interface/repository/ICategoryRepository.ts\n            \n            variable\n            ICATEGORY_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/interface/repository/ITodoRepository.ts\n            \n            interface\n            ITodoRepository\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/domain/interface/repository/ITodoRepository.ts\n            \n            variable\n            ITODO_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/model/TodoCategory.ts\n            \n            class\n            TodoCategory\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/domain/model/TodoTask.ts\n            \n            class\n            TodoTask\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/infrastructure/Interceptor/logging/LoggingInterceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/Interceptor/response/ResponseFormat.ts\n            \n            class\n            ResponseFormat\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/Interceptor/response/ResponseInterceptor.ts\n            \n            injectable\n            ResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/config/typeorm/typeorm.module.ts\n            \n            variable\n            typeOrmModuleOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/enity/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/enity/todo.entity.ts\n            \n            entity\n            Todo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/exceptions/exceptions.service.ts\n            \n            injectable\n            ExceptionsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/filter/AllExceptionFilter.ts\n            \n            class\n            AllExceptionFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/repositories/category.repossitory.ts\n            \n            injectable\n            CategoryRepository\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/repositories/todo.repository.ts\n            \n            injectable\n            TodoRepository\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/usecase/category/command/addCategory/addCategoryCommand.ts\n            \n            class\n            AddCategoryCommand\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/usecase/category/command/addCategory/addCategoryCommandHandler.ts\n            \n            class\n            AddCategoryCommandHandler\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/usecase/category/command/index.ts\n            \n            variable\n            CategoryCommandHandlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/usecase/category/query/getAllCategory/categoryResponse.ts\n            \n            class\n            CategoryResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/usecase/category/query/getAllCategory/getAllCategoryQuery.ts\n            \n            class\n            GetAllCategoryQuery\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/usecase/category/query/getAllCategory/getAllCategoryQueryHandler.ts\n            \n            class\n            GetAllCategoryQueryHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usecase/category/query/getCategoryWithTodo/CategoryTodoResponse.ts\n            \n            class\n            CategoryTodoResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/usecase/category/query/getCategoryWithTodo/getCategoryWithTodoQuery.ts\n            \n            class\n            GetCategoryWithTodoQuery\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/usecase/category/query/getCategoryWithTodo/getCategoryWithTodoQueryHandler.ts\n            \n            class\n            GetCategoryWithTodoQueryHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usecase/category/query/index.ts\n            \n            variable\n            CategoryQueryHandlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/addTodo/addTodoCommand.ts\n            \n            class\n            AddTodoCommand\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/addTodo/addTodoCommand.ts\n            \n            interface\n            Category\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/addTodo/addTodoCommandHandler.ts\n            \n            class\n            AddTodoCommandHandler\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/deleteTodo/deleteTodoCommand.ts\n            \n            class\n            DeleteTodoCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/deleteTodo/deleteTodoCommandHandler.ts\n            \n            class\n            DeleteTodoCommandHandler\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/index.ts\n            \n            variable\n            TodoCommandHandlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/updateTodo/updateTodoCommand.ts\n            \n            class\n            UpdateTodoCommand\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/updateTodo/updateTodoCommandHandler.ts\n            \n            class\n            UpdateTodoCommandHandler\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/usecase/todo/query/getAllTodo/getAllTodoQuery.ts\n            \n            class\n            GetAllTodoQuery\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/usecase/todo/query/getAllTodo/getAllTodoQueryHandler.ts\n            \n            class\n            GetAllTodoQueryHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usecase/todo/query/getAllTodoById/getTodoByIdQuery.ts\n            \n            class\n            GetTodoByIdQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usecase/todo/query/getAllTodoById/getTodoByIdQueryHandler.ts\n            \n            class\n            GetTodoByIdQueryHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usecase/todo/query/getTodoResponse.ts\n            \n            class\n            TodoResponse\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/usecase/todo/query/getTodoResponse.ts\n            \n            interface\n            Category\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usecase/todo/query/index.ts\n            \n            variable\n            TodoQueryHandlers\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.1.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/cqrs : ^8.0.4\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/typeorm : ^8.1.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            mysql2 : ^2.3.3\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n        \n            typeorm : ^0.3.6\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n  \n\nPrerequisites\nDocker\nhttps://www.docker.com/get-started/\nDescription\nTodo sample with clean architecture:\nFolder structure:\n -- documentation\n -- src\n    -- api\n    -- domain\n    -- infrastructure\n    -- usecase\nInstallation\n$ yarnRunning the app\nAt the root run the following command.\n# Docker compose\n$ yarn run start:docker\n# click the url below after succesful deployment\nhttp://localhost:8080/api/Test\n# unit tests\n$ npm run test\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExceptionsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepositoriesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TypeormConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsecaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nExceptionsModule\n\nExceptionsModule\n\n\n\nUsecaseModule\n\nUsecaseModule\n\nUsecaseModule -->\n\nExceptionsModule->UsecaseModule\n\n\n\nAppModule -->\n\nExceptionsModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nRepositoriesModule\n\nRepositoriesModule\n\nUsecaseModule -->\n\nRepositoriesModule->UsecaseModule\n\n\n\nAppModule -->\n\nRepositoriesModule->AppModule\n\n\n\n\n\nTypeormConfigModule\n\nTypeormConfigModule\n\nAppModule -->\n\nTypeormConfigModule->AppModule\n\n\n\nAppModule -->\n\nUsecaseModule->AppModule\n\n\n\n\n\nLoggerService\n\nLoggerService\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    32 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiResponseType   (src/.../apiResponseDecorator.ts)\n                        \n                        \n                            CategoryCommandHandlers   (src/.../index.ts)\n                        \n                        \n                            CategoryQueryHandlers   (src/.../index.ts)\n                        \n                        \n                            ICATEGORY_REPOSITORY   (src/.../ICategoryRepository.ts)\n                        \n                        \n                            IEXCEPTION   (src/.../IException.ts)\n                        \n                        \n                            ITODO_REPOSITORY   (src/.../ITodoRepository.ts)\n                        \n                        \n                            TodoCommandHandlers   (src/.../index.ts)\n                        \n                        \n                            TodoQueryHandlers   (src/.../index.ts)\n                        \n                        \n                            typeOrmModuleOptions   (src/.../typeorm.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/api/common/apiResponseDecorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiResponseType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : >(\n  model: TModel,\n  isArray: boolean,\n) => {\n  return applyDecorators(\n    ApiOkResponse({\n      isArray: isArray,\n      schema: {\n        allOf: [\n          { $ref: getSchemaPath(ResponseFormat) },\n          {\n            properties: {\n              data: {\n                $ref: getSchemaPath(model),\n              },\n              isArray: {\n                type: 'boolean',\n                default: isArray,\n              },\n            },\n          },\n        ],\n      },\n    }),\n  );\n}\n                    \n                \n\n\n        \n    \n\n    src/usecase/category/command/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CategoryCommandHandlers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [AddCategoryCommandHandler]\n                    \n                \n\n\n        \n    \n\n    src/usecase/category/query/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CategoryQueryHandlers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  GetAllCategoryQueryHandler,\n  GetCategoryWithTodoQueryHandler,\n]\n                    \n                \n\n\n        \n    \n\n    src/domain/interface/repository/ICategoryRepository.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ICATEGORY_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ICategoryRepsoitory'\n                    \n                \n\n\n        \n    \n\n    src/domain/interface/exception/IException.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IEXCEPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'IException'\n                    \n                \n\n\n        \n    \n\n    src/domain/interface/repository/ITodoRepository.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ITODO_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ITodoRepository'\n                    \n                \n\n\n        \n    \n\n    src/usecase/todo/command/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TodoCommandHandlers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  UpdateTodoCommandHandler,\n  AddTodoCommandHandler,\n  DeleteTodoCommandHandler,\n]\n                    \n                \n\n\n        \n    \n\n    src/usecase/todo/query/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TodoQueryHandlers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  GetAllTodoQueryHandler,\n  GetTodoByIdQueryHandler,\n]\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/config/typeorm/typeorm.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        typeOrmModuleOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'postgres',\n  url: process.env.DATABASE_URL,\n  autoLoadEntities: true,\n  schema: process.env.DATABASE_SCHEMA,\n  entities: [Todo, Category],\n  synchronize: true, //demo purpose only\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
