var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddCategoryCommand.html",[0,0.176,1,2.5]],["body/classes/AddCategoryCommand.html",[0,0.226,1,4.018,2,0.999,3,0.191,4,0.191,5,0.167,6,4.251,7,2.492,8,3.212,9,4.924,10,1.935,11,1.299,12,0.345,13,1.556,14,2.953,15,0.955,16,1.191,17,3.807,18,1.306,19,0.649,20,4.924,21,0.872,22,0.016,23,0.465,24,0.793,25,4.924,26,0.191,27,3.476,28,0.013,29,0.013]],["title/classes/AddCategoryCommandHandler.html",[0,0.176,30,2.706]],["body/classes/AddCategoryCommandHandler.html",[0,0.146,1,4.479,2,0.647,3,0.124,4,0.124,5,0.108,7,1.613,8,3.845,10,1.805,11,1.421,12,0.223,15,0.905,16,1.111,19,0.567,21,0.954,22,0.017,23,0.407,24,0.868,26,0.124,28,0.01,29,0.01,30,3.243,31,2.751,32,3.965,33,4.593,34,1.646,35,3.802,36,1.161,37,2.451,38,2.615,39,2.344,40,3.243,41,3.186,42,3.356,43,3.273,44,2.995,45,3.186,46,2.996,47,3.243,48,3.186,49,1.111,50,2.09,51,3.965,52,3.186,53,1.613,54,0.769,55,1.814,56,0.738,57,2.25,58,1.379,59,1.936,60,1.936,61,2.25,62,1.527,63,1.936,64,3.186,65,2.751,66,1.506,67,2.25,68,2.25,69,1.38,70,1.527,71,3.186,72,3.186,73,2.25,74,1.379,75,1.814]],["title/classes/AddCategoryDto.html",[0,0.176,76,2.706]],["body/classes/AddCategoryDto.html",[0,0.28,2,0.982,3,0.188,4,0.188,5,0.164,12,0.339,13,1.539,15,0.879,18,1.13,19,0.509,22,0.016,23,0.366,26,0.188,28,0.013,29,0.013,54,0.72,66,2.186,75,2.755,76,4.301,77,4.177,78,1.994,79,3.741,80,3.741,81,4.838,82,2.92,83,1.994,84,4.711,85,4.711,86,3.416,87,2.593]],["title/classes/AddTodoCommand.html",[0,0.176,88,2.329]],["body/classes/AddTodoCommand.html",[0,0.193,2,0.855,3,0.163,4,0.163,5,0.143,11,1.981,12,0.295,13,1.408,14,3.565,15,0.734,16,1.348,18,1.281,19,0.7,21,0.746,22,0.016,23,0.502,24,0.679,26,0.216,28,0.012,29,0.012,88,3.386,89,3.259,90,2.611,91,2.715,92,3.638,93,2.381,94,4.214,95,4.214,96,4.214,97,4.214,98,1.322,99,1.065,100,1.112]],["title/classes/AddTodoCommandHandler.html",[0,0.176,101,2.706]],["body/classes/AddTodoCommandHandler.html",[0,0.138,2,0.61,3,0.117,4,0.117,5,0.102,7,1.521,8,3.741,10,2.254,11,1.513,12,0.21,15,0.686,16,1.065,19,0.549,21,0.922,22,0.017,23,0.394,24,0.839,26,0.117,28,0.009,29,0.009,32,3.8,34,1.578,35,3.678,36,1.112,37,2.37,38,2.506,39,2.29,40,3.108,43,3.165,44,2.926,47,3.108,49,1.065,50,2.003,51,3.8,53,2.228,54,0.779,55,1.711,56,0.696,57,2.122,58,1.301,59,1.826,62,1.441,63,1.826,66,1.443,67,2.122,68,2.122,69,1.322,70,1.441,73,3.108,74,1.905,75,2.506,88,4.106,90,2.399,91,1.73,101,3.108,102,2.595,103,4.402,104,1.708,105,1.961,106,2.749,107,3.005,108,2.228,109,3.005,110,3.005,111,1.521,112,1.711,113,2.359,114,2.122,115,3.005,116,1.961,117,3.005,118,3.005,119,3.404]],["title/classes/AddTodoDto.html",[0,0.176,120,2.706]],["body/classes/AddTodoDto.html",[0,0.247,2,0.812,3,0.155,4,0.155,5,0.136,11,1.605,12,0.28,13,1.36,18,0.998,19,0.641,22,0.017,23,0.46,24,0.867,26,0.155,28,0.011,29,0.011,54,0.719,66,2.293,75,3.065,78,2.507,79,4.163,80,3.094,82,3.119,83,1.649,84,4.163,85,4.163,86,2.825,87,2.885,90,2.391,91,2.391,93,1.93,120,3.801,121,3.454,122,3.969,123,4.001,124,4.001,125,4.001,126,4.001,127,4.001,128,4.001,129,4.647,130,5.383,131,4.001,132,3.094,133,2.825]],["title/classes/AllExceptionFilter.html",[0,0.176,134,2.964]],["body/classes/AllExceptionFilter.html",[0,0.125,2,0.553,3,0.106,4,0.106,5,0.092,10,1.071,12,0.191,15,0.648,16,0.659,19,0.518,21,0.871,22,0.017,23,0.371,24,0.792,26,0.106,28,0.009,29,0.009,34,1.467,36,1.034,39,1.845,43,3.991,49,0.991,53,2.072,54,0.581,56,0.631,66,0.893,69,1.848,74,2.762,100,1.297,134,3.166,135,2.353,136,4.917,137,5.466,138,4.917,139,2.353,140,3.112,141,2.725,142,3.166,143,4.094,144,4.245,145,5.466,146,2.725,147,2.725,148,4.137,149,5.078,150,2.725,151,3.822,152,4.917,153,2.725,154,2.725,155,2.725,156,2.353,157,2.725,158,2.725,159,2.725,160,2.725,161,2.725,162,4.094,163,2.725,164,2.725,165,2.725,166,2.725,167,3.802,168,4.137,169,2.725,170,2.725,171,2.725,172,2.725,173,1.778,174,2.725,175,2.725,176,2.725,177,3.166,178,2.725,179,3.534,180,2.671,181,3.534,182,4.094,183,5.466,184,4.094,185,4.094,186,2.725,187,2.725]],["title/modules/ApiModule.html",[188,1.506,189,2.5]],["body/modules/ApiModule.html",[0,0.225,3,0.19,4,0.19,5,0.166,22,0.017,26,0.19,28,0.013,29,0.013,54,0.856,56,1.136,58,2.121,188,2.414,189,4.007,190,2.35,191,4.902,192,4.337,193,4.736,194,4.736,195,5.303,196,2.979,197,4.902,198,4.902,199,4.902,200,3.198]],["title/modules/AppModule.html",[188,1.506,201,2.706]],["body/modules/AppModule.html",[0,0.175,3,0.148,4,0.148,5,0.13,22,0.017,26,0.148,28,0.011,29,0.011,54,0.835,56,0.886,188,2.051,189,4.501,190,1.832,196,4.192,200,3.405,201,5.416,202,3.171,203,3.3,204,3.3,205,4.192,206,4.501,207,4.192,208,4.501,209,3.685,210,2.699,211,2.699,212,3.822,213,3.822,214,3.822,215,3.822,216,3.822,217,3.822,218,3.822]],["title/entities/Category.html",[11,1.011,219,2.5]],["body/entities/Category.html",[0,0.194,3,0.164,4,0.164,5,0.143,11,1.474,12,0.296,13,1.412,15,0.824,18,1.036,19,0.659,22,0.017,23,0.473,26,0.164,28,0.012,29,0.012,54,0.66,78,2.578,99,1.58,100,1.474,104,2.44,219,3.644,220,2.759,221,3.652,222,5.4,223,4.23,224,5.4,225,4.23,226,4.23,227,4.32,228,4.823,229,4.823,230,4.23,231,3.652,232,5.586,233,3.271]],["title/interfaces/Category-1.html",[11,0.845,98,1.005,234,2.261]],["body/interfaces/Category-1.html",[0,0.221,3,0.187,4,0.187,5,0.163,11,1.844,12,0.337,13,1.535,14,3.19,15,0.921,16,1.166,18,1.296,22,0.016,23,0.459,26,0.236,28,0.013,29,0.013,88,2.927,89,3.725,90,1.893,91,1.893,93,1.727,98,1.511,99,1.766,100,1.756,235,2.438]],["title/controllers/CategoryController.html",[194,2.706,236,2.5]],["body/controllers/CategoryController.html",[0,0.146,1,2.073,3,0.123,4,0.123,5,0.108,7,1.608,10,1.249,11,0.838,12,0.222,15,0.604,16,0.769,19,0.483,21,0.563,22,0.017,23,0.24,24,0.512,26,0.123,28,0.01,29,0.01,36,1.158,37,2.959,39,1.72,49,1.109,54,0.839,56,0.736,58,1.375,66,1.503,69,1.377,70,2.197,74,1.375,76,4.156,78,1.889,83,1.309,87,1.703,133,2.243,149,2.457,177,2.457,192,2.243,194,3.236,236,2.073,237,2.743,238,2.743,239,6.241,240,5.886,241,3.177,242,2.743,243,3.957,244,3.177,245,3.957,246,3.177,247,3.177,248,2.743,249,3.957,250,4.642,251,4.642,252,2.243,253,2.743,254,2.243,255,3.177,256,2.99,257,3.177,258,3.177,259,3.177,260,1.931,261,2.743,262,2.743,263,3.957,264,2.743,265,2.073,266,2.743,267,3.177,268,3.177,269,2.743,270,2.243,271,3.177,272,3.177,273,2.743,274,2.743,275,1.801,276,3.177,277,3.177,278,2.743,279,3.177,280,2.743,281,3.177,282,2.743]],["title/classes/CategoryDto.html",[0,0.176,122,2.5]],["body/classes/CategoryDto.html",[0,0.225,2,0.995,3,0.19,4,0.19,5,0.166,12,0.343,13,1.552,15,0.884,18,1.139,19,0.647,22,0.016,23,0.464,26,0.19,28,0.013,29,0.013,54,0.579,78,2.531,82,3.471,83,2.02,99,1.695,100,1.621,122,4.007,283,4.232,284,4.902,285,4.902]],["title/classes/CategoryPresenter.html",[0,0.176,254,2.706]],["body/classes/CategoryPresenter.html",[0,0.197,2,0.872,3,0.167,4,0.167,5,0.146,11,1.133,12,0.301,13,1.426,15,0.882,16,1.039,18,1.046,19,0.664,21,0.761,22,0.017,23,0.476,24,0.692,26,0.167,28,0.012,29,0.012,54,0.745,62,2.059,63,2.61,78,2.326,82,3.332,83,1.77,99,1.592,100,1.489,119,3.322,254,3.984,260,4.067,261,3.708,286,3.708,287,5.643,288,5.643,289,4.295,290,3.033,291,3.708,292,3.322]],["title/injectables/CategoryRepository.html",[46,2.5,293,1.374]],["body/injectables/CategoryRepository.html",[0,0.095,3,0.081,4,0.081,5,0.07,10,2.031,11,1.767,12,0.145,15,0.836,16,0.803,18,0.768,19,0.632,21,1.024,22,0.017,23,0.437,24,0.931,26,0.081,28,0.007,29,0.007,34,0.745,36,0.838,37,3.125,39,2.169,42,1.889,46,2.164,49,1.399,50,2.888,54,0.71,56,0.481,61,1.467,62,3.107,63,1.263,66,0.681,69,1.736,70,2.477,99,1.195,100,1.453,104,1.358,113,1.778,114,1.467,168,2.924,275,2.272,293,1.189,294,1.114,295,1.794,296,4.081,297,2.864,298,2.864,299,2.342,300,2.864,301,2.864,302,2.864,303,2.078,304,4.081,305,2.078,306,2.864,307,2.078,308,2.864,309,2.078,310,2.864,311,2.078,312,2.864,313,2.078,314,2.864,315,2.078,316,2.864,317,2.078,318,2.864,319,3.317,320,2.078,321,3.317,322,1.794,323,1.356,324,1.794,325,1.607,326,1.607,327,1.794,328,2.078,329,2.078,330,2.078,331,1.794,332,1.794,333,2.078,334,1.794,335,2.078,336,2.078,337,2.078,338,2.078,339,2.078,340,2.078,341,2.078,342,2.078,343,2.078,344,2.078,345,2.078,346,2.078,347,2.078,348,3.317,349,2.078,350,2.078,351,2.864,352,1.794,353,1.794,354,2.078,355,2.078,356,2.078,357,2.078,358,2.078,359,2.342,360,2.078,361,2.078,362,2.078,363,2.078,364,2.078,365,1.794]],["title/classes/CategoryResponse.html",[0,0.176,260,2.329]],["body/classes/CategoryResponse.html",[0,0.21,2,0.929,3,0.178,4,0.178,5,0.155,12,0.32,13,1.486,14,3.401,15,0.935,16,1.108,17,3.541,18,1.272,19,0.684,21,0.811,22,0.016,23,0.491,24,0.738,26,0.178,27,3.233,28,0.013,29,0.013,66,2.38,99,1.792,100,1.809,260,3.574,366,3.953,367,4.579,368,5.882]],["title/classes/DeleteTodoCommand.html",[0,0.176,369,2.5]],["body/classes/DeleteTodoCommand.html",[0,0.231,2,1.022,3,0.195,4,0.195,5,0.171,12,0.352,13,1.578,14,2.994,15,0.663,16,1.218,19,0.658,21,0.892,22,0.016,23,0.472,24,0.811,26,0.195,27,3.555,28,0.013,29,0.013,99,1.794,100,1.873,369,4.075,370,4.347,371,3.555,372,5.035,373,5.035]],["title/classes/DeleteTodoCommandHandler.html",[0,0.176,374,2.706]],["body/classes/DeleteTodoCommandHandler.html",[0,0.154,2,0.68,3,0.13,4,0.13,5,0.114,8,3.106,12,0.234,15,0.73,16,1.152,19,0.583,21,0.981,22,0.017,23,0.418,24,0.892,26,0.13,28,0.01,29,0.01,34,1.706,35,3.91,36,1.203,37,2.52,38,2.711,39,2.39,40,3.361,43,3.365,44,3.053,47,3.361,49,1.152,50,2.166,53,1.695,54,0.753,55,1.907,56,0.776,57,2.365,58,1.45,59,2.036,66,1.561,67,2.365,68,2.365,69,1.43,70,1.606,73,2.365,74,1.45,99,1.61,105,2.185,106,2.891,108,2.409,111,1.695,112,1.907,116,2.185,369,4.683,374,3.361,375,2.892,376,3.35,377,3.35,378,4.76,379,3.35,380,3.35,381,3.35,382,2.59,383,3.35,384,3.35,385,3.35]],["title/modules/ExceptionsModule.html",[188,1.506,205,2.329]],["body/modules/ExceptionsModule.html",[0,0.232,3,0.196,4,0.196,5,0.172,22,0.017,26,0.196,28,0.013,29,0.013,44,3.262,54,0.804,56,1.172,59,3.074,188,2.462,190,2.425,205,3.806,386,5.058,387,4.422,388,5.058,389,3.571,390,4.367,391,4.367,392,4.367]],["title/injectables/ExceptionsService.html",[293,1.374,387,2.706]],["body/injectables/ExceptionsService.html",[0,0.161,3,0.136,4,0.136,5,0.119,10,2.419,12,0.246,15,0.811,19,0.648,21,1.09,22,0.017,23,0.465,24,0.992,26,0.136,28,0.01,29,0.01,34,1.258,36,1.243,44,2.358,49,1.489,53,3.563,54,0.671,56,0.813,59,2.132,293,1.763,294,1.88,387,3.473,393,3.029,394,4.903,395,4.903,396,4.903,397,4.903,398,4.903,399,4.862,400,3.508,401,3.505,402,4.903,403,3.508,404,2.722,405,4.903,406,3.508,407,4.903,408,3.508,409,3.508,410,4.76]],["title/classes/GetAllCategoryQuery.html",[0,0.176,256,2.5]],["body/classes/GetAllCategoryQuery.html",[0,0.266,2,1.177,3,0.225,4,0.225,5,0.197,22,0.015,26,0.225,28,0.014,29,0.014,256,4.436,411,5.005]],["title/classes/GetAllCategoryQueryHandler.html",[0,0.176,412,2.706]],["body/classes/GetAllCategoryQueryHandler.html",[0,0.18,2,0.798,3,0.152,4,0.152,5,0.133,10,1.545,12,0.275,15,0.701,16,1.287,19,0.56,21,0.942,22,0.017,23,0.402,24,0.857,26,0.152,28,0.011,29,0.011,34,1.906,36,1.344,37,2.743,38,3.028,39,1.475,42,3.678,49,0.951,50,2.42,54,0.798,55,2.238,56,0.911,58,1.701,60,2.389,61,2.775,65,3.393,66,1.289,69,1.181,70,1.884,256,4.403,260,3.232,273,3.393,275,1.545,365,3.393,412,3.755,413,3.393,414,4.662,415,3.931,416,3.931,417,5.319,418,4.592,419,3.931,420,3.393,421,3.039,422,3.931,423,3.931,424,3.931,425,3.931]],["title/classes/GetAllTodoQuery.html",[0,0.176,426,2.5]],["body/classes/GetAllTodoQuery.html",[0,0.266,2,1.177,3,0.225,4,0.225,5,0.197,22,0.015,26,0.225,28,0.014,29,0.014,426,4.436,427,5.005]],["title/classes/GetAllTodoQueryHandler.html",[0,0.176,428,2.706]],["body/classes/GetAllTodoQueryHandler.html",[0,0.173,2,0.765,3,0.146,4,0.146,5,0.128,10,1.482,12,0.264,15,0.777,16,1.251,19,0.544,21,0.916,22,0.017,23,0.391,24,0.833,26,0.146,28,0.011,29,0.011,34,1.853,36,1.306,37,2.685,38,2.944,39,1.415,49,0.912,50,2.353,54,0.786,55,2.147,56,0.874,58,1.632,66,1.236,69,1.133,70,1.807,99,0.953,104,1.236,105,2.46,106,3.043,108,2.617,111,1.908,112,2.147,116,2.46,275,1.482,414,4.563,418,4.464,420,3.255,421,2.916,426,4.34,428,3.65,429,3.255,430,3.77,431,3.77,432,2.944,433,3.255,434,3.77,435,3.255,436,3.77,437,3.77,438,3.255,439,3.255,440,3.255,441,3.255,442,2.916,443,3.77]],["title/classes/GetTodoByIdQuery.html",[0,0.176,444,2.5]],["body/classes/GetTodoByIdQuery.html",[0,0.231,2,1.022,3,0.195,4,0.195,5,0.171,12,0.352,13,1.578,14,2.994,15,0.663,16,1.218,19,0.658,21,0.892,22,0.016,23,0.472,24,0.811,26,0.195,27,3.555,28,0.013,29,0.013,99,1.794,100,1.873,371,3.555,444,4.075,445,4.347,446,5.035,447,5.035]],["title/classes/GetTodoByIdQueryHandler.html",[0,0.176,448,2.706]],["body/classes/GetTodoByIdQueryHandler.html",[0,0.17,2,0.753,3,0.144,4,0.144,5,0.126,10,1.457,12,0.259,15,0.771,16,1.237,19,0.538,21,0.905,22,0.017,23,0.386,24,0.823,26,0.144,28,0.011,29,0.011,34,1.832,36,1.291,37,2.661,38,2.91,39,1.391,49,0.897,50,2.326,54,0.782,55,2.111,56,0.859,58,1.604,66,1.215,69,1.535,70,1.777,99,1.291,104,1.675,105,2.419,106,3.022,108,2.587,111,1.877,112,2.111,116,2.419,168,2.618,275,2.009,414,4.523,421,2.867,432,2.91,433,3.201,438,3.201,439,3.201,440,3.201,441,3.201,442,2.867,444,4.314,448,3.609,449,3.201,450,3.707,451,5.111,452,3.707,453,5.111,454,3.707,455,3.707,456,3.201]],["title/interfaces/ICategoryRepsoitory.html",[42,2.182,98,1.203]],["body/interfaces/ICategoryRepsoitory.html",[3,0.148,4,0.148,5,0.129,11,1.005,12,0.267,15,0.88,18,1.1,19,0.703,21,1.129,22,0.016,23,0.482,24,1.027,26,0.202,28,0.011,29,0.011,36,1.316,42,3.378,49,1.615,50,3.353,54,0.45,60,2.315,62,3.056,63,2.315,69,1.144,98,1.195,99,1.316,100,1.818,235,1.928,296,5.505,297,4.495,298,4.495,299,3.676,300,4.495,308,4.495,310,4.495,312,4.495,314,4.495,457,2.946,458,3.809,459,3.809,460,3.809,461,3.809,462,3.809]],["title/interfaces/IDatabaseConfig.html",[98,1.203,463,2.964]],["body/interfaces/IDatabaseConfig.html",[3,0.128,4,0.128,5,0.112,12,0.231,15,0.621,18,1.419,19,0.714,22,0.017,26,0.128,28,0.01,29,0.01,36,1.19,49,1.798,93,2.147,98,1.035,100,1.58,144,2.849,235,1.67,463,3.642,464,2.849,465,5.989,466,5.989,467,5.989,468,5.989,469,5.989,470,5.989,471,5.989,472,3.3,473,3.3,474,3.3,475,3.3,476,3.3,477,3.3,478,3.3,479,5.852,480,6.585,481,3.3,482,3.3,483,3.3,484,3.3,485,2.552,486,3.3]],["title/interfaces/IError.html",[98,1.203,148,2.706]],["body/interfaces/IError.html",[3,0.202,4,0.202,5,0.176,12,0.364,13,1.61,18,1.39,22,0.016,23,0.481,26,0.202,28,0.014,29,0.014,74,3.107,98,1.632,148,4.498,167,5.552,235,2.632,487,4.489]],["title/interfaces/IException.html",[44,1.837,98,1.203]],["body/interfaces/IException.html",[3,0.151,4,0.151,5,0.132,12,0.273,15,0.849,19,0.678,21,1.141,22,0.016,23,0.487,24,1.038,26,0.205,28,0.011,29,0.011,36,1.338,44,3.088,49,1.559,53,3.656,54,0.461,69,1.172,98,1.225,235,1.975,394,4.57,395,4.57,396,4.57,397,4.57,398,4.57,399,4.971,401,3.667,402,4.57,404,2.879,405,4.57,407,4.57,488,3.018,489,3.903,490,3.903,491,3.903,492,3.903]],["title/interfaces/IFormatExceptionMessage.html",[98,1.203,399,2.5]],["body/interfaces/IFormatExceptionMessage.html",[3,0.2,4,0.2,5,0.175,12,0.361,13,1.601,18,1.272,22,0.016,23,0.479,24,1.021,26,0.2,28,0.014,29,0.014,74,3.097,98,1.616,100,1.81,167,5.534,235,2.608,399,4.133,493,4.448]],["title/interfaces/ILogger.html",[98,1.203,494,2.706]],["body/interfaces/ILogger.html",[3,0.131,4,0.131,5,0.115,12,0.237,15,0.843,18,1.462,19,0.674,21,1.133,22,0.016,23,0.483,24,1.031,26,0.131,28,0.01,29,0.01,36,1.213,49,1.548,53,3.643,74,3.25,98,1.064,235,1.716,270,3.39,404,1.625,494,3.39,495,2.927,496,4.145,497,4.145,498,4.145,499,4.145,500,4.145,501,3.391,502,3.889,503,4.145,504,4.813,505,3.391,506,4.145,507,3.391,508,4.145,509,3.391,510,4.145,511,3.391]],["title/interfaces/ITodoRepository.html",[98,1.203,106,1.837]],["body/interfaces/ITodoRepository.html",[3,0.13,4,0.13,5,0.113,12,0.234,15,0.838,18,1.226,19,0.696,21,1.127,22,0.016,23,0.481,24,1.025,26,0.184,28,0.01,29,0.01,36,1.2,49,1.6,50,3.335,54,0.395,69,1.003,90,2.173,91,2.173,93,1.982,98,1.048,99,1.522,100,1.934,104,1.095,106,2.65,111,1.69,113,3.227,114,2.358,235,1.69,299,3.354,404,2.277,512,2.583,513,4.101,514,5.199,515,4.101,516,4.101,517,4.773,518,4.101,519,3.34,520,3.34,521,4.101,522,3.34,523,4.101,524,3.34,525,2.883,526,4.101,527,3.34,528,2.883,529,3.148,530,3.34]],["title/modules/LoggerModule.html",[188,1.506,206,2.5]],["body/modules/LoggerModule.html",[0,0.228,3,0.193,4,0.193,5,0.168,22,0.016,26,0.193,28,0.013,29,0.013,54,0.732,56,1.151,140,4.221,188,2.434,190,2.381,202,3.764,206,4.836,209,4.373,210,3.507,211,3.507,389,4.373,531,4.289,532,4.289,533,4.968,534,4.968]],["title/injectables/LoggerService.html",[140,2.182,293,1.374]],["body/injectables/LoggerService.html",[0,0.133,3,0.112,4,0.112,5,0.098,12,0.202,15,0.791,18,1.444,19,0.632,21,1.063,22,0.017,23,0.454,24,0.967,26,0.112,28,0.009,29,0.009,34,1.035,36,1.08,49,1.453,53,3.039,54,0.505,56,0.669,74,3.257,140,2.434,142,4.35,270,3.018,293,1.532,294,1.548,404,1.385,479,2.493,494,3.018,496,3.691,497,3.691,498,3.691,499,3.691,500,3.691,502,4.218,503,3.691,504,4.856,506,3.691,508,3.691,510,3.691,535,2.493,536,4.275,537,2.888,538,2.888,539,2.888,540,2.888,541,2.888,542,2.888,543,2.888,544,2.888,545,2.888,546,4.275,547,3.691,548,2.888,549,2.888,550,2.888,551,2.888,552,2.888]],["title/injectables/LoggingInterceptor.html",[293,1.374,553,2.964]],["body/injectables/LoggingInterceptor.html",[0,0.148,3,0.125,4,0.125,5,0.11,12,0.226,15,0.715,16,0.782,18,1.007,19,0.572,21,0.961,22,0.017,23,0.41,24,0.875,26,0.125,28,0.01,29,0.01,34,1.159,36,1.173,39,2.037,49,1.123,54,0.549,56,0.749,66,1.06,69,1.965,139,2.791,140,3.378,142,3.589,151,3.871,156,2.791,179,2.791,180,3.028,181,4.007,234,2.283,275,1.824,293,1.664,294,1.732,502,1.964,553,3.589,554,2.791,555,4.641,556,3.277,557,3.233,558,4.641,559,3.233,560,3.589,561,4.189,562,3.833,563,4.189,564,3.233,565,3.833,566,3.277,567,4.641,568,2.109,569,2.283,570,2.283,571,2.283,572,2.283,573,2.283,574,5.933,575,3.233,576,4.641,577,3.233,578,4.641,579,2.283,580,3.233,581,2.283,582,4.641,583,3.233,584,3.233,585,3.233,586,3.233,587,3.233,588,3.233,589,3.233]],["title/classes/MessagePresenter.html",[0,0.176,265,2.5]],["body/classes/MessagePresenter.html",[0,0.239,2,1.056,3,0.202,4,0.202,5,0.176,12,0.364,13,1.61,18,1.182,19,0.548,22,0.016,23,0.393,26,0.202,28,0.014,29,0.014,54,0.615,74,2.981,78,2.143,82,3.302,83,2.143,265,4.156,590,4.489,591,5.2]],["title/modules/RepositoriesModule.html",[188,1.506,207,2.329]],["body/modules/RepositoriesModule.html",[0,0.2,3,0.169,4,0.169,5,0.148,11,1.504,22,0.017,26,0.169,28,0.012,29,0.012,46,3.719,54,0.875,56,1.011,60,3.859,61,3.08,104,1.43,108,2.886,111,3.214,112,2.484,188,2.241,190,2.091,200,2.846,207,3.464,323,2.846,325,3.374,326,3.374,389,3.08,390,4.922,391,4.922,392,3.766,592,4.363,593,3.766,594,4.363,595,4.363,596,4.363]],["title/classes/ResponseFormat.html",[0,0.176,597,2.182]],["body/classes/ResponseFormat.html",[0,0.213,2,0.656,3,0.125,4,0.125,5,0.11,12,0.226,13,1.173,18,1.213,19,0.662,22,0.017,23,0.475,26,0.18,28,0.01,29,0.01,34,1.159,49,0.782,54,0.701,56,0.749,69,1.631,78,2.445,82,3.365,83,1.332,93,1.664,151,2.109,173,3.871,180,2.109,275,1.271,293,1.664,359,3.277,401,3.378,502,2.82,556,2.283,561,3.277,562,3.277,563,3.277,565,3.833,566,3.277,568,2.109,569,2.283,570,3.277,571,2.283,572,2.283,573,2.283,579,2.283,581,2.283,597,2.643,598,2.5,599,4.189,600,3.871,601,4.189,602,3.233,603,3.233,604,3.233,605,3.233,606,3.233,607,2.5,608,2.791,609,1.964,610,3.277,611,2.5,612,2.5,613,2.5]],["title/classes/ResponseFormat-1.html",[0,0.147,234,2.261,597,1.823]],["body/classes/ResponseFormat-1.html",[0,0.195,2,0.862,3,0.165,4,0.165,5,0.144,12,0.297,13,1.415,18,1.319,19,0.729,22,0.016,23,0.523,26,0.165,28,0.012,29,0.012,54,0.502,78,2.746,82,3.57,83,1.75,93,2.007,173,4.088,359,3.954,401,3.568,597,3.189,599,4.425,600,4.088,601,4.425,614,3.666,615,4.246,616,4.246,617,4.246,618,4.246,619,4.246]],["title/injectables/ResponseInterceptor.html",[293,1.374,609,2.329]],["body/injectables/ResponseInterceptor.html",[0,0.225,3,0.136,4,0.136,5,0.119,12,0.245,15,0.461,18,1.051,19,0.368,21,0.619,22,0.017,23,0.264,24,0.563,26,0.19,28,0.01,29,0.01,34,1.254,36,1.24,49,1.188,54,0.727,56,0.81,69,1.703,82,3.103,83,1.441,93,1.254,151,2.282,173,3.202,180,2.282,275,1.375,293,1.759,294,1.874,359,2.469,401,2.794,502,3.445,556,4.003,560,2.705,561,4.34,562,4.34,563,4.34,565,4.571,566,3.465,568,2.282,569,2.469,570,3.465,571,2.469,572,2.469,573,2.469,579,2.469,581,2.469,597,1.991,598,2.705,599,3.465,600,3.202,601,3.465,607,2.705,608,3.019,609,2.982,610,3.465,611,2.705,612,2.705,613,2.705,620,3.497]],["title/injectables/ResponseInterceptor-1.html",[234,2.261,293,1.148,609,1.946]],["body/injectables/ResponseInterceptor-1.html",[0,0.185,3,0.156,4,0.156,5,0.137,12,0.282,15,0.531,19,0.424,21,0.714,22,0.017,23,0.305,24,0.649,26,0.156,28,0.012,29,0.012,34,1.445,36,1.367,49,0.975,54,0.722,56,0.934,69,1.834,151,2.629,173,2.629,180,2.629,275,1.584,293,1.939,294,2.16,401,2.295,502,3.287,556,4.311,560,3.117,561,4.608,562,4.311,563,4.608,565,4.311,566,3.819,568,2.629,569,2.846,570,3.819,571,2.846,572,2.846,573,2.846,579,2.846,581,2.846,597,3.08,599,2.846,600,2.629,601,2.846,607,3.117,609,3.287,611,3.117,612,3.117,613,3.117,621,3.48,622,4.03]],["title/entities/Todo.html",[104,1.257,219,2.5]],["body/entities/Todo.html",[0,0.149,3,0.126,4,0.126,5,0.11,11,1.854,12,0.228,13,1.178,15,0.718,18,0.864,19,0.69,22,0.017,23,0.51,26,0.126,28,0.01,29,0.01,54,0.551,78,2.701,87,2.919,90,2.141,91,2.141,93,1.671,99,1.376,100,1.23,104,1.528,132,3.604,133,3.291,219,2.121,220,2.121,222,4.023,224,2.807,228,4.023,229,4.023,233,2.515,529,2.654,623,2.807,624,4.87,625,4.87,626,3.252,627,4.66,628,4.66,629,3.252,630,3.252,631,4.66,632,4.66,633,4.66,634,4.66,635,3.252,636,4.2,637,3.252,638,3.252,639,3.252,640,4.66,641,3.252,642,4.66,643,3.252,644,3.252,645,3.252,646,3.252,647,4.66,648,4.66,649,4.66,650,4.66,651,3.252]],["title/classes/TodoCategory.html",[0,0.176,62,1.837]],["body/classes/TodoCategory.html",[0,0.169,2,0.748,3,0.143,4,0.143,5,0.125,7,1.864,12,0.258,14,3.467,15,0.768,16,1.231,17,2.848,18,1.223,19,0.662,21,0.652,22,0.017,23,0.278,24,0.593,26,0.143,28,0.011,29,0.011,36,1.285,39,2.187,49,1.41,54,0.435,62,2.439,99,1.473,100,1.74,104,1.911,113,3.656,168,4.438,275,2.291,290,2.6,291,3.18,404,2.439,652,3.18,653,5.087,654,3.934,655,5.427,656,6.286,657,5.427,658,3.683,659,3.683,660,3.683,661,3.683,662,3.683]],["title/controllers/TodoController.html",[193,2.706,236,2.5]],["body/controllers/TodoController.html",[0,0.098,3,0.082,4,0.082,5,0.072,7,1.076,10,2.054,11,0.561,12,0.149,15,0.688,16,0.514,19,0.55,21,0.848,22,0.017,23,0.362,24,0.771,26,0.082,28,0.007,29,0.007,36,0.854,37,3.141,39,1.267,49,1.264,54,0.807,56,0.492,58,0.92,66,1.107,69,1.438,70,2.296,74,1.819,78,2.153,83,0.876,87,1.139,88,1.292,90,1.652,91,1.882,99,1.406,100,1.468,104,1.107,119,1.644,120,3.381,133,3.381,149,1.644,177,1.644,192,1.501,193,2.385,236,1.387,238,1.835,242,1.835,243,4.511,245,4.511,248,1.835,249,2.916,250,3.629,251,3.629,252,1.501,253,1.835,262,1.835,263,2.916,264,1.835,265,1.387,266,1.835,269,1.835,270,1.501,274,1.835,275,2.054,278,3.629,280,1.835,282,3.629,292,1.644,369,1.387,426,2.204,432,1.21,435,1.835,444,1.387,529,1.923,610,1.501,657,2.916,663,1.835,664,5.225,665,3.378,666,4.789,667,3.378,668,2.126,669,2.126,670,2.126,671,2.126,672,2.126,673,2.126,674,2.126,675,2.126,676,2.126,677,2.126,678,2.126,679,4.118,680,2.126,681,2.126,682,2.126,683,4.203,684,3.378,685,2.126,686,2.126,687,1.501,688,2.126,689,2.126,690,2.126,691,1.387,692,2.126,693,2.126,694,2.126,695,1.835,696,2.126,697,2.126,698,2.126,699,2.126,700,3.378,701,2.126,702,2.126,703,3.378,704,2.126,705,2.126,706,2.126,707,3.378,708,2.126,709,2.126,710,2.126,711,2.126,712,2.126,713,2.126]],["title/classes/TodoPresenter.html",[0,0.176,687,2.706]],["body/classes/TodoPresenter.html",[0,0.159,2,0.706,3,0.135,4,0.135,5,0.118,11,1.491,12,0.243,13,1.235,15,0.458,16,0.841,18,0.906,19,0.725,21,0.615,22,0.017,23,0.52,24,0.56,26,0.135,28,0.01,29,0.01,54,0.668,78,2.761,82,3.567,83,1.432,90,2.221,91,2.221,93,1.751,99,1.428,100,1.289,104,1.139,122,3.686,227,2.688,290,2.454,432,3.49,624,4.369,625,4.369,636,4.328,687,3.45,695,3,714,3,715,4.886,716,4.886,717,3.475,718,3.475,719,3.475,720,3.475,721,3.475,722,3.475,723,3.475,724,3,725,3,726,3,727,3,728,3,729,3.475,730,3]],["title/injectables/TodoRepository.html",[108,1.94,293,1.374]],["body/injectables/TodoRepository.html",[0,0.077,3,0.065,4,0.065,5,0.057,10,1.958,11,1.668,12,0.117,15,0.756,16,0.674,18,0.924,19,0.604,21,0.979,22,0.017,23,0.417,24,0.89,26,0.065,28,0.006,29,0.006,34,0.601,36,0.704,37,3.075,39,2.073,49,1.337,50,2.823,54,0.653,56,0.388,62,0.804,63,1.019,66,0.913,69,1.864,70,2.909,90,1.958,91,1.815,93,1.281,99,1.494,100,1.637,104,2.108,106,1.335,108,1.41,112,0.955,113,3.252,114,1.184,227,1.296,275,2.074,292,1.296,293,0.998,294,0.898,299,1.966,301,2.404,302,2.404,304,4.557,306,3.084,316,2.404,318,1.447,322,1.447,323,1.094,324,1.447,325,1.296,326,1.296,327,1.447,331,2.404,332,1.447,334,1.447,351,4.3,352,2.404,353,1.447,382,2.154,404,1.335,410,1.296,442,1.296,456,1.447,513,2.404,514,3.592,515,2.404,516,2.404,517,3.084,518,2.404,521,2.404,523,2.404,525,3.986,526,2.404,528,1.447,529,3.146,725,2.404,727,2.404,731,1.447,732,1.676,733,1.676,734,2.785,735,1.676,736,1.676,737,1.676,738,1.676,739,1.676,740,1.676,741,2.785,742,1.676,743,1.676,744,1.676,745,1.676,746,1.676,747,1.676,748,3.573,749,2.785,750,1.676,751,1.676,752,1.676,753,1.676,754,2.785,755,1.676,756,1.676,757,1.676,758,1.676,759,1.676,760,2.785,761,2.785,762,1.676,763,1.676,764,1.676,765,1.676,766,1.676,767,1.676,768,1.676,769,1.676,770,1.676,771,1.676]],["title/classes/TodoResponse.html",[0,0.176,432,2.182]],["body/classes/TodoResponse.html",[0,0.161,2,0.712,3,0.136,4,0.136,5,0.119,11,1.913,12,0.246,13,1.243,14,3.618,15,0.648,16,1.19,18,1.202,19,0.708,21,0.621,22,0.016,23,0.508,24,1.044,26,0.191,28,0.01,29,0.01,66,2.474,90,2.547,91,2.547,93,2.206,98,1.101,99,1.638,100,1.71,371,2.477,404,2.358,432,2.801,636,4.346,772,3.029,773,6.481,774,3.508,775,3.508,776,3.508,777,3.508,778,3.508,779,3.508]],["title/classes/TodoTask.html",[0,0.176,113,2.054]],["body/classes/TodoTask.html",[0,0.134,2,0.591,3,0.113,4,0.113,5,0.099,7,1.473,10,1.144,11,1.349,12,0.204,14,3.579,15,0.384,16,1.04,18,1.117,19,0.687,21,0.515,22,0.017,23,0.22,24,0.469,26,0.113,28,0.009,29,0.009,36,1.086,39,2.366,43,1.769,49,1.526,54,0.344,62,3.127,75,1.657,90,2.219,91,2.009,92,2.513,93,2.159,99,1.292,100,1.589,104,1.41,113,2.304,275,2.478,290,2.055,404,2.451,410,2.251,624,3.954,625,3.954,636,4.91,654,3.325,655,4.875,724,2.513,726,2.513,728,2.513,730,2.513,780,2.513,781,5.647,782,5.647,783,5.647,784,5.647,785,5.647,786,2.911,787,2.911,788,2.911,789,2.911,790,2.911,791,2.911,792,2.911,793,2.911,794,2.911,795,2.911]],["title/modules/TypeormConfigModule.html",[188,1.506,208,2.5]],["body/modules/TypeormConfigModule.html",[0,0.208,3,0.175,4,0.175,5,0.153,11,1.54,22,0.017,23,0.342,26,0.175,28,0.012,29,0.012,54,0.835,56,1.048,69,1.358,87,3.127,104,1.913,188,2.294,190,2.168,200,2.95,208,3.807,220,2.95,231,3.904,323,2.95,485,3.497,593,3.904,796,3.497,797,4.523,798,3.904,799,4.996,800,4.523,801,3.904,802,3.904,803,3.904,804,3.904,805,3.904,806,3.904,807,3.904,808,3.904,809,4.523,810,4.523]],["title/classes/UpdateTodoCommand.html",[0,0.176,691,2.5]],["body/classes/UpdateTodoCommand.html",[0,0.184,2,0.815,3,0.156,4,0.156,5,0.136,12,0.281,13,1.364,14,3.625,15,0.529,16,1.306,18,1.208,19,0.716,21,0.711,22,0.016,23,0.514,24,1.095,26,0.156,28,0.012,29,0.012,90,2.672,91,2.672,93,2.336,99,1.647,100,1.918,371,2.835,404,2.587,529,3.871,691,3.52,811,3.467,812,4.016,813,4.016,814,4.016,815,4.016,816,4.016]],["title/classes/UpdateTodoCommandHandler.html",[0,0.176,817,2.706]],["body/classes/UpdateTodoCommandHandler.html",[0,0.145,2,0.639,3,0.122,4,0.122,5,0.107,8,2.972,12,0.22,15,0.705,16,1.102,19,0.564,21,0.948,22,0.017,23,0.404,24,0.862,26,0.122,28,0.01,29,0.01,34,1.633,35,3.778,36,1.151,37,2.435,38,2.594,39,2.334,40,4.14,43,3.252,44,2.982,47,3.216,49,1.102,50,2.073,53,1.595,54,0.735,55,1.794,56,0.73,57,2.224,58,1.363,59,1.914,66,1.493,67,2.224,68,2.224,69,1.368,73,3.216,74,1.971,75,1.794,90,2.548,91,1.79,99,1.481,105,2.055,106,2.81,108,2.306,111,1.595,112,1.794,116,2.055,529,3.338,610,2.224,691,4.55,817,3.216,818,2.72,819,3.15,820,3.15,821,4.555,822,3.15,823,4.555,824,5.351,825,3.15,826,3.15,827,3.15]],["title/classes/UpdateTodoDto.html",[0,0.176,679,2.706]],["body/classes/UpdateTodoDto.html",[0,0.241,2,0.784,3,0.15,4,0.15,5,0.131,12,0.27,13,1.328,18,0.975,19,0.675,22,0.016,23,0.485,26,0.15,28,0.011,29,0.011,54,0.621,66,2.464,75,2.993,78,2.643,79,4.064,80,2.987,82,3.216,83,1.592,84,4.62,85,4.064,86,2.727,87,2.817,90,2.348,91,2.348,93,1.884,99,1.51,100,1.692,129,4.537,529,3.402,679,3.711,828,3.334,829,3.862,830,3.862,831,3.862,832,3.862,833,3.862,834,3.862,835,3.862,836,5.974]],["title/modules/UsecaseModule.html",[188,1.506,196,2.329]],["body/modules/UsecaseModule.html",[0,0.189,3,0.16,4,0.16,5,0.14,22,0.017,26,0.16,28,0.012,29,0.012,54,0.864,56,0.955,58,1.783,188,2.158,190,1.975,195,4.739,196,4.444,200,3.581,202,3.336,205,4.286,207,4.286,209,3.876,210,2.909,211,2.909,389,2.909,837,4.12,838,4.12,839,4.12,840,4.12,841,4.12,842,4.245,843,4.12,844,4.245,845,4.12,846,4.245,847,4.12,848,4.245,849,4.12]],["title/coverage.html",[850,4.043]],["body/coverage.html",[0,0.341,1,1.345,5,0.07,6,1.781,10,0.811,11,1.087,22,0.017,23,0.156,28,0.007,29,0.007,30,1.456,31,1.781,42,1.174,44,1.581,46,1.345,60,1.253,62,0.989,76,1.456,77,1.781,88,1.253,89,2.55,98,1.937,101,1.456,102,1.781,104,0.676,106,0.989,108,1.044,111,1.044,113,1.105,120,1.456,121,1.781,122,1.345,134,1.595,135,1.781,140,1.174,148,1.456,193,1.456,194,1.456,219,2.151,221,1.781,236,2.151,237,1.781,252,1.456,254,1.456,256,1.345,260,1.253,265,1.345,283,1.781,286,1.781,293,2.066,295,1.781,366,1.781,369,1.345,370,1.781,374,1.456,375,1.781,382,6.013,387,1.456,393,1.781,399,1.345,411,1.781,412,1.456,413,1.781,426,1.345,427,1.781,428,1.456,429,1.781,432,1.174,444,1.345,445,1.781,448,1.456,449,1.781,457,2.55,463,1.595,464,1.781,487,1.781,488,2.55,493,1.781,494,1.456,495,1.781,512,2.55,535,1.781,553,1.595,554,1.781,590,1.781,597,1.878,598,2.55,609,2.004,614,1.781,621,1.781,623,1.781,652,1.781,663,1.781,679,1.456,687,1.456,691,1.345,714,1.781,731,1.781,772,2.847,780,1.781,796,1.595,799,1.595,811,1.781,817,1.456,818,1.781,828,1.781,842,1.595,844,1.595,846,1.595,848,1.595,850,1.595,851,2.062,852,2.062,853,2.062,854,1.781,855,6.174,856,6.777,857,5.763,858,4.707,859,6.467,860,5.49,861,4.707,862,3.298,863,3.298,864,2.062,865,2.062,866,2.062,867,2.062,868,2.062,869,2.062,870,1.781,871,2.062,872,1.781,873,2.062,874,2.062,875,4.12,876,4.12,877,1.781,878,1.781,879,1.781,880,1.781,881,2.062,882,2.062]],["title/dependencies.html",[202,2.801,883,2.764]],["body/dependencies.html",[0,0.274,22,0.017,28,0.013,29,0.013,56,1.088,58,2.032,83,1.935,86,3.315,202,2.853,233,3.63,323,3.063,568,3.063,798,4.053,884,6.576,885,4.695,886,4.695,887,4.695,888,4.695,889,5.977,890,4.695,891,4.695,892,4.695,893,4.695,894,4.695,895,4.695,896,4.695,897,4.695,898,4.695,899,4.695,900,4.695,901,4.695,902,4.695,903,4.695,904,4.695,905,4.695,906,4.695,907,4.695,908,4.695]],["title/miscellaneous/functions.html",[909,2.261,910,3.979]],["body/miscellaneous/functions.html",[12,0.41,22,0.015,28,0.015,29,0.015,870,5.058,872,6.257,909,4.136,910,5.058,911,5.858]],["title/index.html",[12,0.224,912,3.202,913,3.202]],["body/index.html",[7,2.346,22,0.017,28,0.013,29,0.013,104,1.52,547,4.002,850,3.585,914,4.636,915,4.636,916,4.636,917,4.636,918,4.636,919,4.636,920,4.636,921,4.636,922,4.636,923,4.636,924,4.636,925,7.404,926,4.636,927,4.636,928,4.636,929,7.284,930,4.636,931,4.636,932,5.929,933,4.636,934,4.636,935,4.636,936,5.929,937,5.929,938,4.636,939,4.636,940,4.636]],["title/modules.html",[190,2.506]],["body/modules.html",[22,0.014,28,0.014,29,0.014,189,3.392,190,2.493,196,3.16,201,3.672,205,3.16,206,3.392,207,3.16,208,3.392,941,7.18,942,7.18,943,7.592,944,6.888,945,6.888,946,6.888]],["title/overview.html",[947,4.514]],["body/overview.html",[2,0.879,22,0.016,28,0.012,29,0.012,140,3.602,189,4.127,190,2.075,192,3.056,196,4.428,201,5.455,202,3.447,203,3.737,204,3.737,205,4.079,206,4.546,207,4.079,208,4.127,209,4.005,210,3.056,211,3.056,220,2.824,235,2.191,294,2.32,531,3.737,532,3.737,947,3.737,948,5.672,949,5.672,950,4.329,951,4.329]],["title/properties.html",[13,1.165,883,2.764]],["body/properties.html",[7,2.919,13,1.457,22,0.016,28,0.014,29,0.014,952,5.767,953,5.767,954,5.767,955,5.767,956,5.767]],["title/miscellaneous/variables.html",[909,2.261,957,3.979]],["body/miscellaneous/variables.html",[11,0.848,12,0.225,13,0.812,18,1.004,22,0.017,23,0.538,28,0.01,29,0.01,30,2.269,42,1.83,44,2.594,60,2.809,87,2.477,93,1.657,101,2.269,104,1.054,106,1.541,111,2.339,132,5.501,220,2.097,252,3.263,275,1.263,374,2.269,401,1.83,412,2.269,428,2.269,448,2.269,457,2.485,485,3.574,488,2.485,512,2.485,600,4.09,654,2.485,796,2.485,799,4.185,801,2.775,802,2.775,803,2.775,804,2.775,805,2.775,806,2.775,807,2.775,808,2.775,817,2.269,842,3.574,844,3.574,846,3.574,848,3.574,854,2.775,877,2.775,878,2.775,879,2.775,880,2.775,909,2.269,957,2.775,958,3.214,959,5.917,960,3.214,961,3.214,962,3.214,963,3.214,964,7.009,965,3.214,966,3.214,967,3.214,968,3.214,969,4.622,970,3.214,971,3.214]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":382,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{},"injectables/TodoRepository.html":{},"coverage.html":{}}}],["0.0.1",{"_index":953,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":901,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":894,"title":{},"body":{"dependencies.html":{}}}],["0.3.6",{"_index":908,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":893,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":856,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":869,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":858,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":859,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":860,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":861,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":857,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":863,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":862,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":868,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":234,"title":{"interfaces/Category-1.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor-1.html":{}},"body":{"injectables/LoggingInterceptor.html":{}}}],["1/3",{"_index":874,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":876,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":865,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":867,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":866,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":949,"title":{},"body":{"overview.html":{}}}],["2.1.0",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":896,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":864,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":875,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":633,"title":{},"body":{"entities/Todo.html":{}}}],["28",{"_index":950,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":903,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":873,"title":{},"body":{"coverage.html":{}}}],["4.4.0",{"_index":907,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":177,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["7",{"_index":948,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":904,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["8.0.4",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["8.1.2",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":898,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":951,"title":{},"body":{"overview.html":{}}}],["_",{"_index":420,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{}}}],["adapter",{"_index":543,"title":{},"body":{"injectables/LoggerService.html":{}}}],["add",{"_index":9,"title":{},"body":{"classes/AddCategoryCommand.html":{}}}],["addcategory",{"_index":239,"title":{},"body":{"controllers/CategoryController.html":{}}}],["addcategory(@body",{"_index":279,"title":{},"body":{"controllers/CategoryController.html":{}}}],["addcategory(addcategory",{"_index":241,"title":{},"body":{"controllers/CategoryController.html":{}}}],["addcategorycommand",{"_index":1,"title":{"classes/AddCategoryCommand.html":{}},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"controllers/CategoryController.html":{},"coverage.html":{}}}],["addcategorycommand(name",{"_index":281,"title":{},"body":{"controllers/CategoryController.html":{}}}],["addcategorycommandhandler",{"_index":30,"title":{"classes/AddCategoryCommandHandler.html":{}},"body":{"classes/AddCategoryCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["addcategorydto",{"_index":76,"title":{"classes/AddCategoryDto.html":{}},"body":{"classes/AddCategoryDto.html":{},"controllers/CategoryController.html":{},"coverage.html":{}}}],["addtodo",{"_index":664,"title":{},"body":{"controllers/TodoController.html":{}}}],["addtodo(@body",{"_index":712,"title":{},"body":{"controllers/TodoController.html":{}}}],["addtodo(addtodo",{"_index":668,"title":{},"body":{"controllers/TodoController.html":{}}}],["addtodocommand",{"_index":88,"title":{"classes/AddTodoCommand.html":{}},"body":{"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"interfaces/Category-1.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["addtodocommand(content",{"_index":713,"title":{},"body":{"controllers/TodoController.html":{}}}],["addtodocommandhandler",{"_index":101,"title":{"classes/AddTodoCommandHandler.html":{}},"body":{"classes/AddTodoCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["addtododto",{"_index":120,"title":{"classes/AddTodoDto.html":{}},"body":{"classes/AddTodoDto.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["allexceptionfilter",{"_index":134,"title":{"classes/AllExceptionFilter.html":{}},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["allof",{"_index":968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":920,"title":{},"body":{"index.html":{}}}],["api/api.module",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["apiextramodels",{"_index":262,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["apiextramodels(categorypresenter",{"_index":271,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apiextramodels(todopresenter",{"_index":698,"title":{},"body":{"controllers/TodoController.html":{}}}],["apimodule",{"_index":189,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apiokresponse",{"_index":967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiproperty",{"_index":82,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"classes/TodoPresenter.html":{},"classes/UpdateTodoDto.html":{}}}],["apiproperty()@isboolean",{"_index":834,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["apiproperty()@isnumber",{"_index":829,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["apiproperty({default",{"_index":126,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["apiproperty({required",{"_index":79,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"classes/UpdateTodoDto.html":{}}}],["apiresponse",{"_index":263,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["apiresponsetype",{"_index":252,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiresponsetype(categorypresenter",{"_index":272,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apiresponsetype(messagepresenter",{"_index":278,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["apiresponsetype(todopresenter",{"_index":700,"title":{},"body":{"controllers/TodoController.html":{}}}],["apitags",{"_index":264,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["apitags('category",{"_index":268,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('todo",{"_index":697,"title":{},"body":{"controllers/TodoController.html":{}}}],["app",{"_index":927,"title":{},"body":{"index.html":{}}}],["applydecorators",{"_index":966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":201,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["architecture",{"_index":916,"title":{},"body":{"index.html":{}}}],["argumentshost",{"_index":145,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["array.isarray(data",{"_index":612,"title":{},"body":{"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["async",{"_index":37,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["author",{"_index":956,"title":{},"body":{"properties.html":{}}}],["autoloadentities",{"_index":804,"title":{},"body":{"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":942,"title":{},"body":{"modules.html":{}}}],["await",{"_index":70,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{}}}],["badrequestexception",{"_index":394,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["badrequestexception(data",{"_index":398,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["body",{"_index":248,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["boolean",{"_index":93,"title":{},"body":{"classes/AddTodoCommand.html":{},"classes/AddTodoDto.html":{},"interfaces/Category-1.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/ITodoRepository.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"entities/Todo.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoDto.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":872,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":943,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":944,"title":{},"body":{"modules.html":{}}}],["callhandler",{"_index":563,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["cascade",{"_index":229,"title":{},"body":{"entities/Category.html":{},"entities/Todo.html":{}}}],["catch",{"_index":137,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["catch(exception",{"_index":143,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["categoey",{"_index":653,"title":{},"body":{"classes/TodoCategory.html":{}}}],["categories",{"_index":273,"title":{},"body":{"controllers/CategoryController.html":{},"classes/GetAllCategoryQueryHandler.html":{}}}],["categories?.map((category",{"_index":276,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categories?.map((x",{"_index":424,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["category",{"_index":11,"title":{"entities/Category.html":{},"interfaces/Category-1.html":{}},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{},"modules/RepositoriesModule.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["category.entity",{"_index":646,"title":{},"body":{"entities/Todo.html":{}}}],["category.id",{"_index":119,"title":{},"body":{"classes/AddTodoCommandHandler.html":{},"classes/CategoryPresenter.html":{},"controllers/TodoController.html":{}}}],["category.name",{"_index":292,"title":{},"body":{"classes/CategoryPresenter.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{}}}],["category.repossitory",{"_index":594,"title":{},"body":{"modules/RepositoriesModule.html":{}}}],["category.todo",{"_index":627,"title":{},"body":{"entities/Todo.html":{}}}],["category/command",{"_index":843,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["category/query",{"_index":845,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["category?.map((entity",{"_index":330,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["categorycommandhandlers",{"_index":842,"title":{},"body":{"modules/UsecaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["categorycontroller",{"_index":194,"title":{"controllers/CategoryController.html":{}},"body":{"modules/ApiModule.html":{},"controllers/CategoryController.html":{},"coverage.html":{}}}],["categorydto",{"_index":122,"title":{"classes/CategoryDto.html":{}},"body":{"classes/AddTodoDto.html":{},"classes/CategoryDto.html":{},"classes/TodoPresenter.html":{},"coverage.html":{}}}],["categoryentity",{"_index":321,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["categoryentity.id",{"_index":341,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["categoryentity.name",{"_index":340,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["categoryentity.todo",{"_index":342,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["categoryentity.todo.map",{"_index":343,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["categoryid",{"_index":529,"title":{},"body":{"interfaces/ITodoRepository.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}}}],["categoryname",{"_index":525,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["categorypresenter",{"_index":254,"title":{"classes/CategoryPresenter.html":{}},"body":{"controllers/CategoryController.html":{},"classes/CategoryPresenter.html":{},"coverage.html":{}}}],["categorypresenter(category",{"_index":277,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categoryqueryhandlers",{"_index":844,"title":{},"body":{"modules/UsecaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["categoryrepo",{"_index":306,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["categoryrepoitory",{"_index":417,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["categoryrepository",{"_index":46,"title":{"injectables/CategoryRepository.html":{}},"body":{"classes/AddCategoryCommandHandler.html":{},"injectables/CategoryRepository.html":{},"modules/RepositoriesModule.html":{},"coverage.html":{}}}],["categoryresponse",{"_index":260,"title":{"classes/CategoryResponse.html":{}},"body":{"controllers/CategoryController.html":{},"classes/CategoryPresenter.html":{},"classes/CategoryResponse.html":{},"classes/GetAllCategoryQueryHandler.html":{},"coverage.html":{}}}],["categoryresponse(x.getname",{"_index":425,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["categprydto",{"_index":131,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["catentity",{"_index":336,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["class",{"_index":0,"title":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"classes/TodoCategory.html":{},"classes/TodoPresenter.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"classes/TodoCategory.html":{},"classes/TodoPresenter.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"overview.html":{}}}],["clean",{"_index":915,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":531,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":532,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_usecasemodule",{"_index":837,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["cluster_usecasemodule_imports",{"_index":838,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["code_error",{"_index":167,"title":{},"body":{"classes/AllExceptionFilter.html":{},"interfaces/IError.html":{},"interfaces/IFormatExceptionMessage.html":{}}}],["column",{"_index":224,"title":{},"body":{"entities/Category.html":{},"entities/Todo.html":{}}}],["column('boolean",{"_index":642,"title":{},"body":{"entities/Todo.html":{}}}],["column('varchar",{"_index":631,"title":{},"body":{"entities/Todo.html":{}}}],["command",{"_index":8,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["commandbus",{"_index":250,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["commandhandler",{"_index":57,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["commandhandler(addcategorycommand",{"_index":64,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["commandhandler(addtodocommand",{"_index":115,"title":{},"body":{"classes/AddTodoCommandHandler.html":{}}}],["commandhandler(deletetodocommand",{"_index":380,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["commandhandler(updatetodocommand",{"_index":825,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["configmodule",{"_index":797,"title":{},"body":{"modules/TypeormConfigModule.html":{}}}],["configmodule.forroot",{"_index":809,"title":{},"body":{"modules/TypeormConfigModule.html":{}}}],["const",{"_index":69,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IException.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["constructor",{"_index":16,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"injectables/LoggingInterceptor.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["constructor(category",{"_index":287,"title":{},"body":{"classes/CategoryPresenter.html":{}}}],["constructor(categoryrepo",{"_index":303,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["constructor(categoryrepoitory",{"_index":415,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["constructor(categoryrepository",{"_index":41,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["constructor(content",{"_index":92,"title":{},"body":{"classes/AddTodoCommand.html":{},"classes/TodoTask.html":{}}}],["constructor(id",{"_index":371,"title":{},"body":{"classes/DeleteTodoCommand.html":{},"classes/GetTodoByIdQuery.html":{},"classes/TodoResponse.html":{},"classes/UpdateTodoCommand.html":{}}}],["constructor(logger",{"_index":139,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["constructor(name",{"_index":17,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/CategoryResponse.html":{},"classes/TodoCategory.html":{}}}],["constructor(private",{"_index":156,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["constructor(public",{"_index":27,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/GetTodoByIdQuery.html":{}}}],["constructor(todo",{"_index":715,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["constructor(todorepo",{"_index":732,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["constructor(todorepository",{"_index":105,"title":{},"body":{"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["content",{"_index":90,"title":{},"body":{"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"interfaces/Category-1.html":{},"interfaces/ITodoRepository.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}}}],["context",{"_index":502,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["context.switchtohttp",{"_index":572,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["controller",{"_index":236,"title":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["controller('category",{"_index":267,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('todo",{"_index":696,"title":{},"body":{"controllers/TodoController.html":{}}}],["controller/category/category.controller",{"_index":199,"title":{},"body":{"modules/ApiModule.html":{}}}],["controller/todo/todo.controller",{"_index":198,"title":{},"body":{"modules/ApiModule.html":{}}}],["controllers",{"_index":192,"title":{},"body":{"modules/ApiModule.html":{},"controllers/CategoryController.html":{},"controllers/TodoController.html":{},"overview.html":{}}}],["coverage",{"_index":850,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cqrsmodule",{"_index":195,"title":{},"body":{"modules/ApiModule.html":{},"modules/UsecaseModule.html":{}}}],["createdate",{"_index":624,"title":{},"body":{"entities/Todo.html":{},"classes/TodoPresenter.html":{},"classes/TodoTask.html":{}}}],["createdatecolumn",{"_index":647,"title":{},"body":{"entities/Todo.html":{}}}],["createdatecolumn({name",{"_index":637,"title":{},"body":{"entities/Todo.html":{}}}],["createddate",{"_index":773,"title":{},"body":{"classes/TodoResponse.html":{}}}],["creating",{"_index":33,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["creation",{"_index":103,"title":{},"body":{"classes/AddTodoCommandHandler.html":{}}}],["ctx",{"_index":157,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":161,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":160,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["customized",{"_index":794,"title":{},"body":{"classes/TodoTask.html":{}}}],["data",{"_index":401,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":480,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["datase",{"_index":482,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["date",{"_index":636,"title":{},"body":{"entities/Todo.html":{},"classes/TodoPresenter.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{}}}],["date().toisostring",{"_index":172,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["date.now",{"_index":570,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["debug",{"_index":496,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["debug(context",{"_index":500,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["decorators",{"_index":78,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"classes/UpdateTodoDto.html":{}}}],["default",{"_index":132,"title":{},"body":{"classes/AddTodoDto.html":{},"entities/Todo.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":19,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IException.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}}}],["delete",{"_index":682,"title":{},"body":{"controllers/TodoController.html":{}}}],["delete(':id",{"_index":709,"title":{},"body":{"controllers/TodoController.html":{}}}],["delete(':id')@apiresponsetype(messagepresenter",{"_index":671,"title":{},"body":{"controllers/TodoController.html":{}}}],["deletebyid",{"_index":513,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["deletebyid(id",{"_index":518,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["deleted",{"_index":384,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["deletetodo",{"_index":665,"title":{},"body":{"controllers/TodoController.html":{}}}],["deletetodo(@param('id",{"_index":710,"title":{},"body":{"controllers/TodoController.html":{}}}],["deletetodo(id",{"_index":670,"title":{},"body":{"controllers/TodoController.html":{}}}],["deletetodocommand",{"_index":369,"title":{"classes/DeleteTodoCommand.html":{}},"body":{"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["deletetodocommand(id",{"_index":711,"title":{},"body":{"controllers/TodoController.html":{}}}],["deletetodocommandhandler",{"_index":374,"title":{"classes/DeleteTodoCommandHandler.html":{}},"body":{"classes/DeleteTodoCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["demo",{"_index":807,"title":{},"body":{"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":202,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UsecaseModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"controllers/CategoryController.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoTask.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":928,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":851,"title":{},"body":{"coverage.html":{}}}],["domain",{"_index":921,"title":{},"body":{"index.html":{}}}],["dto/categprydto",{"_index":722,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["duration",{"_index":599,"title":{},"body":{"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["duration=${date.now",{"_index":580,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["e2e",{"_index":938,"title":{},"body":{"index.html":{}}}],["eager",{"_index":628,"title":{},"body":{"entities/Todo.html":{}}}],["empty",{"_index":827,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["end",{"_index":179,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["enity/category.entity",{"_index":325,"title":{},"body":{"injectables/CategoryRepository.html":{},"modules/RepositoriesModule.html":{},"injectables/TodoRepository.html":{}}}],["enity/todo.entity",{"_index":326,"title":{},"body":{"injectables/CategoryRepository.html":{},"modules/RepositoriesModule.html":{},"injectables/TodoRepository.html":{}}}],["entities",{"_index":220,"title":{},"body":{"entities/Category.html":{},"entities/Todo.html":{},"modules/TypeormConfigModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":219,"title":{"entities/Category.html":{},"entities/Todo.html":{}},"body":{"entities/Category.html":{},"entities/Todo.html":{},"coverage.html":{}}}],["entity('todo",{"_index":651,"title":{},"body":{"entities/Todo.html":{}}}],["error",{"_index":270,"title":{},"body":{"controllers/CategoryController.html":{},"interfaces/ILogger.html":{},"injectables/LoggerService.html":{},"controllers/TodoController.html":{}}}],["error('category",{"_index":756,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["error('content",{"_index":793,"title":{},"body":{"classes/TodoTask.html":{}}}],["error(context",{"_index":503,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["error).message",{"_index":166,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception",{"_index":43,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["exception.getresponse",{"_index":165,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.getstatus",{"_index":163,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.stack",{"_index":186,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exceptionfilter",{"_index":136,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exceptions.service",{"_index":388,"title":{},"body":{"modules/ExceptionsModule.html":{}}}],["exceptionsmodule",{"_index":205,"title":{"modules/ExceptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExceptionsModule.html":{},"modules/UsecaseModule.html":{},"modules.html":{},"overview.html":{}}}],["exceptionsservice",{"_index":387,"title":{"injectables/ExceptionsService.html":{}},"body":{"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"coverage.html":{}}}],["execute",{"_index":38,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["execute(_",{"_index":418,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{}}}],["execute(command",{"_index":47,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["execute(query",{"_index":451,"title":{},"body":{"classes/GetTodoByIdQueryHandler.html":{}}}],["executioncontext",{"_index":561,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["export",{"_index":26,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{}}}],["exports",{"_index":392,"title":{},"body":{"modules/ExceptionsModule.html":{},"modules/RepositoriesModule.html":{}}}],["express",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":536,"title":{},"body":{"injectables/LoggerService.html":{}}}],["false",{"_index":133,"title":{},"body":{"classes/AddTodoDto.html":{},"controllers/CategoryController.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{}}}],["false})@isboolean",{"_index":127,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{},"coverage.html":{}}}],["findall",{"_index":514,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["findbyid",{"_index":515,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["findbyid(id",{"_index":521,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["folder",{"_index":917,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":395,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["forbiddenexception(data",{"_index":402,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["forwarded",{"_index":584,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["found",{"_index":757,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["function",{"_index":871,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":910,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":699,"title":{},"body":{"controllers/TodoController.html":{}}}],["get(':id')@apiresponsetype(todopresenter",{"_index":674,"title":{},"body":{"controllers/TodoController.html":{}}}],["get()@apiresponsetype(categorypresenter",{"_index":246,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get()@apiresponsetype(todopresenter",{"_index":676,"title":{},"body":{"controllers/TodoController.html":{}}}],["getall",{"_index":296,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["getallcategoryquery",{"_index":256,"title":{"classes/GetAllCategoryQuery.html":{}},"body":{"controllers/CategoryController.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"coverage.html":{}}}],["getallcategoryqueryhandler",{"_index":412,"title":{"classes/GetAllCategoryQueryHandler.html":{}},"body":{"classes/GetAllCategoryQueryHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getalltodoquery",{"_index":426,"title":{"classes/GetAllTodoQuery.html":{}},"body":{"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["getalltodoqueryhandler",{"_index":428,"title":{"classes/GetAllTodoQueryHandler.html":{}},"body":{"classes/GetAllTodoQueryHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getbycategoryname",{"_index":516,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["getbycategoryname(categoryname",{"_index":523,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["getbyid",{"_index":297,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["getbyid(id",{"_index":308,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["getbyname",{"_index":298,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["getbyname(name",{"_index":310,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["getcategories",{"_index":240,"title":{},"body":{"controllers/CategoryController.html":{}}}],["getcategory",{"_index":781,"title":{},"body":{"classes/TodoTask.html":{}}}],["getcontent",{"_index":782,"title":{},"body":{"classes/TodoTask.html":{}}}],["getcreateddate",{"_index":783,"title":{},"body":{"classes/TodoTask.html":{}}}],["getdatabasehost",{"_index":465,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["getdatabasename",{"_index":466,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["getdatabasepassword",{"_index":467,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["getdatabaseport",{"_index":468,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["getdatabaseschema",{"_index":469,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["getdatabasesync",{"_index":470,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["getdatabaseuser",{"_index":471,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["getid",{"_index":655,"title":{},"body":{"classes/TodoCategory.html":{},"classes/TodoTask.html":{}}}],["getip",{"_index":555,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["getip(request",{"_index":558,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["getisdone",{"_index":784,"title":{},"body":{"classes/TodoTask.html":{}}}],["getname",{"_index":656,"title":{},"body":{"classes/TodoCategory.html":{}}}],["getschemapath(model",{"_index":971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(responseformat",{"_index":970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getting",{"_index":912,"title":{"index.html":{}},"body":{}}],["gettodo",{"_index":657,"title":{},"body":{"classes/TodoCategory.html":{},"controllers/TodoController.html":{}}}],["gettodo(@param('id",{"_index":701,"title":{},"body":{"controllers/TodoController.html":{}}}],["gettodo(id",{"_index":673,"title":{},"body":{"controllers/TodoController.html":{}}}],["gettodobyidquery",{"_index":444,"title":{"classes/GetTodoByIdQuery.html":{}},"body":{"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["gettodobyidquery(id",{"_index":702,"title":{},"body":{"controllers/TodoController.html":{}}}],["gettodobyidqueryhandler",{"_index":448,"title":{"classes/GetTodoByIdQueryHandler.html":{}},"body":{"classes/GetTodoByIdQueryHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gettodoresponse",{"_index":433,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{}}}],["gettodos",{"_index":666,"title":{},"body":{"controllers/TodoController.html":{}}}],["getupdateddate",{"_index":785,"title":{},"body":{"classes/TodoTask.html":{}}}],["graph",{"_index":941,"title":{},"body":{"modules.html":{}}}],["handles",{"_index":32,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{}}}],["host",{"_index":144,"title":{},"body":{"classes/AllExceptionFilter.html":{},"interfaces/IDatabaseConfig.html":{}}}],["host.switchtohttp",{"_index":158,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httpcontext",{"_index":571,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["httpcontext.getrequest",{"_index":573,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["httpexception",{"_index":152,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httpstatus",{"_index":153,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":164,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["icategory_repository",{"_index":60,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"modules/RepositoriesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["icategoryrepsoitory",{"_index":42,"title":{"interfaces/ICategoryRepsoitory.html":{}},"body":{"classes/AddCategoryCommandHandler.html":{},"injectables/CategoryRepository.html":{},"classes/GetAllCategoryQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["icommandhandler",{"_index":35,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["id",{"_index":99,"title":{},"body":{"classes/AddTodoCommand.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/ITodoRepository.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}}}],["idatabaseconfig",{"_index":463,"title":{"interfaces/IDatabaseConfig.html":{}},"body":{"interfaces/IDatabaseConfig.html":{},"coverage.html":{}}}],["identifier",{"_index":852,"title":{},"body":{"coverage.html":{}}}],["ierror",{"_index":148,"title":{"interfaces/IError.html":{}},"body":{"classes/AllExceptionFilter.html":{},"interfaces/IError.html":{},"coverage.html":{}}}],["iexception",{"_index":44,"title":{"interfaces/IException.html":{}},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"interfaces/IException.html":{},"classes/UpdateTodoCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["iformatexceptionmessage",{"_index":399,"title":{"interfaces/IFormatExceptionMessage.html":{}},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"coverage.html":{}}}],["ilogger",{"_index":494,"title":{"interfaces/ILogger.html":{}},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{},"coverage.html":{}}}],["implements",{"_index":34,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"injectables/TodoRepository.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["import",{"_index":54,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IException.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{}}}],["imports",{"_index":200,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/RepositoriesModule.html":{},"modules/TypeormConfigModule.html":{},"modules/UsecaseModule.html":{}}}],["incoming",{"_index":577,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{}}}],["infrastructure",{"_index":922,"title":{},"body":{"index.html":{}}}],["infrastructure/config/typeorm/typeorm.module",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/exceptions/exceptions.module",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/logger/logger.module",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/repositories/repositories.module",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["inject",{"_index":55,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["inject(icategory_repository",{"_index":65,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{}}}],["inject(iexception",{"_index":67,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["inject(itodo_repository",{"_index":116,"title":{},"body":{"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["injectable",{"_index":293,"title":{"injectables/CategoryRepository.html":{},"injectables/ExceptionsService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"injectables/TodoRepository.html":{}},"body":{"injectables/CategoryRepository.html":{},"injectables/ExceptionsService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"injectables/TodoRepository.html":{},"coverage.html":{}}}],["injectables",{"_index":294,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/ExceptionsService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"injectables/TodoRepository.html":{},"overview.html":{}}}],["injectrepository",{"_index":322,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["injectrepository(category",{"_index":327,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["injectrepository(todo",{"_index":744,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["insert",{"_index":299,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["insert(category",{"_index":312,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["insert(todo",{"_index":526,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["installation",{"_index":924,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":926,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":162,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["integer",{"_index":640,"title":{},"body":{"entities/Todo.html":{}}}],["intercept",{"_index":556,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["intercept(context",{"_index":560,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["interface",{"_index":98,"title":{"interfaces/Category-1.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{}},"body":{"classes/AddTodoCommand.html":{},"interfaces/Category-1.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"classes/TodoResponse.html":{},"coverage.html":{}}}],["interfaces",{"_index":235,"title":{},"body":{"interfaces/Category-1.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"overview.html":{}}}],["internal",{"_index":269,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["internalservererrorexception",{"_index":396,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["internalservererrorexception(data",{"_index":405,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["ip",{"_index":574,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ip.replace('::ffff",{"_index":589,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ip=${ip",{"_index":578,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ipaddr",{"_index":582,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["ipaddr.split",{"_index":586,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["iqueryhandler",{"_index":414,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{}}}],["isarray",{"_index":600,"title":{},"body":{"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"miscellaneous/variables.html":{}}}],["isboolean",{"_index":129,"title":{},"body":{"classes/AddTodoDto.html":{},"classes/UpdateTodoDto.html":{}}}],["isdone",{"_index":91,"title":{},"body":{"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"interfaces/Category-1.html":{},"interfaces/ITodoRepository.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}}}],["isnotempty",{"_index":84,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"classes/UpdateTodoDto.html":{}}}],["isnumber",{"_index":836,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["isobject",{"_index":130,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["isstring",{"_index":85,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"classes/UpdateTodoDto.html":{}}}],["item",{"_index":383,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["itodo_repository",{"_index":111,"title":{},"body":{"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ITodoRepository.html":{},"modules/RepositoriesModule.html":{},"classes/UpdateTodoCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["itodorepository",{"_index":106,"title":{"interfaces/ITodoRepository.html":{}},"body":{"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{},"classes/UpdateTodoCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["joincolumn",{"_index":650,"title":{},"body":{"entities/Todo.html":{}}}],["length",{"_index":632,"title":{},"body":{"entities/Todo.html":{}}}],["license",{"_index":954,"title":{},"body":{"properties.html":{}}}],["list",{"_index":585,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["list[list.length",{"_index":587,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["log",{"_index":497,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["log(context",{"_index":506,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["logger",{"_index":142,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{}}}],["logger.service",{"_index":534,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logger/logger.service",{"_index":155,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["loggermodule",{"_index":206,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["loggerservice",{"_index":140,"title":{"injectables/LoggerService.html":{}},"body":{"classes/AllExceptionFilter.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["logginginterceptor",{"_index":553,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["logmessage",{"_index":138,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["logmessage(request",{"_index":147,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["manytoone",{"_index":649,"title":{},"body":{"entities/Todo.html":{}}}],["manytoone(undefined",{"_index":626,"title":{},"body":{"entities/Todo.html":{}}}],["map",{"_index":607,"title":{},"body":{"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["map((data",{"_index":611,"title":{},"body":{"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["matching",{"_index":29,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":74,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"classes/DeleteTodoCommandHandler.html":{},"interfaces/IError.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"injectables/LoggerService.html":{},"classes/MessagePresenter.html":{},"controllers/TodoController.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["message.code_error",{"_index":183,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["message.message",{"_index":185,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["message=${message.message",{"_index":184,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["messagepresenter",{"_index":265,"title":{"classes/MessagePresenter.html":{}},"body":{"controllers/CategoryController.html":{},"classes/MessagePresenter.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["metadata",{"_index":900,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":601,"title":{},"body":{"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["method=${request.method",{"_index":181,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["methods",{"_index":36,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IException.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["miscellaneous",{"_index":909,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":932,"title":{},"body":{"index.html":{}}}],["model",{"_index":654,"title":{},"body":{"classes/TodoCategory.html":{},"classes/TodoTask.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":188,"title":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/ExceptionsModule.html":{},"modules/LoggerModule.html":{},"modules/RepositoriesModule.html":{},"modules/TypeormConfigModule.html":{},"modules/UsecaseModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/ExceptionsModule.html":{},"modules/LoggerModule.html":{},"modules/RepositoriesModule.html":{},"modules/TypeormConfigModule.html":{},"modules/UsecaseModule.html":{}}}],["modules",{"_index":190,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/ExceptionsModule.html":{},"modules/LoggerModule.html":{},"modules/RepositoriesModule.html":{},"modules/TypeormConfigModule.html":{},"modules/UsecaseModule.html":{},"modules.html":{},"overview.html":{}}}],["mysql2",{"_index":895,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":15,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IException.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["nestinterceptor",{"_index":566,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["nestjs",{"_index":545,"title":{},"body":{"injectables/LoggerService.html":{}}}],["nestjs/common",{"_index":56,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommandHandler.html":{},"modules/UsecaseModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":798,"title":{},"body":{"modules/TypeormConfigModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["nestjs/cqrs",{"_index":58,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"modules/ApiModule.html":{},"controllers/CategoryController.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"controllers/TodoController.html":{},"classes/UpdateTodoCommandHandler.html":{},"modules/UsecaseModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":83,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"classes/UpdateTodoDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":323,"title":{},"body":{"injectables/CategoryRepository.html":{},"modules/RepositoriesModule.html":{},"injectables/TodoRepository.html":{},"modules/TypeormConfigModule.html":{},"dependencies.html":{}}}],["new",{"_index":10,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"coverage.html":{}}}],["next",{"_index":562,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["next.handle().pipe",{"_index":579,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["now",{"_index":569,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["now}ms",{"_index":581,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["npm",{"_index":925,"title":{},"body":{"index.html":{}}}],["null",{"_index":168,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/CategoryRepository.html":{},"classes/GetTodoByIdQueryHandler.html":{},"classes/TodoCategory.html":{}}}],["nullable",{"_index":634,"title":{},"body":{"entities/Todo.html":{}}}],["number",{"_index":100,"title":{},"body":{"classes/AddTodoCommand.html":{},"classes/AllExceptionFilter.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/GetTodoByIdQuery.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ITodoRepository.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoDto.html":{}}}],["observable",{"_index":565,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["ondelete",{"_index":228,"title":{},"body":{"entities/Category.html":{},"entities/Todo.html":{}}}],["onetomany",{"_index":232,"title":{},"body":{"entities/Category.html":{}}}],["onetomany(undefined",{"_index":226,"title":{},"body":{"entities/Category.html":{}}}],["optional",{"_index":24,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["out",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UsecaseModule.html":{},"overview.html":{}}}],["overview",{"_index":947,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":883,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":610,"title":{},"body":{"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"controllers/TodoController.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IException.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["parseintpipe",{"_index":683,"title":{},"body":{"controllers/TodoController.html":{}}}],["password",{"_index":484,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["path",{"_index":173,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["pg",{"_index":897,"title":{},"body":{"dependencies.html":{}}}],["port",{"_index":481,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["post",{"_index":249,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["post()@apiresponsetype(messagepresenter",{"_index":242,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["postgres",{"_index":801,"title":{},"body":{"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":238,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["primarygeneratedcolumn",{"_index":222,"title":{},"body":{"entities/Category.html":{},"entities/Todo.html":{}}}],["primarygeneratedcolumn({type",{"_index":639,"title":{},"body":{"entities/Todo.html":{}}}],["private",{"_index":39,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"injectables/LoggingInterceptor.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["process.env.database_schema",{"_index":805,"title":{},"body":{"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.database_url",{"_index":803,"title":{},"body":{"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":546,"title":{},"body":{"injectables/LoggerService.html":{}}}],["production",{"_index":547,"title":{},"body":{"injectables/LoggerService.html":{},"index.html":{}}}],["promise",{"_index":50,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["properties",{"_index":13,"title":{"properties.html":{}},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoDto.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/GetTodoByIdQuery.html":{},"interfaces/IError.html":{},"interfaces/IFormatExceptionMessage.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"entities/Todo.html":{},"classes/TodoPresenter.html":{},"classes/TodoResponse.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["provide",{"_index":390,"title":{},"body":{"modules/ExceptionsModule.html":{},"modules/RepositoriesModule.html":{}}}],["providers",{"_index":389,"title":{},"body":{"modules/ExceptionsModule.html":{},"modules/LoggerModule.html":{},"modules/RepositoriesModule.html":{},"modules/UsecaseModule.html":{}}}],["public",{"_index":14,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddTodoCommand.html":{},"interfaces/Category-1.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/GetTodoByIdQuery.html":{},"classes/TodoCategory.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{}}}],["purpose",{"_index":808,"title":{},"body":{"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["put",{"_index":684,"title":{},"body":{"controllers/TodoController.html":{}}}],["put()@apiresponsetype(messagepresenter",{"_index":680,"title":{},"body":{"controllers/TodoController.html":{}}}],["query",{"_index":453,"title":{},"body":{"classes/GetTodoByIdQueryHandler.html":{}}}],["querybus",{"_index":251,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["queryhandler",{"_index":421,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{}}}],["queryhandler(getallcategoryquery",{"_index":422,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["queryhandler(getalltodoquery",{"_index":434,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{}}}],["queryhandler(gettodobyidquery",{"_index":454,"title":{},"body":{"classes/GetTodoByIdQueryHandler.html":{}}}],["readonly",{"_index":66,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"injectables/LoggingInterceptor.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}}}],["ref",{"_index":969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":899,"title":{},"body":{"dependencies.html":{}}}],["relations",{"_index":752,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["remove",{"_index":300,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["remove(id",{"_index":314,"title":{},"body":{"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{}}}],["repositoriesmodule",{"_index":207,"title":{"modules/RepositoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RepositoriesModule.html":{},"modules/UsecaseModule.html":{},"modules.html":{},"overview.html":{}}}],["repository",{"_index":304,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["request",{"_index":151,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["request.connection.remoteaddress",{"_index":588,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.headers['x",{"_index":583,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["request.method",{"_index":613,"title":{},"body":{"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["request.path",{"_index":180,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}}}],["request.url",{"_index":174,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["required",{"_index":75,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{}}}],["reset",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UsecaseModule.html":{},"overview.html":{}}}],["response",{"_index":159,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["response.status(status).json(responsedata",{"_index":176,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["responsedata",{"_index":169,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["responseformat",{"_index":597,"title":{"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{}},"body":{"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"coverage.html":{}}}],["responseinterceptor",{"_index":609,"title":{"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{}},"body":{"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"coverage.html":{}}}],["results",{"_index":28,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":275,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":49,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"injectables/CategoryRepository.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IException.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["rimraf",{"_index":902,"title":{},"body":{"dependencies.html":{}}}],["rquest",{"_index":823,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["run",{"_index":929,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":568,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":608,"title":{},"body":{"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{}}}],["sample",{"_index":914,"title":{},"body":{"index.html":{}}}],["schema",{"_index":485,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["select",{"_index":329,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["service",{"_index":544,"title":{},"body":{"injectables/LoggerService.html":{}}}],["set",{"_index":385,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"modules/ApiModule.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQuery.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQuery.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"modules/RepositoriesModule.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"modules/UsecaseModule.html":{}}}],["src",{"_index":919,"title":{},"body":{"index.html":{}}}],["src/.../apiresponsedecorator.ts",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../icategoryrepository.ts",{"_index":960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../iexception.ts",{"_index":961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../itodorepository.ts",{"_index":962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":911,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../typeorm.module.ts",{"_index":963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/api/api.module.ts",{"_index":191,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/api/common/apiresponsedecorator",{"_index":253,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["src/api/common/apiresponsedecorator.ts",{"_index":854,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/api/common/responseinterceptor.ts",{"_index":598,"title":{},"body":{"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["src/api/common/responseinterceptor.ts:16",{"_index":604,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/api/common/responseinterceptor.ts:18",{"_index":606,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/api/common/responseinterceptor.ts:20",{"_index":603,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/api/common/responseinterceptor.ts:22",{"_index":605,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/api/common/responseinterceptor.ts:24",{"_index":602,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/api/common/responseinterceptor.ts:40",{"_index":620,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["src/api/controller/category/category.controller.ts",{"_index":237,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/api/controller/category/category.controller.ts:24",{"_index":247,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/api/controller/category/category.controller.ts:34",{"_index":244,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/api/controller/todo/todo.controller.ts",{"_index":663,"title":{},"body":{"controllers/TodoController.html":{},"coverage.html":{}}}],["src/api/controller/todo/todo.controller.ts:39",{"_index":675,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/controller/todo/todo.controller.ts:46",{"_index":677,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/controller/todo/todo.controller.ts:55",{"_index":681,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/controller/todo/todo.controller.ts:65",{"_index":672,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/controller/todo/todo.controller.ts:71",{"_index":669,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/dto/addcategorydto",{"_index":258,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/api/dto/addcategorydto.ts",{"_index":77,"title":{},"body":{"classes/AddCategoryDto.html":{},"coverage.html":{}}}],["src/api/dto/addcategorydto.ts:8",{"_index":81,"title":{},"body":{"classes/AddCategoryDto.html":{}}}],["src/api/dto/addtododto",{"_index":685,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/dto/addtododto.ts",{"_index":121,"title":{},"body":{"classes/AddTodoDto.html":{},"coverage.html":{}}}],["src/api/dto/addtododto.ts:13",{"_index":128,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["src/api/dto/addtododto.ts:17",{"_index":124,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["src/api/dto/addtododto.ts:9",{"_index":125,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["src/api/dto/categprydto.ts",{"_index":283,"title":{},"body":{"classes/CategoryDto.html":{},"coverage.html":{}}}],["src/api/dto/categprydto.ts:5",{"_index":284,"title":{},"body":{"classes/CategoryDto.html":{}}}],["src/api/dto/categprydto.ts:7",{"_index":285,"title":{},"body":{"classes/CategoryDto.html":{}}}],["src/api/dto/updatetododto",{"_index":686,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/dto/updatetododto.ts",{"_index":828,"title":{},"body":{"classes/UpdateTodoDto.html":{},"coverage.html":{}}}],["src/api/dto/updatetododto.ts:12",{"_index":835,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["src/api/dto/updatetododto.ts:17",{"_index":831,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["src/api/dto/updatetododto.ts:21",{"_index":830,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["src/api/dto/updatetododto.ts:8",{"_index":833,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["src/api/presenter/categorypresenter",{"_index":255,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/api/presenter/categorypresenter.ts",{"_index":286,"title":{},"body":{"classes/CategoryPresenter.html":{},"coverage.html":{}}}],["src/api/presenter/categorypresenter.ts:7",{"_index":289,"title":{},"body":{"classes/CategoryPresenter.html":{}}}],["src/api/presenter/categorypresenter.ts:9",{"_index":288,"title":{},"body":{"classes/CategoryPresenter.html":{}}}],["src/api/presenter/messagepresenter",{"_index":266,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["src/api/presenter/messagepresenter.ts",{"_index":590,"title":{},"body":{"classes/MessagePresenter.html":{},"coverage.html":{}}}],["src/api/presenter/messagepresenter.ts:5",{"_index":591,"title":{},"body":{"classes/MessagePresenter.html":{}}}],["src/api/presenter/todopresenter",{"_index":688,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/api/presenter/todopresenter.ts",{"_index":714,"title":{},"body":{"classes/TodoPresenter.html":{},"coverage.html":{}}}],["src/api/presenter/todopresenter.ts:11",{"_index":720,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["src/api/presenter/todopresenter.ts:13",{"_index":718,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["src/api/presenter/todopresenter.ts:15",{"_index":721,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["src/api/presenter/todopresenter.ts:17",{"_index":716,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["src/api/presenter/todopresenter.ts:7",{"_index":719,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["src/api/presenter/todopresenter.ts:9",{"_index":717,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["src/app.module.ts",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts",{"_index":464,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"coverage.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts:11",{"_index":475,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts:16",{"_index":478,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts:21",{"_index":474,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts:26",{"_index":473,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts:31",{"_index":476,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts:36",{"_index":477,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["src/domain/interface/config/idatabaseconfig.ts:6",{"_index":472,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["src/domain/interface/exception/ierror",{"_index":154,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["src/domain/interface/exception/ierror.ts",{"_index":487,"title":{},"body":{"interfaces/IError.html":{},"coverage.html":{}}}],["src/domain/interface/exception/iexception",{"_index":59,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"modules/ExceptionsModule.html":{},"injectables/ExceptionsService.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["src/domain/interface/exception/iexception.ts",{"_index":488,"title":{},"body":{"interfaces/IException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/domain/interface/exception/iexception.ts:4",{"_index":489,"title":{},"body":{"interfaces/IException.html":{}}}],["src/domain/interface/exception/iexception.ts:5",{"_index":491,"title":{},"body":{"interfaces/IException.html":{}}}],["src/domain/interface/exception/iexception.ts:6",{"_index":490,"title":{},"body":{"interfaces/IException.html":{}}}],["src/domain/interface/exception/iexception.ts:7",{"_index":492,"title":{},"body":{"interfaces/IException.html":{}}}],["src/domain/interface/exception/iformatexceptionmessage",{"_index":409,"title":{},"body":{"injectables/ExceptionsService.html":{}}}],["src/domain/interface/exception/iformatexceptionmessage.ts",{"_index":493,"title":{},"body":{"interfaces/IFormatExceptionMessage.html":{},"coverage.html":{}}}],["src/domain/interface/logger/ilogger",{"_index":542,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/domain/interface/logger/ilogger.ts",{"_index":495,"title":{},"body":{"interfaces/ILogger.html":{},"coverage.html":{}}}],["src/domain/interface/logger/ilogger.ts:2",{"_index":501,"title":{},"body":{"interfaces/ILogger.html":{}}}],["src/domain/interface/logger/ilogger.ts:3",{"_index":507,"title":{},"body":{"interfaces/ILogger.html":{}}}],["src/domain/interface/logger/ilogger.ts:4",{"_index":505,"title":{},"body":{"interfaces/ILogger.html":{}}}],["src/domain/interface/logger/ilogger.ts:5",{"_index":511,"title":{},"body":{"interfaces/ILogger.html":{}}}],["src/domain/interface/logger/ilogger.ts:6",{"_index":509,"title":{},"body":{"interfaces/ILogger.html":{}}}],["src/domain/interface/repository/icategoryrepository",{"_index":61,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"injectables/CategoryRepository.html":{},"classes/GetAllCategoryQueryHandler.html":{},"modules/RepositoriesModule.html":{}}}],["src/domain/interface/repository/icategoryrepository.ts",{"_index":457,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/domain/interface/repository/icategoryrepository.ts:4",{"_index":460,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{}}}],["src/domain/interface/repository/icategoryrepository.ts:5",{"_index":461,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{}}}],["src/domain/interface/repository/icategoryrepository.ts:6",{"_index":462,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{}}}],["src/domain/interface/repository/icategoryrepository.ts:7",{"_index":459,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{}}}],["src/domain/interface/repository/icategoryrepository.ts:8",{"_index":458,"title":{},"body":{"interfaces/ICategoryRepsoitory.html":{}}}],["src/domain/interface/repository/itodorepository",{"_index":112,"title":{},"body":{"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"modules/RepositoriesModule.html":{},"injectables/TodoRepository.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["src/domain/interface/repository/itodorepository.ts",{"_index":512,"title":{},"body":{"interfaces/ITodoRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/domain/interface/repository/itodorepository.ts:13",{"_index":519,"title":{},"body":{"interfaces/ITodoRepository.html":{}}}],["src/domain/interface/repository/itodorepository.ts:14",{"_index":524,"title":{},"body":{"interfaces/ITodoRepository.html":{}}}],["src/domain/interface/repository/itodorepository.ts:4",{"_index":527,"title":{},"body":{"interfaces/ITodoRepository.html":{}}}],["src/domain/interface/repository/itodorepository.ts:5",{"_index":520,"title":{},"body":{"interfaces/ITodoRepository.html":{}}}],["src/domain/interface/repository/itodorepository.ts:6",{"_index":522,"title":{},"body":{"interfaces/ITodoRepository.html":{}}}],["src/domain/interface/repository/itodorepository.ts:7",{"_index":530,"title":{},"body":{"interfaces/ITodoRepository.html":{}}}],["src/domain/model/todocategory",{"_index":63,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{},"injectables/TodoRepository.html":{}}}],["src/domain/model/todocategory.ts",{"_index":652,"title":{},"body":{"classes/TodoCategory.html":{},"coverage.html":{}}}],["src/domain/model/todocategory.ts:13",{"_index":660,"title":{},"body":{"classes/TodoCategory.html":{}}}],["src/domain/model/todocategory.ts:17",{"_index":659,"title":{},"body":{"classes/TodoCategory.html":{}}}],["src/domain/model/todocategory.ts:21",{"_index":661,"title":{},"body":{"classes/TodoCategory.html":{}}}],["src/domain/model/todocategory.ts:6",{"_index":658,"title":{},"body":{"classes/TodoCategory.html":{}}}],["src/domain/model/todotask",{"_index":114,"title":{},"body":{"classes/AddTodoCommandHandler.html":{},"injectables/CategoryRepository.html":{},"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["src/domain/model/todotask.ts",{"_index":780,"title":{},"body":{"classes/TodoTask.html":{},"coverage.html":{}}}],["src/domain/model/todotask.ts:20",{"_index":790,"title":{},"body":{"classes/TodoTask.html":{}}}],["src/domain/model/todotask.ts:23",{"_index":788,"title":{},"body":{"classes/TodoTask.html":{}}}],["src/domain/model/todotask.ts:26",{"_index":791,"title":{},"body":{"classes/TodoTask.html":{}}}],["src/domain/model/todotask.ts:29",{"_index":789,"title":{},"body":{"classes/TodoTask.html":{}}}],["src/domain/model/todotask.ts:32",{"_index":792,"title":{},"body":{"classes/TodoTask.html":{}}}],["src/domain/model/todotask.ts:35",{"_index":787,"title":{},"body":{"classes/TodoTask.html":{}}}],["src/domain/model/todotask.ts:6",{"_index":786,"title":{},"body":{"classes/TodoTask.html":{}}}],["src/infrastructure/config/typeorm/typeorm.module.ts",{"_index":796,"title":{},"body":{"modules/TypeormConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/enity/category.entity",{"_index":800,"title":{},"body":{"modules/TypeormConfigModule.html":{}}}],["src/infrastructure/enity/category.entity.ts",{"_index":221,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/infrastructure/enity/category.entity.ts:12",{"_index":230,"title":{},"body":{"entities/Category.html":{}}}],["src/infrastructure/enity/category.entity.ts:6",{"_index":223,"title":{},"body":{"entities/Category.html":{}}}],["src/infrastructure/enity/category.entity.ts:9",{"_index":225,"title":{},"body":{"entities/Category.html":{}}}],["src/infrastructure/enity/todo.entity",{"_index":231,"title":{},"body":{"entities/Category.html":{},"modules/TypeormConfigModule.html":{}}}],["src/infrastructure/enity/todo.entity.ts",{"_index":623,"title":{},"body":{"entities/Todo.html":{},"coverage.html":{}}}],["src/infrastructure/enity/todo.entity.ts:15",{"_index":641,"title":{},"body":{"entities/Todo.html":{}}}],["src/infrastructure/enity/todo.entity.ts:18",{"_index":635,"title":{},"body":{"entities/Todo.html":{}}}],["src/infrastructure/enity/todo.entity.ts:21",{"_index":643,"title":{},"body":{"entities/Todo.html":{}}}],["src/infrastructure/enity/todo.entity.ts:24",{"_index":638,"title":{},"body":{"entities/Todo.html":{}}}],["src/infrastructure/enity/todo.entity.ts:27",{"_index":645,"title":{},"body":{"entities/Todo.html":{}}}],["src/infrastructure/enity/todo.entity.ts:34",{"_index":630,"title":{},"body":{"entities/Todo.html":{}}}],["src/infrastructure/exceptions/exceptions.module",{"_index":840,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["src/infrastructure/exceptions/exceptions.module.ts",{"_index":386,"title":{},"body":{"modules/ExceptionsModule.html":{}}}],["src/infrastructure/exceptions/exceptions.service.ts",{"_index":393,"title":{},"body":{"injectables/ExceptionsService.html":{},"coverage.html":{}}}],["src/infrastructure/exceptions/exceptions.service.ts:13",{"_index":400,"title":{},"body":{"injectables/ExceptionsService.html":{}}}],["src/infrastructure/exceptions/exceptions.service.ts:16",{"_index":406,"title":{},"body":{"injectables/ExceptionsService.html":{}}}],["src/infrastructure/exceptions/exceptions.service.ts:19",{"_index":403,"title":{},"body":{"injectables/ExceptionsService.html":{}}}],["src/infrastructure/exceptions/exceptions.service.ts:22",{"_index":408,"title":{},"body":{"injectables/ExceptionsService.html":{}}}],["src/infrastructure/filter/allexceptionfilter.ts",{"_index":135,"title":{},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["src/infrastructure/filter/allexceptionfilter.ts:12",{"_index":141,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["src/infrastructure/filter/allexceptionfilter.ts:14",{"_index":146,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["src/infrastructure/filter/allexceptionfilter.ts:42",{"_index":150,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["src/infrastructure/interceptor/logging/logginginterceptor.ts",{"_index":554,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/infrastructure/interceptor/logging/logginginterceptor.ts:11",{"_index":557,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/infrastructure/interceptor/logging/logginginterceptor.ts:14",{"_index":564,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/infrastructure/interceptor/logging/logginginterceptor.ts:36",{"_index":559,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/infrastructure/interceptor/response/responseformat.ts",{"_index":614,"title":{},"body":{"classes/ResponseFormat-1.html":{},"coverage.html":{}}}],["src/infrastructure/interceptor/response/responseformat.ts:11",{"_index":618,"title":{},"body":{"classes/ResponseFormat-1.html":{}}}],["src/infrastructure/interceptor/response/responseformat.ts:13",{"_index":615,"title":{},"body":{"classes/ResponseFormat-1.html":{}}}],["src/infrastructure/interceptor/response/responseformat.ts:5",{"_index":617,"title":{},"body":{"classes/ResponseFormat-1.html":{}}}],["src/infrastructure/interceptor/response/responseformat.ts:7",{"_index":619,"title":{},"body":{"classes/ResponseFormat-1.html":{}}}],["src/infrastructure/interceptor/response/responseformat.ts:9",{"_index":616,"title":{},"body":{"classes/ResponseFormat-1.html":{}}}],["src/infrastructure/interceptor/response/responseinterceptor.ts",{"_index":621,"title":{},"body":{"injectables/ResponseInterceptor-1.html":{},"coverage.html":{}}}],["src/infrastructure/interceptor/response/responseinterceptor.ts:14",{"_index":622,"title":{},"body":{"injectables/ResponseInterceptor-1.html":{}}}],["src/infrastructure/logger/logger.module.ts",{"_index":533,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/infrastructure/logger/logger.service.ts",{"_index":535,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/infrastructure/logger/logger.service.ts:14",{"_index":539,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/infrastructure/logger/logger.service.ts:17",{"_index":538,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/infrastructure/logger/logger.service.ts:20",{"_index":541,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/infrastructure/logger/logger.service.ts:23",{"_index":540,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/infrastructure/logger/logger.service.ts:9",{"_index":537,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts",{"_index":295,"title":{},"body":{"injectables/CategoryRepository.html":{},"coverage.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:11",{"_index":305,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:16",{"_index":307,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:23",{"_index":309,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:27",{"_index":311,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:31",{"_index":313,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:35",{"_index":315,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:38",{"_index":320,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/category.repossitory.ts:61",{"_index":317,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["src/infrastructure/repositories/repositories.module",{"_index":841,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["src/infrastructure/repositories/repositories.module.ts",{"_index":592,"title":{},"body":{"modules/RepositoriesModule.html":{}}}],["src/infrastructure/repositories/todo.repository.ts",{"_index":731,"title":{},"body":{"injectables/TodoRepository.html":{},"coverage.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:100",{"_index":740,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:12",{"_index":733,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:19",{"_index":738,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:26",{"_index":739,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:50",{"_index":736,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:57",{"_index":737,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:62",{"_index":743,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:85",{"_index":735,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/infrastructure/repositories/todo.repository.ts:89",{"_index":742,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["src/main.ts",{"_index":870,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommand",{"_index":259,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommand.ts",{"_index":6,"title":{},"body":{"classes/AddCategoryCommand.html":{},"coverage.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommand.ts:4",{"_index":20,"title":{},"body":{"classes/AddCategoryCommand.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommand.ts:5",{"_index":25,"title":{},"body":{"classes/AddCategoryCommand.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommandhandler.ts",{"_index":31,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"coverage.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommandhandler.ts:20",{"_index":45,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommandhandler.ts:27",{"_index":48,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["src/usecase/category/command/addcategory/addcategorycommandhandler.ts:32",{"_index":52,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["src/usecase/category/command/index.ts",{"_index":877,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/usecase/category/query/getallcategory/categoryresponse",{"_index":261,"title":{},"body":{"controllers/CategoryController.html":{},"classes/CategoryPresenter.html":{}}}],["src/usecase/category/query/getallcategory/categoryresponse.ts",{"_index":366,"title":{},"body":{"classes/CategoryResponse.html":{},"coverage.html":{}}}],["src/usecase/category/query/getallcategory/categoryresponse.ts:1",{"_index":367,"title":{},"body":{"classes/CategoryResponse.html":{}}}],["src/usecase/category/query/getallcategory/categoryresponse.ts:2",{"_index":368,"title":{},"body":{"classes/CategoryResponse.html":{}}}],["src/usecase/category/query/getallcategory/getallcategoryquery",{"_index":257,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/usecase/category/query/getallcategory/getallcategoryquery.ts",{"_index":411,"title":{},"body":{"classes/GetAllCategoryQuery.html":{},"coverage.html":{}}}],["src/usecase/category/query/getallcategory/getallcategoryqueryhandler.ts",{"_index":413,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{},"coverage.html":{}}}],["src/usecase/category/query/getallcategory/getallcategoryqueryhandler.ts:13",{"_index":416,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["src/usecase/category/query/getallcategory/getallcategoryqueryhandler.ts:18",{"_index":419,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["src/usecase/category/query/index.ts",{"_index":878,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommand",{"_index":689,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommand.ts",{"_index":89,"title":{},"body":{"classes/AddTodoCommand.html":{},"interfaces/Category-1.html":{},"coverage.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommand.ts:1",{"_index":94,"title":{},"body":{"classes/AddTodoCommand.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommand.ts:3",{"_index":96,"title":{},"body":{"classes/AddTodoCommand.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommand.ts:4",{"_index":97,"title":{},"body":{"classes/AddTodoCommand.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommand.ts:5",{"_index":95,"title":{},"body":{"classes/AddTodoCommand.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommandhandler.ts",{"_index":102,"title":{},"body":{"classes/AddTodoCommandHandler.html":{},"coverage.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommandhandler.ts:18",{"_index":107,"title":{},"body":{"classes/AddTodoCommandHandler.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommandhandler.ts:24",{"_index":109,"title":{},"body":{"classes/AddTodoCommandHandler.html":{}}}],["src/usecase/todo/command/addtodo/addtodocommandhandler.ts:36",{"_index":110,"title":{},"body":{"classes/AddTodoCommandHandler.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommand",{"_index":690,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommand.ts",{"_index":370,"title":{},"body":{"classes/DeleteTodoCommand.html":{},"coverage.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommand.ts:1",{"_index":372,"title":{},"body":{"classes/DeleteTodoCommand.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommand.ts:2",{"_index":373,"title":{},"body":{"classes/DeleteTodoCommand.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommandhandler.ts",{"_index":375,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{},"coverage.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommandhandler.ts:16",{"_index":376,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommandhandler.ts:21",{"_index":377,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["src/usecase/todo/command/deletetodo/deletetodocommandhandler.ts:26",{"_index":379,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["src/usecase/todo/command/index.ts",{"_index":879,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommand",{"_index":692,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommand.ts",{"_index":811,"title":{},"body":{"classes/UpdateTodoCommand.html":{},"coverage.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommand.ts:1",{"_index":812,"title":{},"body":{"classes/UpdateTodoCommand.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommand.ts:3",{"_index":815,"title":{},"body":{"classes/UpdateTodoCommand.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommand.ts:4",{"_index":814,"title":{},"body":{"classes/UpdateTodoCommand.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommand.ts:5",{"_index":816,"title":{},"body":{"classes/UpdateTodoCommand.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommand.ts:6",{"_index":813,"title":{},"body":{"classes/UpdateTodoCommand.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommandhandler.ts",{"_index":818,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{},"coverage.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommandhandler.ts:16",{"_index":819,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommandhandler.ts:21",{"_index":820,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["src/usecase/todo/command/updatetodo/updatetodocommandhandler.ts:30",{"_index":822,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["src/usecase/todo/query/getalltodo/getalltodoquery",{"_index":693,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/usecase/todo/query/getalltodo/getalltodoquery.ts",{"_index":427,"title":{},"body":{"classes/GetAllTodoQuery.html":{},"coverage.html":{}}}],["src/usecase/todo/query/getalltodo/getalltodoqueryhandler.ts",{"_index":429,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{},"coverage.html":{}}}],["src/usecase/todo/query/getalltodo/getalltodoqueryhandler.ts:13",{"_index":430,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{}}}],["src/usecase/todo/query/getalltodo/getalltodoqueryhandler.ts:17",{"_index":431,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{}}}],["src/usecase/todo/query/getalltodobyid/gettodobyidquery",{"_index":694,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/usecase/todo/query/getalltodobyid/gettodobyidquery.ts",{"_index":445,"title":{},"body":{"classes/GetTodoByIdQuery.html":{},"coverage.html":{}}}],["src/usecase/todo/query/getalltodobyid/gettodobyidquery.ts:1",{"_index":446,"title":{},"body":{"classes/GetTodoByIdQuery.html":{}}}],["src/usecase/todo/query/getalltodobyid/gettodobyidquery.ts:2",{"_index":447,"title":{},"body":{"classes/GetTodoByIdQuery.html":{}}}],["src/usecase/todo/query/getalltodobyid/gettodobyidqueryhandler.ts",{"_index":449,"title":{},"body":{"classes/GetTodoByIdQueryHandler.html":{},"coverage.html":{}}}],["src/usecase/todo/query/getalltodobyid/gettodobyidqueryhandler.ts:13",{"_index":450,"title":{},"body":{"classes/GetTodoByIdQueryHandler.html":{}}}],["src/usecase/todo/query/getalltodobyid/gettodobyidqueryhandler.ts:17",{"_index":452,"title":{},"body":{"classes/GetTodoByIdQueryHandler.html":{}}}],["src/usecase/todo/query/gettodoresponse",{"_index":695,"title":{},"body":{"controllers/TodoController.html":{},"classes/TodoPresenter.html":{}}}],["src/usecase/todo/query/gettodoresponse.ts",{"_index":772,"title":{},"body":{"classes/TodoResponse.html":{},"coverage.html":{}}}],["src/usecase/todo/query/gettodoresponse.ts:1",{"_index":774,"title":{},"body":{"classes/TodoResponse.html":{}}}],["src/usecase/todo/query/gettodoresponse.ts:3",{"_index":778,"title":{},"body":{"classes/TodoResponse.html":{}}}],["src/usecase/todo/query/gettodoresponse.ts:4",{"_index":776,"title":{},"body":{"classes/TodoResponse.html":{}}}],["src/usecase/todo/query/gettodoresponse.ts:5",{"_index":779,"title":{},"body":{"classes/TodoResponse.html":{}}}],["src/usecase/todo/query/gettodoresponse.ts:6",{"_index":777,"title":{},"body":{"classes/TodoResponse.html":{}}}],["src/usecase/todo/query/gettodoresponse.ts:7",{"_index":775,"title":{},"body":{"classes/TodoResponse.html":{}}}],["src/usecase/todo/query/index.ts",{"_index":880,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/usecase/usecase.module",{"_index":197,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/usecase/usecase.module.ts",{"_index":839,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["start",{"_index":930,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":933,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":934,"title":{},"body":{"index.html":{}}}],["started",{"_index":913,"title":{"index.html":{}},"body":{}}],["statements",{"_index":853,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":149,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["status=${status",{"_index":182,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["statuscode",{"_index":170,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["string",{"_index":18,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoDto.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IError.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoDto.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":918,"title":{},"body":{"index.html":{}}}],["success",{"_index":282,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["summary",{"_index":479,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"injectables/LoggerService.html":{}}}],["super.debug(`[debug",{"_index":548,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.error(`[error",{"_index":550,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.log(`[info",{"_index":549,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.verbose(`[verbose",{"_index":552,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.warn(`[warn",{"_index":551,"title":{},"body":{"injectables/LoggerService.html":{}}}],["support",{"_index":945,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":946,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":905,"title":{},"body":{"dependencies.html":{}}}],["sync",{"_index":486,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["synchronize",{"_index":806,"title":{},"body":{"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":359,"title":{},"body":{"injectables/CategoryRepository.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{}}}],["t.content",{"_index":360,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["t.id",{"_index":364,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["t.isdone",{"_index":362,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["table",{"_index":882,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":881,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":567,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["test",{"_index":937,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":940,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":939,"title":{},"body":{"index.html":{}}}],["tests",{"_index":936,"title":{},"body":{"index.html":{}}}],["this.category",{"_index":730,"title":{},"body":{"classes/TodoPresenter.html":{},"classes/TodoTask.html":{}}}],["this.categoryrepo.delete(id",{"_index":339,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["this.categoryrepo.find",{"_index":328,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["this.categoryrepo.findoneby",{"_index":334,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["this.categoryrepo.findonebyorfail",{"_index":332,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["this.categoryrepo.insert(category",{"_index":750,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.categoryrepo.insert(catentity",{"_index":338,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["this.categoryrepoitory.getall",{"_index":423,"title":{},"body":{"classes/GetAllCategoryQueryHandler.html":{}}}],["this.categoryrepository.insert(new",{"_index":71,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["this.commandbus.execute",{"_index":707,"title":{},"body":{"controllers/TodoController.html":{}}}],["this.commandbus.execute(new",{"_index":280,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["this.content",{"_index":724,"title":{},"body":{"classes/TodoPresenter.html":{},"classes/TodoTask.html":{}}}],["this.createdate",{"_index":728,"title":{},"body":{"classes/TodoPresenter.html":{},"classes/TodoTask.html":{}}}],["this.exception.badrequestexception",{"_index":73,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["this.getip(request",{"_index":575,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.id",{"_index":290,"title":{},"body":{"classes/CategoryPresenter.html":{},"classes/TodoCategory.html":{},"classes/TodoPresenter.html":{},"classes/TodoTask.html":{}}}],["this.isdone",{"_index":726,"title":{},"body":{"classes/TodoPresenter.html":{},"classes/TodoTask.html":{}}}],["this.logger.error",{"_index":178,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["this.logger.log",{"_index":576,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["this.logger.warn",{"_index":187,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["this.logmessage(request",{"_index":175,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["this.name",{"_index":291,"title":{},"body":{"classes/CategoryPresenter.html":{},"classes/TodoCategory.html":{}}}],["this.querybus.execute",{"_index":704,"title":{},"body":{"controllers/TodoController.html":{}}}],["this.querybus.execute(new",{"_index":274,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["this.todo",{"_index":662,"title":{},"body":{"classes/TodoCategory.html":{}}}],["this.todorepo.delete(id",{"_index":759,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.todorepo.find",{"_index":751,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.todorepo.findby",{"_index":745,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.todorepo.findoneby",{"_index":754,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.todorepo.save(todo",{"_index":758,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.todorepo.save(todoentity",{"_index":749,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.todorepository.deletebyid(id",{"_index":381,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["this.todorepository.findall",{"_index":436,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{}}}],["this.todorepository.findbyid(id",{"_index":455,"title":{},"body":{"classes/GetTodoByIdQueryHandler.html":{}}}],["this.todorepository.insert",{"_index":117,"title":{},"body":{"classes/AddTodoCommandHandler.html":{}}}],["this.todorepository.updatecontent(id",{"_index":826,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["this.toentity(category",{"_index":337,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["this.toentity(todo",{"_index":747,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.tomodel(category",{"_index":335,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["this.tomodel(entity",{"_index":331,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["this.tomodel(todo",{"_index":333,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["this.tomodel(todoentity",{"_index":755,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["this.updateddate",{"_index":795,"title":{},"body":{"classes/TodoTask.html":{}}}],["this.validate(command",{"_index":68,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["throw",{"_index":410,"title":{},"body":{"injectables/ExceptionsService.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{}}}],["timestamp",{"_index":171,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["tmodel",{"_index":965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todo",{"_index":104,"title":{"entities/Todo.html":{}},"body":{"classes/AddTodoCommandHandler.html":{},"entities/Category.html":{},"injectables/CategoryRepository.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ITodoRepository.html":{},"modules/RepositoriesModule.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["todo.category",{"_index":227,"title":{},"body":{"entities/Category.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{}}}],["todo.content",{"_index":725,"title":{},"body":{"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{}}}],["todo.createddate",{"_index":729,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["todo.getcategory().getname",{"_index":443,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{}}}],["todo.getcategory()?.getid",{"_index":442,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"injectables/TodoRepository.html":{}}}],["todo.getcategory()?.getname",{"_index":456,"title":{},"body":{"classes/GetTodoByIdQueryHandler.html":{},"injectables/TodoRepository.html":{}}}],["todo.getcontent",{"_index":439,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{}}}],["todo.getcreateddate",{"_index":441,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{}}}],["todo.getid",{"_index":438,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{}}}],["todo.getisdone",{"_index":440,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{}}}],["todo.id",{"_index":723,"title":{},"body":{"classes/TodoPresenter.html":{}}}],["todo.isdone",{"_index":727,"title":{},"body":{"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{}}}],["todo.repository",{"_index":595,"title":{},"body":{"modules/RepositoriesModule.html":{}}}],["todo/command",{"_index":847,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["todo/query",{"_index":849,"title":{},"body":{"modules/UsecaseModule.html":{}}}],["todo?.map((entity",{"_index":746,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todocategory",{"_index":62,"title":{"classes/TodoCategory.html":{}},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"interfaces/ICategoryRepsoitory.html":{},"classes/TodoCategory.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"coverage.html":{}}}],["todocategory(category.name",{"_index":118,"title":{},"body":{"classes/AddTodoCommandHandler.html":{}}}],["todocategory(name",{"_index":72,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{}}}],["todocategory(todoentity.category?.name",{"_index":762,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todocategory(x.category.name",{"_index":347,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["todocommandhandlers",{"_index":846,"title":{},"body":{"modules/UsecaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todocontroller",{"_index":193,"title":{"controllers/TodoController.html":{}},"body":{"modules/ApiModule.html":{},"controllers/TodoController.html":{},"coverage.html":{}}}],["todoentity",{"_index":351,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["todoentity.category",{"_index":748,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity.category.id",{"_index":770,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity.category.name",{"_index":768,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity.category?.id",{"_index":763,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity.content",{"_index":760,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity.createdate",{"_index":764,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity.id",{"_index":352,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["todoentity.isdone",{"_index":761,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity.name",{"_index":354,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["todoentity.todo",{"_index":356,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["todoentity.updateddate",{"_index":765,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todoentity?.map((entity",{"_index":753,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todomodel",{"_index":318,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["todomodel.getcategory()?.getid",{"_index":771,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todomodel.getcategory()?.getname",{"_index":769,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todomodel.getcontent",{"_index":766,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todomodel.getid",{"_index":353,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["todomodel.getisdone",{"_index":767,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todomodel.getname",{"_index":355,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["todomodel.gettodo",{"_index":357,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["todomodel.gettodo()?.map((x",{"_index":358,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["todopresenter",{"_index":687,"title":{"classes/TodoPresenter.html":{}},"body":{"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"coverage.html":{}}}],["todopresenter(todo",{"_index":703,"title":{},"body":{"controllers/TodoController.html":{}}}],["todoqueryhandlers",{"_index":848,"title":{},"body":{"modules/UsecaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todorepo",{"_index":734,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["todorepository",{"_index":108,"title":{"injectables/TodoRepository.html":{}},"body":{"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"modules/RepositoriesModule.html":{},"injectables/TodoRepository.html":{},"classes/UpdateTodoCommandHandler.html":{},"coverage.html":{}}}],["todoresponse",{"_index":432,"title":{"classes/TodoResponse.html":{}},"body":{"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQueryHandler.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"classes/TodoResponse.html":{},"coverage.html":{}}}],["todos",{"_index":435,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{},"controllers/TodoController.html":{}}}],["todos?.map",{"_index":437,"title":{},"body":{"classes/GetAllTodoQueryHandler.html":{}}}],["todos?.map((todo",{"_index":705,"title":{},"body":{"controllers/TodoController.html":{}}}],["todotask",{"_index":113,"title":{"classes/TodoTask.html":{}},"body":{"classes/AddTodoCommandHandler.html":{},"injectables/CategoryRepository.html":{},"interfaces/ITodoRepository.html":{},"classes/TodoCategory.html":{},"injectables/TodoRepository.html":{},"classes/TodoTask.html":{},"coverage.html":{}}}],["toentity",{"_index":301,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["toentity(todomodel",{"_index":316,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["tomodel",{"_index":302,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["tomodel(categoryentity",{"_index":319,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["tomodel(todoentity",{"_index":741,"title":{},"body":{"injectables/TodoRepository.html":{}}}],["trace",{"_index":504,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["transformer",{"_index":892,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":87,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"controllers/CategoryController.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoDto.html":{},"miscellaneous/variables.html":{}}}],["true})@isnotempty()@isnumber",{"_index":832,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["true})@isnotempty()@isstring",{"_index":80,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"classes/UpdateTodoDto.html":{}}}],["true})@isobject",{"_index":123,"title":{},"body":{"classes/AddTodoDto.html":{}}}],["true})@joincolumn({name",{"_index":629,"title":{},"body":{"entities/Todo.html":{}}}],["type",{"_index":23,"title":{},"body":{"classes/AddCategoryCommand.html":{},"classes/AddCategoryCommandHandler.html":{},"classes/AddCategoryDto.html":{},"classes/AddTodoCommand.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AddTodoDto.html":{},"classes/AllExceptionFilter.html":{},"entities/Category.html":{},"interfaces/Category-1.html":{},"controllers/CategoryController.html":{},"classes/CategoryDto.html":{},"classes/CategoryPresenter.html":{},"injectables/CategoryRepository.html":{},"classes/CategoryResponse.html":{},"classes/DeleteTodoCommand.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"classes/GetAllCategoryQueryHandler.html":{},"classes/GetAllTodoQueryHandler.html":{},"classes/GetTodoByIdQuery.html":{},"classes/GetTodoByIdQueryHandler.html":{},"interfaces/ICategoryRepsoitory.html":{},"interfaces/IError.html":{},"interfaces/IException.html":{},"interfaces/IFormatExceptionMessage.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagePresenter.html":{},"classes/ResponseFormat.html":{},"classes/ResponseFormat-1.html":{},"injectables/ResponseInterceptor.html":{},"injectables/ResponseInterceptor-1.html":{},"entities/Todo.html":{},"classes/TodoCategory.html":{},"controllers/TodoController.html":{},"classes/TodoPresenter.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"modules/TypeormConfigModule.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"classes/UpdateTodoDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":233,"title":{},"body":{"entities/Category.html":{},"entities/Todo.html":{},"dependencies.html":{}}}],["typeorm/repository/repository",{"_index":324,"title":{},"body":{"injectables/CategoryRepository.html":{},"injectables/TodoRepository.html":{}}}],["typeormconfigmodule",{"_index":208,"title":{"modules/TypeormConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TypeormConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["typeormmodule",{"_index":593,"title":{},"body":{"modules/RepositoriesModule.html":{},"modules/TypeormConfigModule.html":{}}}],["typeormmodule.forfeature([todo",{"_index":596,"title":{},"body":{"modules/RepositoriesModule.html":{}}}],["typeormmodule.forroot(typeormmoduleoptions",{"_index":810,"title":{},"body":{"modules/TypeormConfigModule.html":{}}}],["typeormmoduleoptions",{"_index":799,"title":{},"body":{"modules/TypeormConfigModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ui",{"_index":906,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":397,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["unauthorizedexception(data",{"_index":407,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{}}}],["undefined",{"_index":243,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["unit",{"_index":935,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":245,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TodoController.html":{}}}],["unlicensed",{"_index":955,"title":{},"body":{"properties.html":{}}}],["updatecommand",{"_index":824,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["updatecontent",{"_index":517,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["updatecontent(id",{"_index":528,"title":{},"body":{"interfaces/ITodoRepository.html":{},"injectables/TodoRepository.html":{}}}],["updatedatecolumn",{"_index":648,"title":{},"body":{"entities/Todo.html":{}}}],["updatedatecolumn({name",{"_index":644,"title":{},"body":{"entities/Todo.html":{}}}],["updateddate",{"_index":625,"title":{},"body":{"entities/Todo.html":{},"classes/TodoPresenter.html":{},"classes/TodoTask.html":{}}}],["updatetodo",{"_index":667,"title":{},"body":{"controllers/TodoController.html":{}}}],["updatetodo(@body",{"_index":706,"title":{},"body":{"controllers/TodoController.html":{}}}],["updatetodo(updatetododto",{"_index":678,"title":{},"body":{"controllers/TodoController.html":{}}}],["updatetodocommand",{"_index":691,"title":{"classes/UpdateTodoCommand.html":{}},"body":{"controllers/TodoController.html":{},"classes/UpdateTodoCommand.html":{},"classes/UpdateTodoCommandHandler.html":{},"coverage.html":{}}}],["updatetodocommand(id",{"_index":708,"title":{},"body":{"controllers/TodoController.html":{}}}],["updatetodocommandhandler",{"_index":817,"title":{"classes/UpdateTodoCommandHandler.html":{}},"body":{"classes/UpdateTodoCommandHandler.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["updatetododto",{"_index":679,"title":{"classes/UpdateTodoDto.html":{}},"body":{"controllers/TodoController.html":{},"classes/UpdateTodoDto.html":{},"coverage.html":{}}}],["url",{"_index":802,"title":{},"body":{"modules/TypeormConfigModule.html":{},"miscellaneous/variables.html":{}}}],["usecase",{"_index":923,"title":{},"body":{"index.html":{}}}],["usecase/usecase.module",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["usecasemodule",{"_index":196,"title":{"modules/UsecaseModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/UsecaseModule.html":{},"modules.html":{},"overview.html":{}}}],["useclass",{"_index":391,"title":{},"body":{"modules/ExceptionsModule.html":{},"modules/RepositoriesModule.html":{}}}],["user",{"_index":483,"title":{},"body":{"interfaces/IDatabaseConfig.html":{}}}],["validate",{"_index":40,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/DeleteTodoCommandHandler.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["validate(command",{"_index":51,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{}}}],["validate(deletetodocommand",{"_index":378,"title":{},"body":{"classes/DeleteTodoCommandHandler.html":{}}}],["validate(updatecommand",{"_index":821,"title":{},"body":{"classes/UpdateTodoCommandHandler.html":{}}}],["validator",{"_index":86,"title":{},"body":{"classes/AddCategoryDto.html":{},"classes/AddTodoDto.html":{},"classes/UpdateTodoDto.html":{},"dependencies.html":{}}}],["value",{"_index":964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":855,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":957,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbose",{"_index":498,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["verbose(context",{"_index":508,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["version",{"_index":952,"title":{},"body":{"properties.html":{}}}],["void",{"_index":53,"title":{},"body":{"classes/AddCategoryCommandHandler.html":{},"classes/AddTodoCommandHandler.html":{},"classes/AllExceptionFilter.html":{},"classes/DeleteTodoCommandHandler.html":{},"injectables/ExceptionsService.html":{},"interfaces/IException.html":{},"interfaces/ILogger.html":{},"injectables/LoggerService.html":{},"classes/UpdateTodoCommandHandler.html":{}}}],["warn",{"_index":499,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["warn(context",{"_index":510,"title":{},"body":{"interfaces/ILogger.html":{},"injectables/LoggerService.html":{}}}],["watch",{"_index":931,"title":{},"body":{"index.html":{}}}],["x",{"_index":344,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["x.content",{"_index":345,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["x.createdate",{"_index":349,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["x.getcontent",{"_index":361,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["x.getid",{"_index":365,"title":{},"body":{"injectables/CategoryRepository.html":{},"classes/GetAllCategoryQueryHandler.html":{}}}],["x.getisdone",{"_index":363,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["x.id",{"_index":348,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["x.isdone",{"_index":346,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["x.updateddate",{"_index":350,"title":{},"body":{"injectables/CategoryRepository.html":{}}}],["yes",{"_index":404,"title":{},"body":{"injectables/ExceptionsService.html":{},"interfaces/IException.html":{},"interfaces/ILogger.html":{},"interfaces/ITodoRepository.html":{},"injectables/LoggerService.html":{},"classes/TodoCategory.html":{},"injectables/TodoRepository.html":{},"classes/TodoResponse.html":{},"classes/TodoTask.html":{},"classes/UpdateTodoCommand.html":{}}}],["zoom",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules/UsecaseModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddCategoryCommand.html":{"url":"classes/AddCategoryCommand.html","title":"class - AddCategoryCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddCategoryCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/category/command/addCategory/addCategoryCommand.ts\n        \n\n\n            \n                Description\n            \n            \n                Command to add new category\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/category/command/addCategory/addCategoryCommand.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/category/command/addCategory/addCategoryCommand.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AddCategoryCommand {\n  constructor(public name: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddCategoryCommandHandler.html":{"url":"classes/AddCategoryCommandHandler.html","title":"class - AddCategoryCommandHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddCategoryCommandHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/category/command/addCategory/addCategoryCommandHandler.ts\n        \n\n\n            \n                Description\n            \n            \n                handles creating new category\n\n            \n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                            \n                                    Private\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: ICategoryRepsoitory, exception: IException)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/category/command/addCategory/addCategoryCommandHandler.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        ICategoryRepsoitory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exception\n                                                  \n                                                        \n                                                                        IException\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: AddCategoryCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/category/command/addCategory/addCategoryCommandHandler.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                AddCategoryCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(command: AddCategoryCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/category/command/addCategory/addCategoryCommandHandler.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                AddCategoryCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport {\n  IException,\n  IEXCEPTION,\n} from 'src/domain/interface/exception/IException';\nimport {\n  ICATEGORY_REPOSITORY,\n  ICategoryRepsoitory,\n} from 'src/domain/interface/repository/ICategoryRepository';\nimport { TodoCategory } from 'src/domain/model/TodoCategory';\nimport { AddCategoryCommand } from './addCategoryCommand';\n\n/**\n * handles creating new category\n */\n@CommandHandler(AddCategoryCommand)\nexport class AddCategoryCommandHandler\n  implements ICommandHandler\n{\n  constructor(\n    @Inject(ICATEGORY_REPOSITORY)\n    private readonly categoryRepository: ICategoryRepsoitory,\n    @Inject(IEXCEPTION) private readonly exception: IException,\n  ) {}\n\n  async execute(command: AddCategoryCommand): Promise {\n    this.validate(command);\n    const { name } = command;\n    await this.categoryRepository.insert(new TodoCategory(name));\n  }\n  private validate(command: AddCategoryCommand) {\n    const { name } = command;\n    if (!name || name === '')\n      this.exception.badRequestException({\n        message: 'Category name is required',\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddCategoryDto.html":{"url":"classes/AddCategoryDto.html","title":"class - AddCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/dto/addCategoryDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/addCategoryDto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class AddCategoryDto {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  readonly name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddTodoCommand.html":{"url":"classes/AddTodoCommand.html","title":"class - AddTodoCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddTodoCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/command/addTodo/addTodoCommand.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                isDone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(content: string, isDone: boolean, category: Category)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/command/addTodo/addTodoCommand.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        content\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isDone\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        Category\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/addTodo/addTodoCommand.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/addTodo/addTodoCommand.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/addTodo/addTodoCommand.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AddTodoCommand {\n  constructor(\n    public content: string,\n    public isDone: boolean,\n    public category: Category,\n  ) {}\n}\nexport interface Category {\n  id: number;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddTodoCommandHandler.html":{"url":"classes/AddTodoCommandHandler.html","title":"class - AddTodoCommandHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddTodoCommandHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/command/addTodo/addTodoCommandHandler.ts\n        \n\n\n            \n                Description\n            \n            \n                Handles creation of new todo\n\n            \n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                            \n                                    Private\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todoRepository: ITodoRepository, exception: IException)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/command/addTodo/addTodoCommandHandler.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todoRepository\n                                                  \n                                                        \n                                                                        ITodoRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exception\n                                                  \n                                                        \n                                                                        IException\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: AddTodoCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/command/addTodo/addTodoCommandHandler.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                AddTodoCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(command: AddTodoCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/command/addTodo/addTodoCommandHandler.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                AddTodoCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport {\n  IException,\n  IEXCEPTION,\n} from 'src/domain/interface/exception/IException';\nimport {\n  ITodoRepository,\n  ITODO_REPOSITORY,\n} from 'src/domain/interface/repository/ITodoRepository';\nimport { TodoCategory } from 'src/domain/model/TodoCategory';\nimport { TodoTask } from 'src/domain/model/TodoTask';\nimport { AddTodoCommand } from './addTodoCommand';\n/**\n * Handles creation of new todo\n */\n@CommandHandler(AddTodoCommand)\nexport class AddTodoCommandHandler implements ICommandHandler {\n  constructor(\n    @Inject(ITODO_REPOSITORY) private readonly todoRepository: ITodoRepository,\n    @Inject(IEXCEPTION) private readonly exception: IException,\n  ) {}\n\n  async execute(command: AddTodoCommand): Promise {\n    this.validate(command);\n    const { content, isDone, category } = command;\n    await this.todoRepository.insert(\n      new TodoTask(\n        content,\n        isDone,\n        new TodoCategory(category.name, category.id),\n      ),\n    );\n  }\n\n  private validate(command: AddTodoCommand): void {\n    const { content, category } = command;\n    if (!content)\n      this.exception.badRequestException({\n        message: 'The content is required',\n      });\n    if (!category && !category.id)\n      this.exception.badRequestException({\n        message: 'The Todo category is required',\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddTodoDto.html":{"url":"classes/AddTodoDto.html","title":"class - AddTodoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/dto/addTodoDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                category\n                            \n                            \n                                    Readonly\n                                content\n                            \n                            \n                                    Optional\n                                isDone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/addTodoDto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/addTodoDto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({default: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/addTodoDto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsNotEmpty, IsObject, IsString } from 'class-validator';\nimport { CategoryDto } from './categprydto';\n\nexport class AddTodoDto {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  readonly content: string;\n\n  @ApiProperty({ default: false })\n  @IsBoolean()\n  isDone?: boolean;\n\n  @ApiProperty({ required: true })\n  @IsObject()\n  readonly category: CategoryDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionFilter.html":{"url":"classes/AllExceptionFilter.html","title":"class - AllExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/filter/AllExceptionFilter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                logMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/filter/AllExceptionFilter.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/filter/AllExceptionFilter.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        logMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    logMessage(request: any, message: IError, status: number, exception: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/filter/AllExceptionFilter.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                IError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { IError } from 'src/domain/interface/exception/IError';\nimport { LoggerService } from '../logger/logger.service';\n\n@Catch()\nexport class AllExceptionFilter implements ExceptionFilter {\n  constructor(private readonly logger: LoggerService) {}\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request: any = ctx.getRequest();\n\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n    const message =\n      exception instanceof HttpException\n        ? (exception.getResponse() as IError)\n        : { message: (exception as Error).message, code_error: null };\n\n    const responseData = {\n      ...{\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        path: request.url,\n      },\n      ...message,\n    };\n\n    this.logMessage(request, message, status, exception);\n\n    response.status(status).json(responseData);\n  }\n\n  private logMessage(\n    request: any,\n    message: IError,\n    status: number,\n    exception: any,\n  ) {\n    if (status === 500) {\n      this.logger.error(\n        `End Request for ${request.path}`,\n        `method=${request.method} status=${status} code_error=${\n          message.code_error ? message.code_error : null\n        } message=${message.message ? message.message : null}`,\n        status >= 500 ? exception.stack : '',\n      );\n    } else {\n      this.logger.warn(\n        `End Request for ${request.path}`,\n        `method=${request.method} status=${status} code_error=${\n          message.code_error ? message.code_error : null\n        } message=${message.message ? message.message : null}`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/api.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            TodoController\n                        \n                        \n                            CategoryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { UsecaseModule } from 'src/usecase/usecase.module';\nimport { TodoController } from './controller/todo/todo.controller';\nimport { CategoryController } from './controller/category/category.controller';\n\n@Module({\n  controllers: [TodoController, CategoryController],\n  imports: [CqrsModule],\n})\nexport class ApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nExceptionsModule\n\nExceptionsModule\n\nAppModule -->\n\nExceptionsModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nRepositoriesModule\n\nRepositoriesModule\n\nAppModule -->\n\nRepositoriesModule->AppModule\n\n\n\n\n\nTypeormConfigModule\n\nTypeormConfigModule\n\nAppModule -->\n\nTypeormConfigModule->AppModule\n\n\n\n\n\nUsecaseModule\n\nUsecaseModule\n\nAppModule -->\n\nUsecaseModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ApiModule\n                        \n                        \n                            ExceptionsModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            RepositoriesModule\n                        \n                        \n                            TypeormConfigModule\n                        \n                        \n                            UsecaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LoggerModule } from './infrastructure/logger/logger.module';\nimport { ExceptionsModule } from './infrastructure/exceptions/exceptions.module';\nimport { RepositoriesModule } from './infrastructure/repositories/repositories.module';\nimport { ApiModule } from './api/api.module';\nimport { UsecaseModule } from './usecase/usecase.module';\nimport { TypeormConfigModule } from './infrastructure/config/typeorm/typeorm.module';\n\n@Module({\n  imports: [\n    LoggerModule,\n    ExceptionsModule,\n    ApiModule,\n    UsecaseModule,\n    TypeormConfigModule,\n    RepositoriesModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/enity/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                todo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/category.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/category.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        todo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Todo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, todo => todo.category, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/category.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Todo } from 'src/infrastructure/enity/todo.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n@Entity()\nexport class Category {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @OneToMany(() => Todo, (todo) => todo.category, { onDelete: 'CASCADE' })\n  todo: Todo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Category-1.html":{"url":"interfaces/Category-1.html","title":"interface - Category-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/command/addTodo/addTodoCommand.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export class AddTodoCommand {\n  constructor(\n    public content: string,\n    public isDone: boolean,\n    public category: Category,\n  ) {}\n}\nexport interface Category {\n  id: number;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/controller/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCategory\n                            \n                            \n                                    Async\n                                getCategories\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCategory(addcategory: AddCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiResponseType(MessagePresenter, undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/controller/category/category.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    addcategory\n                                    \n                                                AddCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCategories\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategories()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponseType(CategoryPresenter, undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/controller/category/category.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { ApiResponseType } from 'src/api/common/apiResponseDecorator';\nimport { CategoryPresenter } from 'src/api/presenter/categoryPresenter';\nimport { GetAllCategoryQuery } from 'src/usecase/category/query/getAllCategory/getAllCategoryQuery';\nimport { AddCategoryDto } from 'src/api/dto/addCategoryDto';\nimport { AddCategoryCommand } from 'src/usecase/category/command/addCategory/addCategoryCommand';\nimport { CategoryResponse } from 'src/usecase/category/query/getAllCategory/categoryResponse';\nimport { ApiExtraModels, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { MessagePresenter } from 'src/api/presenter/messagePresenter';\n\n@Controller('category')\n@ApiTags('category')\n@ApiResponse({ status: 500, description: 'Internal error' })\n@ApiExtraModels(CategoryPresenter)\nexport class CategoryController {\n  constructor(\n    private readonly commandBus: CommandBus,\n    private readonly queryBus: QueryBus,\n  ) {}\n\n  @Get()\n  @ApiResponseType(CategoryPresenter, true)\n  async getCategories() {\n    const categories = await this.queryBus.execute(new GetAllCategoryQuery());\n    return categories?.map((category) => new CategoryPresenter(category));\n  }\n\n  @Post()\n  @ApiResponseType(MessagePresenter, false)\n  async addCategory(@Body() addcategory: AddCategoryDto) {\n    const { name } = addcategory;\n    await this.commandBus.execute(new AddCategoryCommand(name));\n    return { message: 'success' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryDto.html":{"url":"classes/CategoryDto.html","title":"class - CategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/dto/categprydto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/categprydto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/categprydto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CategoryDto {\n  @ApiProperty()\n  id: number;\n  @ApiProperty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryPresenter.html":{"url":"classes/CategoryPresenter.html","title":"class - CategoryPresenter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryPresenter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/presenter/categoryPresenter.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(category: CategoryResponse)\n                    \n                \n                        \n                            \n                                Defined in src/api/presenter/categoryPresenter.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        CategoryResponse\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/categoryPresenter.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/categoryPresenter.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { TodoCategory } from 'src/domain/model/TodoCategory';\nimport { CategoryResponse } from 'src/usecase/category/query/getAllCategory/categoryResponse';\n\nexport class CategoryPresenter {\n  @ApiProperty()\n  id: number;\n  @ApiProperty()\n  name: string;\n  constructor(category: CategoryResponse) {\n    this.id = category.id;\n    this.name = category.name;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryRepository.html":{"url":"injectables/CategoryRepository.html","title":"injectable - CategoryRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/repositories/category.repossitory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByName\n                            \n                            \n                                    Async\n                                insert\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Private\n                                toEntity\n                            \n                            \n                                    Private\n                                toModel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/repositories/category.repossitory.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/category.repossitory.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/category.repossitory.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/category.repossitory.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(category: TodoCategory)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/category.repossitory.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                TodoCategory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/category.repossitory.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toEntity\n                        \n                    \n                \n            \n            \n                \n                    \n                    toEntity(todoModel: TodoCategory)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/category.repossitory.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    todoModel\n                                    \n                                                TodoCategory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Category\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toModel\n                        \n                    \n                \n            \n            \n                \n                    \n                    toModel(categoryEntity: Category)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/category.repossitory.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryEntity\n                                    \n                                                Category\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TodoCategory\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TodoTask } from 'src/domain/model/TodoTask';\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ICategoryRepsoitory } from 'src/domain/interface/repository/ICategoryRepository';\nimport { TodoCategory } from 'src/domain/model/TodoCategory';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { Category } from '../enity/category.entity';\nimport { Todo } from '../enity/todo.entity';\n\n@Injectable()\nexport class CategoryRepository implements ICategoryRepsoitory {\n  constructor(\n    @InjectRepository(Category)\n    private readonly categoryRepo: Repository,\n  ) {}\n  async getAll(): Promise {\n    const category = await this.categoryRepo.find({\n      select: ['id', 'name'],\n    });\n\n    return category?.map((entity) => this.toModel(entity));\n  }\n  async getById(id: number): Promise {\n    const todo = await this.categoryRepo.findOneByOrFail({ id });\n    return this.toModel(todo);\n  }\n  async getByName(name: string): Promise {\n    const category = await this.categoryRepo.findOneBy({ name });\n    return this.toModel(category);\n  }\n  async insert(category: TodoCategory): Promise {\n    const catEntity = this.toEntity(category);\n    await this.categoryRepo.insert(catEntity);\n  }\n  async remove(id: number): Promise {\n    await this.categoryRepo.delete(id);\n  }\n  private toModel(categoryEntity: Category): TodoCategory {\n    if (categoryEntity) {\n      const category: TodoCategory = new TodoCategory(\n        categoryEntity.name,\n        categoryEntity.id,\n        categoryEntity.todo\n          ? categoryEntity.todo.map(\n              (x) =>\n                new TodoTask(\n                  x.content,\n                  x.isDone,\n                  new TodoCategory(x.category.name, x.id),\n                  x.id,\n                  x.createdate,\n                  x.updateddate,\n                ),\n            )\n          : null,\n      );\n      return category;\n    }\n    return null;\n  }\n  private toEntity(todoModel: TodoCategory): Category {\n    const todoEntity: Category = new Category();\n\n    if (todoModel) {\n      todoEntity.id = todoModel.getId();\n      todoEntity.name = todoModel.getName();\n      todoEntity.todo = todoModel.getTodo()\n        ? todoModel.getTodo()?.map((x) => {\n            const t = new Todo();\n            (t.content = x.getContent()), (t.isDone = x.getIsDone());\n            t.id = x.getId();\n            return t;\n          })\n        : null;\n    }\n\n    return todoEntity;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryResponse.html":{"url":"classes/CategoryResponse.html","title":"class - CategoryResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/category/query/getAllCategory/categoryResponse.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, id: number)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/category/query/getAllCategory/categoryResponse.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/category/query/getAllCategory/categoryResponse.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/category/query/getAllCategory/categoryResponse.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CategoryResponse {\n  constructor(public readonly name: string, public readonly id: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteTodoCommand.html":{"url":"classes/DeleteTodoCommand.html","title":"class - DeleteTodoCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteTodoCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/command/deleteTodo/deleteTodoCommand.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/command/deleteTodo/deleteTodoCommand.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/deleteTodo/deleteTodoCommand.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DeleteTodoCommand {\n  constructor(public id: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteTodoCommandHandler.html":{"url":"classes/DeleteTodoCommandHandler.html","title":"class - DeleteTodoCommandHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteTodoCommandHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/command/deleteTodo/deleteTodoCommandHandler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                            \n                                    Private\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todoRepository: ITodoRepository, exception: IException)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/command/deleteTodo/deleteTodoCommandHandler.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todoRepository\n                                                  \n                                                        \n                                                                        ITodoRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exception\n                                                  \n                                                        \n                                                                        IException\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: DeleteTodoCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/command/deleteTodo/deleteTodoCommandHandler.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                DeleteTodoCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(deleteTodoCommand: DeleteTodoCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/command/deleteTodo/deleteTodoCommandHandler.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    deleteTodoCommand\n                                    \n                                                DeleteTodoCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport {\n  IException,\n  IEXCEPTION,\n} from 'src/domain/interface/exception/IException';\nimport {\n  ITodoRepository,\n  ITODO_REPOSITORY,\n} from 'src/domain/interface/repository/ITodoRepository';\nimport { DeleteTodoCommand } from './deleteTodoCommand';\n\n@CommandHandler(DeleteTodoCommand)\nexport class DeleteTodoCommandHandler\n  implements ICommandHandler\n{\n  constructor(\n    @Inject(ITODO_REPOSITORY) private readonly todoRepository: ITodoRepository,\n    @Inject(IEXCEPTION) private readonly exception: IException,\n  ) {}\n  async execute(command: DeleteTodoCommand): Promise {\n    this.validate(command);\n    const { id } = command;\n    await this.todoRepository.deleteById(id);\n  }\n  private validate(deleteTodoCommand: DeleteTodoCommand) {\n    const { id } = deleteTodoCommand;\n    if (!id || id == 0)\n      this.exception.badRequestException({\n        message: 'The item id to be deleted must be set',\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExceptionsModule.html":{"url":"modules/ExceptionsModule.html","title":"module - ExceptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    ExceptionsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/exceptions/exceptions.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { IEXCEPTION } from 'src/domain/interface/exception/IException';\nimport { ExceptionsService } from './exceptions.service';\n\n@Module({\n  providers: [\n    {\n      provide: IEXCEPTION,\n      useClass: ExceptionsService,\n    },\n  ],\n  exports: [IEXCEPTION],\n})\nexport class ExceptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionsService.html":{"url":"injectables/ExceptionsService.html","title":"injectable - ExceptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/exceptions/exceptions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                badRequestException\n                            \n                            \n                                forbiddenException\n                            \n                            \n                                internalServerErrorException\n                            \n                            \n                                UnauthorizedException\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        badRequestException\n                        \n                    \n                \n            \n            \n                \nbadRequestException(data: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/exceptions/exceptions.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forbiddenException\n                        \n                    \n                \n            \n            \n                \nforbiddenException(data?: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/exceptions/exceptions.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        internalServerErrorException\n                        \n                    \n                \n            \n            \n                \ninternalServerErrorException(data?: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/exceptions/exceptions.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UnauthorizedException\n                        \n                    \n                \n            \n            \n                \nUnauthorizedException(data?: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/exceptions/exceptions.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable,\n  InternalServerErrorException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { IException } from 'src/domain/interface/exception/IException';\nimport { IFormatExceptionMessage } from 'src/domain/interface/exception/IFormatExceptionMessage';\n\n@Injectable()\nexport class ExceptionsService implements IException {\n  badRequestException(data: IFormatExceptionMessage): void {\n    throw new BadRequestException(data);\n  }\n  internalServerErrorException(data?: IFormatExceptionMessage): void {\n    throw new InternalServerErrorException(data);\n  }\n  forbiddenException(data?: IFormatExceptionMessage): void {\n    throw new ForbiddenException(data);\n  }\n  UnauthorizedException(data?: IFormatExceptionMessage): void {\n    throw new UnauthorizedException(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllCategoryQuery.html":{"url":"classes/GetAllCategoryQuery.html","title":"class - GetAllCategoryQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllCategoryQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/category/query/getAllCategory/getAllCategoryQuery.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetAllCategoryQuery {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllCategoryQueryHandler.html":{"url":"classes/GetAllCategoryQueryHandler.html","title":"class - GetAllCategoryQueryHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllCategoryQueryHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/category/query/getAllCategory/getAllCategoryQueryHandler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepoitory: ICategoryRepsoitory)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/category/query/getAllCategory/getAllCategoryQueryHandler.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepoitory\n                                                  \n                                                        \n                                                                        ICategoryRepsoitory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(_: GetAllCategoryQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/category/query/getAllCategory/getAllCategoryQueryHandler.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                GetAllCategoryQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport {\n  ICATEGORY_REPOSITORY,\n  ICategoryRepsoitory,\n} from 'src/domain/interface/repository/ICategoryRepository';\nimport { CategoryResponse } from './categoryResponse';\nimport { GetAllCategoryQuery } from './getAllCategoryQuery';\n\n@QueryHandler(GetAllCategoryQuery)\nexport class GetAllCategoryQueryHandler\n  implements IQueryHandler\n{\n  constructor(\n    @Inject(ICATEGORY_REPOSITORY)\n    private readonly categoryRepoitory: ICategoryRepsoitory,\n  ) {}\n  async execute(_: GetAllCategoryQuery): Promise {\n    const categories = await this.categoryRepoitory.getAll();\n    return categories?.map((x) => new CategoryResponse(x.getName(), x.getId()));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllTodoQuery.html":{"url":"classes/GetAllTodoQuery.html","title":"class - GetAllTodoQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllTodoQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/query/getAllTodo/getAllTodoQuery.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetAllTodoQuery {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllTodoQueryHandler.html":{"url":"classes/GetAllTodoQueryHandler.html","title":"class - GetAllTodoQueryHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllTodoQueryHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/query/getAllTodo/getAllTodoQueryHandler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todoRepository: ITodoRepository)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/query/getAllTodo/getAllTodoQueryHandler.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todoRepository\n                                                  \n                                                        \n                                                                        ITodoRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(_: GetAllTodoQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/query/getAllTodo/getAllTodoQueryHandler.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                GetAllTodoQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport {\n  ITodoRepository,\n  ITODO_REPOSITORY,\n} from 'src/domain/interface/repository/ITodoRepository';\nimport { TodoResponse } from '../getTodoResponse';\nimport { GetAllTodoQuery } from './getAllTodoQuery';\n\n@QueryHandler(GetAllTodoQuery)\nexport class GetAllTodoQueryHandler\n  implements IQueryHandler\n{\n  constructor(\n    @Inject(ITODO_REPOSITORY) private readonly todoRepository: ITodoRepository,\n  ) {}\n  async execute(_: GetAllTodoQuery): Promise {\n    const todos = await this.todoRepository.findAll();\n    return todos?.map(\n      (todo) =>\n        new TodoResponse(\n          todo.getId(),\n          todo.getContent(),\n          todo.getIsDone(),\n          todo.getCreatedDate(),\n          {\n            id: todo.getCategory()?.getId(),\n            name: todo.getCategory().getName(),\n          },\n        ),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTodoByIdQuery.html":{"url":"classes/GetTodoByIdQuery.html","title":"class - GetTodoByIdQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTodoByIdQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/query/getAllTodoById/getTodoByIdQuery.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/query/getAllTodoById/getTodoByIdQuery.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/query/getAllTodoById/getTodoByIdQuery.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetTodoByIdQuery {\n  constructor(public id: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTodoByIdQueryHandler.html":{"url":"classes/GetTodoByIdQueryHandler.html","title":"class - GetTodoByIdQueryHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTodoByIdQueryHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/query/getAllTodoById/getTodoByIdQueryHandler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todoRepository: ITodoRepository)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/query/getAllTodoById/getTodoByIdQueryHandler.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todoRepository\n                                                  \n                                                        \n                                                                        ITodoRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(query: GetTodoByIdQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/query/getAllTodoById/getTodoByIdQueryHandler.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                GetTodoByIdQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport {\n  ITodoRepository,\n  ITODO_REPOSITORY,\n} from 'src/domain/interface/repository/ITodoRepository';\nimport { TodoResponse } from '../getTodoResponse';\nimport { GetTodoByIdQuery } from './getTodoByIdQuery';\n\n@QueryHandler(GetTodoByIdQuery)\nexport class GetTodoByIdQueryHandler\n  implements IQueryHandler\n{\n  constructor(\n    @Inject(ITODO_REPOSITORY) private readonly todoRepository: ITodoRepository,\n  ) {}\n  async execute(query: GetTodoByIdQuery): Promise {\n    const { id } = query;\n    const todo = await this.todoRepository.findById(id);\n    if (todo) return;\n    new TodoResponse(\n      todo.getId(),\n      todo.getContent(),\n      todo.getIsDone(),\n      todo.getCreatedDate(),\n      { id: todo.getCategory()?.getId(), name: todo.getCategory()?.getName() },\n    );\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICategoryRepsoitory.html":{"url":"interfaces/ICategoryRepsoitory.html","title":"interface - ICategoryRepsoitory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICategoryRepsoitory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/interface/repository/ICategoryRepository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getAll\n                                    \n                                \n                                \n                                    \n                                        getById\n                                    \n                                \n                                \n                                    \n                                        getByName\n                                    \n                                \n                                \n                                    \n                                        insert\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ICategoryRepository.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ICategoryRepository.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByName\n                        \n                    \n                \n            \n            \n                \ngetByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ICategoryRepository.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert(category: TodoCategory)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ICategoryRepository.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                TodoCategory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ICategoryRepository.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TodoCategory } from 'src/domain/model/TodoCategory';\nexport const ICATEGORY_REPOSITORY = 'ICategoryRepsoitory';\nexport interface ICategoryRepsoitory {\n  getByName(name: string): Promise;\n  insert(category: TodoCategory): Promise;\n  remove(id: number): Promise;\n  getById(id: number): Promise;\n  getAll(): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDatabaseConfig.html":{"url":"interfaces/IDatabaseConfig.html","title":"interface - IDatabaseConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDatabaseConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/interface/config/IDatabaseConfig.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getDatabaseHost\n                                    \n                                \n                                \n                                    \n                                        getDatabaseName\n                                    \n                                \n                                \n                                    \n                                        getDatabasePassword\n                                    \n                                \n                                \n                                    \n                                        getDatabasePort\n                                    \n                                \n                                \n                                    \n                                        getDatabaseSchema\n                                    \n                                \n                                \n                                    \n                                        getDatabaseSync\n                                    \n                                \n                                \n                                    \n                                        getDatabaseUser\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDatabaseHost\n                        \n                    \n                \n            \n            \n                \ngetDatabaseHost()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/config/IDatabaseConfig.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDatabaseName\n                        \n                    \n                \n            \n            \n                \ngetDatabaseName()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/config/IDatabaseConfig.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDatabasePassword\n                        \n                    \n                \n            \n            \n                \ngetDatabasePassword()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/config/IDatabaseConfig.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDatabasePort\n                        \n                    \n                \n            \n            \n                \ngetDatabasePort()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/config/IDatabaseConfig.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDatabaseSchema\n                        \n                    \n                \n            \n            \n                \ngetDatabaseSchema()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/config/IDatabaseConfig.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDatabaseSync\n                        \n                    \n                \n            \n            \n                \ngetDatabaseSync()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/config/IDatabaseConfig.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDatabaseUser\n                        \n                    \n                \n            \n            \n                \ngetDatabaseUser()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/config/IDatabaseConfig.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface IDatabaseConfig {\n  /**\n   * @summary Get the database host\n   * @returns string\n   */\n  getDatabaseHost(): string;\n  /**\n   * @summary Get the database port\n   * @returns number\n   */\n  getDatabasePort(): number;\n  /**\n   * @summary Get the datase user name\n   * @returns string\n   */\n  getDatabaseUser(): string;\n  /**\n   * @summary Get the database password\n   * @returns string\n   */\n  getDatabasePassword(): string;\n  /**\n   * @summary Get database name\n   * @returns string\n   */\n  getDatabaseName(): string;\n  /**\n   * @summary Get database schema\n   * @returns string\n   */\n  getDatabaseSchema(): string;\n  /**\n   * @summary Get database sync\n   * @returns boolean\n   */\n  getDatabaseSync(): boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IError.html":{"url":"interfaces/IError.html","title":"interface - IError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/interface/exception/IError.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code_error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code_error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code_error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IError {\n  message: string;\n  code_error: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IException.html":{"url":"interfaces/IException.html","title":"interface - IException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/interface/exception/IException.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        badRequestException\n                                    \n                                \n                                \n                                    \n                                        forbiddenException\n                                    \n                                \n                                \n                                    \n                                        internalServerErrorException\n                                    \n                                \n                                \n                                    \n                                        UnauthorizedException\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        badRequestException\n                        \n                    \n                \n            \n            \n                \nbadRequestException(data: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/exception/IException.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forbiddenException\n                        \n                    \n                \n            \n            \n                \nforbiddenException(data?: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/exception/IException.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        internalServerErrorException\n                        \n                    \n                \n            \n            \n                \ninternalServerErrorException(data?: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/exception/IException.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UnauthorizedException\n                        \n                    \n                \n            \n            \n                \nUnauthorizedException(data?: IFormatExceptionMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/exception/IException.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                IFormatExceptionMessage\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { IFormatExceptionMessage } from './IFormatExceptionMessage';\nexport const IEXCEPTION = 'IException';\nexport interface IException {\n  badRequestException(data: IFormatExceptionMessage): void;\n  internalServerErrorException(data?: IFormatExceptionMessage): void;\n  forbiddenException(data?: IFormatExceptionMessage): void;\n  UnauthorizedException(data?: IFormatExceptionMessage): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFormatExceptionMessage.html":{"url":"interfaces/IFormatExceptionMessage.html","title":"interface - IFormatExceptionMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFormatExceptionMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/interface/exception/IFormatExceptionMessage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            code_error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code_error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code_error:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IFormatExceptionMessage {\n  message: string;\n  code_error?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILogger.html":{"url":"interfaces/ILogger.html","title":"interface - ILogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ILogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/interface/logger/ILogger.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        debug\n                                    \n                                \n                                \n                                    \n                                        error\n                                    \n                                \n                                \n                                    \n                                        log\n                                    \n                                \n                                \n                                    \n                                        verbose\n                                    \n                                \n                                \n                                    \n                                        warn\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/logger/ILogger.ts:2\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(context: string, message: string, trace?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/logger/ILogger.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/logger/ILogger.ts:3\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/logger/ILogger.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/logger/ILogger.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ILogger {\n  debug(context: string, message: string): void;\n  log(context: string, message: string): void;\n  error(context: string, message: string, trace?: string): void;\n  warn(context: string, message: string): void;\n  verbose(context: string, message: string): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITodoRepository.html":{"url":"interfaces/ITodoRepository.html","title":"interface - ITodoRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ITodoRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/interface/repository/ITodoRepository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        deleteById\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findById\n                                    \n                                \n                                \n                                    \n                                        getByCategoryName\n                                    \n                                \n                                \n                                    \n                                        insert\n                                    \n                                \n                                \n                                    \n                                        updateContent\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteById\n                        \n                    \n                \n            \n            \n                \ndeleteById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ITodoRepository.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ITodoRepository.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ITodoRepository.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByCategoryName\n                        \n                    \n                \n            \n            \n                \ngetByCategoryName(categoryName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ITodoRepository.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert(todo: TodoTask)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ITodoRepository.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    todo\n                                    \n                                                TodoTask\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateContent\n                        \n                    \n                \n            \n            \n                \nupdateContent(id: number, content: string, isDone?: boolean, categoryId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/domain/interface/repository/ITodoRepository.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isDone\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    categoryId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TodoTask } from 'src/domain/model/TodoTask';\nexport const ITODO_REPOSITORY = 'ITodoRepository';\nexport interface ITodoRepository {\n  insert(todo: TodoTask): Promise;\n  findAll(): Promise;\n  findById(id: number): Promise;\n  updateContent(\n    id: number,\n    content: string,\n    isDone?: boolean,\n    categoryId?: number,\n  ): Promise;\n  deleteById(id: number): Promise;\n  getByCategoryName(categoryName: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nLoggerService\n\nLoggerService\n\n\n\nLoggerModule\n\nLoggerModule\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LoggerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LoggerService } from './logger.service';\n\n@Module({\n  providers: [LoggerService]\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Logger\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/logger/logger.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(context: string, message: string, trace?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/logger/logger.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/logger/logger.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/logger/logger.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(context: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/logger/logger.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ILogger } from 'src/domain/interface/logger/ILogger';\n\n/**\n * @summary adapter service for nestjs logger\n */\n@Injectable()\nexport class LoggerService extends Logger implements ILogger {\n  debug(context: string, message: string) {\n    if (process.env.NODE_ENV !== 'production') {\n      super.debug(`[DEBUG] ${message}`, context);\n    }\n  }\n  log(context: string, message: string) {\n    super.log(`[INFO] ${message}`, context);\n  }\n  error(context: string, message: string, trace?: string) {\n    super.error(`[ERROR] ${message}`, trace, context);\n  }\n  warn(context: string, message: string) {\n    super.warn(`[WARN] ${message}`, context);\n  }\n  verbose(context: string, message: string) {\n    if (process.env.NODE_ENV !== 'production') {\n      super.verbose(`[VERBOSE] ${message}`, context);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/Interceptor/logging/LoggingInterceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getIP\n                            \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/Interceptor/logging/LoggingInterceptor.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getIP\n                        \n                    \n                \n            \n            \n                \n                    \n                    getIP(request: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/Interceptor/logging/LoggingInterceptor.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/Interceptor/logging/LoggingInterceptor.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  LoggerService,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable, tap } from 'rxjs';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  constructor(private readonly logger: LoggerService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const now = Date.now();\n    const httpContext = context.switchToHttp();\n    const request = httpContext.getRequest();\n\n    const ip = this.getIP(request);\n\n    this.logger.log(\n      `Incoming Request on ${request.path}`,\n      `method=${request.method} ip=${ip}`,\n    );\n\n    return next.handle().pipe(\n      tap(() => {\n        this.logger.log(\n          `End Request for ${request.path}`,\n          `method=${request.method} ip=${ip} duration=${Date.now() - now}ms`,\n        );\n      }),\n    );\n  }\n\n  private getIP(request: any): string {\n    let ip: string;\n    const ipAddr = request.headers['x-forwarded-for'];\n    if (ipAddr) {\n      const list = ipAddr.split(',');\n      ip = list[list.length - 1];\n    } else {\n      ip = request.connection.remoteAddress;\n    }\n    return ip.replace('::ffff:', '');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessagePresenter.html":{"url":"classes/MessagePresenter.html","title":"class - MessagePresenter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessagePresenter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/presenter/messagePresenter.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/messagePresenter.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class MessagePresenter {\n  @ApiProperty()\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepositoriesModule.html":{"url":"modules/RepositoriesModule.html","title":"module - RepositoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    RepositoriesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/repositories/repositories.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ICATEGORY_REPOSITORY } from 'src/domain/interface/repository/ICategoryRepository';\nimport { ITODO_REPOSITORY } from 'src/domain/interface/repository/ITodoRepository';\nimport { Category } from '../enity/category.entity';\nimport { Todo } from '../enity/todo.entity';\nimport { CategoryRepository } from './category.repossitory';\nimport { TodoRepository } from './todo.repository';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Todo, Category])],\n  providers: [\n    {\n      provide: ITODO_REPOSITORY,\n      useClass: TodoRepository,\n    },\n    {\n      provide: ICATEGORY_REPOSITORY,\n      useClass: CategoryRepository,\n    },\n  ],\n  exports: [ITODO_REPOSITORY, ICATEGORY_REPOSITORY],\n})\nexport class RepositoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseFormat.html":{"url":"classes/ResponseFormat.html","title":"class - ResponseFormat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseFormat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/common/responseInterceptor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                duration\n                            \n                            \n                                isArray\n                            \n                            \n                                method\n                            \n                            \n                                path\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/api/common/responseInterceptor.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/common/responseInterceptor.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isArray\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/common/responseInterceptor.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/common/responseInterceptor.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/common/responseInterceptor.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n *\n */\nexport class ResponseFormat {\n  @ApiProperty()\n  isArray: boolean;\n  @ApiProperty()\n  path: string;\n  @ApiProperty()\n  duration: string;\n  @ApiProperty()\n  method: string;\n\n  data: T;\n}\n\n/**\n *\n */\n@Injectable()\nexport class ResponseInterceptor\n  implements NestInterceptor>\n{\n  /**\n   *\n   * @param context\n   * @param next\n   * @returns Observable>\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    const now = Date.now();\n    const httpContext = context.switchToHttp();\n    const request = httpContext.getRequest();\n\n    return next.handle().pipe(\n      map((data) => ({\n        data,\n        isArray: Array.isArray(data),\n        path: request.path,\n        duration: `${Date.now() - now}ms`,\n        method: request.method,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseFormat-1.html":{"url":"classes/ResponseFormat-1.html","title":"class - ResponseFormat-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseFormat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/Interceptor/response/ResponseFormat.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                duration\n                            \n                            \n                                isArray\n                            \n                            \n                                method\n                            \n                            \n                                path\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/Interceptor/response/ResponseFormat.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/Interceptor/response/ResponseFormat.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isArray\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/Interceptor/response/ResponseFormat.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/Interceptor/response/ResponseFormat.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/Interceptor/response/ResponseFormat.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ResponseFormat {\n  @ApiProperty()\n  isArray: boolean;\n  @ApiProperty()\n  path: string;\n  @ApiProperty()\n  duration: string;\n  @ApiProperty()\n  method: string;\n\n  data: T;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseInterceptor.html":{"url":"injectables/ResponseInterceptor.html","title":"injectable - ResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/common/responseInterceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/api/common/responseInterceptor.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        Observable>\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n *\n */\nexport class ResponseFormat {\n  @ApiProperty()\n  isArray: boolean;\n  @ApiProperty()\n  path: string;\n  @ApiProperty()\n  duration: string;\n  @ApiProperty()\n  method: string;\n\n  data: T;\n}\n\n/**\n *\n */\n@Injectable()\nexport class ResponseInterceptor\n  implements NestInterceptor>\n{\n  /**\n   *\n   * @param context\n   * @param next\n   * @returns Observable>\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    const now = Date.now();\n    const httpContext = context.switchToHttp();\n    const request = httpContext.getRequest();\n\n    return next.handle().pipe(\n      map((data) => ({\n        data,\n        isArray: Array.isArray(data),\n        path: request.path,\n        duration: `${Date.now() - now}ms`,\n        method: request.method,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseInterceptor-1.html":{"url":"injectables/ResponseInterceptor-1.html","title":"injectable - ResponseInterceptor-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/Interceptor/response/ResponseInterceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/Interceptor/response/ResponseInterceptor.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { map, Observable } from 'rxjs';\nimport { ResponseFormat } from './ResponseFormat';\n\n@Injectable()\nexport class ResponseInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    const now = Date.now();\n    const httpContext = context.switchToHttp();\n    const request = httpContext.getRequest();\n\n    return next.handle().pipe(\n      map((data) => ({\n        data,\n        isArray: Array.isArray(data),\n        path: request.path,\n        duration: `${Date.now() - now}ms`,\n        method: request.method,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Todo.html":{"url":"entities/Todo.html","title":"entity - Todo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Todo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/enity/todo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                content\n                            \n                            \n                                createdate\n                            \n                            \n                                id\n                            \n                            \n                                isDone\n                            \n                            \n                                updateddate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, category => category.todo, {onDelete: 'CASCADE', eager: true})@JoinColumn({name: 'categoryId'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/todo.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/todo.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'createdate'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/todo.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/todo.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('boolean', {default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/todo.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateddate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updateddate'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/enity/todo.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Category } from './category.entity';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\n\n@Entity('todo')\nexport class Todo {\n  @PrimaryGeneratedColumn({ type: 'integer' })\n  id: number;\n\n  @Column('varchar', { length: 255, nullable: true })\n  content: string;\n\n  @Column('boolean', { default: false })\n  isDone: boolean;\n\n  @CreateDateColumn({ name: 'createdate' })\n  createdate: Date;\n\n  @UpdateDateColumn({ name: 'updateddate' })\n  updateddate: Date;\n\n  @ManyToOne(() => Category, (category) => category.todo, {\n    onDelete: 'CASCADE',\n    eager: true,\n  })\n  @JoinColumn({ name: 'categoryId' })\n  category: Category;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TodoCategory.html":{"url":"classes/TodoCategory.html","title":"class - TodoCategory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TodoCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/model/TodoCategory.ts\n        \n\n\n            \n                Description\n            \n            \n                Categoey model\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getId\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTodo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, id?: number, todo?: TodoTask[])\n                    \n                \n                        \n                            \n                                Defined in src/domain/model/TodoCategory.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        todo\n                                                  \n                                                        \n                                                                        TodoTask[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getId()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoCategory.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     number | null\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getName()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoCategory.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTodo()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoCategory.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     [] | null\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { TodoTask } from './TodoTask';\n\n/**\n * Categoey model\n */\nexport class TodoCategory {\n  constructor(\n    private name: string,\n    private id?: number,\n    private todo?: TodoTask[],\n  ) {}\n\n  public getName(): string {\n    return this.name;\n  }\n\n  public getId(): number | null {\n    return this.id;\n  }\n\n  public getTodo(): TodoTask[] | null {\n    return this.todo;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TodoController.html":{"url":"controllers/TodoController.html","title":"controller - TodoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TodoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/controller/todo/todo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                todo\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTodo\n                            \n                            \n                                    Async\n                                deleteTodo\n                            \n                            \n                                    Async\n                                getTodo\n                            \n                            \n                                    Async\n                                getTodos\n                            \n                            \n                                    Async\n                                updateTodo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addTodo(addTodo: AddTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiResponseType(MessagePresenter, undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/controller/todo/todo.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    addTodo\n                                    \n                                                AddTodoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTodo(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiResponseType(MessagePresenter, undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/controller/todo/todo.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTodo(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiResponseType(TodoPresenter, undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/controller/todo/todo.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTodos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTodos()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponseType(TodoPresenter, undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/controller/todo/todo.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateTodo\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTodo(updateTodoDto: UpdateTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiResponseType(MessagePresenter, undefined)\n                \n            \n\n            \n                \n                    Defined in src/api/controller/todo/todo.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateTodoDto\n                                    \n                                                UpdateTodoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { ApiTags, ApiResponse, ApiExtraModels } from '@nestjs/swagger';\nimport { ApiResponseType } from 'src/api/common/apiResponseDecorator';\nimport { AddTodoDto } from 'src/api/dto/addTodoDto';\nimport { UpdateTodoDto } from 'src/api/dto/updateTodoDto';\nimport { MessagePresenter } from 'src/api/presenter/messagePresenter';\nimport { TodoPresenter } from 'src/api/presenter/todoPresenter';\nimport { AddTodoCommand } from 'src/usecase/todo/command/addTodo/addTodoCommand';\nimport { DeleteTodoCommand } from 'src/usecase/todo/command/deleteTodo/deleteTodoCommand';\nimport { UpdateTodoCommand } from 'src/usecase/todo/command/updateTodo/updateTodoCommand';\nimport { GetAllTodoQuery } from 'src/usecase/todo/query/getAllTodo/getAllTodoQuery';\nimport { GetTodoByIdQuery } from 'src/usecase/todo/query/getAllTodoById/getTodoByIdQuery';\nimport { TodoResponse } from 'src/usecase/todo/query/getTodoResponse';\n/**\n *\n */\n@Controller('todo')\n@ApiTags('todo')\n@ApiResponse({ status: 500, description: 'Internal error' })\n@ApiExtraModels(TodoPresenter)\nexport class TodoController {\n  constructor(\n    private readonly commandBus: CommandBus,\n    private readonly queryBus: QueryBus,\n  ) {}\n\n  @Get(':id')\n  @ApiResponseType(TodoPresenter, false)\n  async getTodo(@Param('id', ParseIntPipe) id: number) {\n    const todo = await this.queryBus.execute(new GetTodoByIdQuery(id));\n    return new TodoPresenter(todo);\n  }\n\n  @Get()\n  @ApiResponseType(TodoPresenter, true)\n  async getTodos() {\n    const todos = await this.queryBus.execute(\n      new GetAllTodoQuery(),\n    );\n    return todos?.map((todo) => new TodoPresenter(todo));\n  }\n\n  @Put()\n  @ApiResponseType(MessagePresenter, false)\n  async updateTodo(@Body() updateTodoDto: UpdateTodoDto) {\n    const { id, content, isDone, categoryId } = updateTodoDto;\n    this.commandBus.execute(\n      new UpdateTodoCommand(id, content, isDone, categoryId),\n    );\n    return { message: 'success' };\n  }\n\n  @Delete(':id')\n  @ApiResponseType(MessagePresenter, false)\n  async deleteTodo(@Param('id', ParseIntPipe) id: number) {\n    await this.commandBus.execute(new DeleteTodoCommand(id));\n    return { message: 'success' };\n  }\n  @Post()\n  @ApiResponseType(MessagePresenter, false)\n  async addTodo(@Body() addTodo: AddTodoDto) {\n    const { content, isDone, category } = addTodo;\n    await this.commandBus.execute(\n      new AddTodoCommand(content, isDone, {\n        id: category.id,\n        name: category.name,\n      }),\n    );\n    return { message: 'success' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TodoPresenter.html":{"url":"classes/TodoPresenter.html","title":"class - TodoPresenter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TodoPresenter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/presenter/todoPresenter.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                content\n                            \n                            \n                                createdate\n                            \n                            \n                                id\n                            \n                            \n                                isDone\n                            \n                            \n                                updateddate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todo: TodoResponse)\n                    \n                \n                        \n                            \n                                Defined in src/api/presenter/todoPresenter.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todo\n                                                  \n                                                        \n                                                                        TodoResponse\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/todoPresenter.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/todoPresenter.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/todoPresenter.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/todoPresenter.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/todoPresenter.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateddate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/presenter/todoPresenter.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { TodoResponse } from 'src/usecase/todo/query/getTodoResponse';\nimport { CategoryDto } from '../dto/categprydto';\n\nexport class TodoPresenter {\n  @ApiProperty()\n  id: number;\n  @ApiProperty()\n  content: string;\n  @ApiProperty()\n  isDone: boolean;\n  @ApiProperty()\n  createdate: Date;\n  @ApiProperty()\n  updateddate: Date;\n  @ApiProperty()\n  category: CategoryDto;\n\n  constructor(todo: TodoResponse) {\n    this.id = todo.id;\n    this.content = todo.content;\n    this.isDone = todo.isDone;\n    this.createdate = todo.createdDate;\n    this.category = todo.category;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TodoRepository.html":{"url":"injectables/TodoRepository.html","title":"injectable - TodoRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TodoRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/repositories/todo.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                getByCategoryName\n                            \n                            \n                                    Async\n                                insert\n                            \n                            \n                                    Private\n                                toEntity\n                            \n                            \n                                    Private\n                                toModel\n                            \n                            \n                                    Async\n                                updateContent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todoRepo: Repository, categoryRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/repositories/todo.repository.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todoRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoryRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByCategoryName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByCategoryName(categoryName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        insert\n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(todo: TodoTask)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    todo\n                                    \n                                                TodoTask\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toEntity\n                        \n                    \n                \n            \n            \n                \n                    \n                    toEntity(todoModel: TodoTask)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    todoModel\n                                    \n                                                TodoTask\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Todo\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toModel\n                        \n                    \n                \n            \n            \n                \n                    \n                    toModel(todoEntity: Todo)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    todoEntity\n                                    \n                                                Todo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TodoTask\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateContent\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateContent(id: number, content: string, isDone?: boolean, categoryId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/repositories/todo.repository.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isDone\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    categoryId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ITodoRepository } from 'src/domain/interface/repository/ITodoRepository';\nimport { TodoCategory } from 'src/domain/model/TodoCategory';\nimport { TodoTask } from 'src/domain/model/TodoTask';\nimport { Repository } from 'typeorm/repository/Repository';\nimport { Category } from '../enity/category.entity';\n\nimport { Todo } from '../enity/todo.entity';\n\n@Injectable()\nexport class TodoRepository implements ITodoRepository {\n  constructor(\n    @InjectRepository(Todo)\n    private readonly todoRepo: Repository,\n    @InjectRepository(Category)\n    private readonly categoryRepo: Repository,\n  ) {}\n  async getByCategoryName(categoryName: string): Promise {\n    const todo = await this.todoRepo.findBy({\n      category: { name: categoryName },\n    });\n    return todo?.map((entity) => this.toModel(entity));\n  }\n\n  async insert(todo: TodoTask): Promise {\n    const categoryId = todo.getCategory()?.getId();\n    const categoryName = todo.getCategory()?.getName();\n\n    const todoEntity = this.toEntity(todo);\n    if (categoryId > 0) {\n      const category = await this.categoryRepo.findOneBy({\n        id: categoryId,\n      });\n      if (category) {\n        todoEntity.category = category;\n        await this.todoRepo.save(todoEntity);\n        return;\n      }\n    }\n    if (categoryName !== '') {\n      const category = new Category();\n      category.name = categoryName;\n      await this.categoryRepo.insert(category);\n      todoEntity.category = category;\n      await this.todoRepo.save(todoEntity);\n      return;\n    }\n  }\n  async findAll(): Promise {\n    const todoEntity = await this.todoRepo.find({\n      relations: ['category'],\n    });\n    return todoEntity?.map((entity) => this.toModel(entity));\n  }\n\n  async findById(id: number): Promise {\n    const todoEntity = await this.todoRepo.findOneBy({ id: id });\n    return this.toModel(todoEntity);\n  }\n\n  async updateContent(\n    id: number,\n    content: string,\n    isDone?: boolean,\n    categoryId?: number,\n  ): Promise {\n    const todo = await this.todoRepo.findOneBy({ id: id });\n    if (todo) {\n      if (content !== '' && content !== todo.content) {\n        todo.content = content;\n      }\n\n      if (isDone !== todo.isDone) todo.isDone = isDone;\n      if (categoryId > 0) {\n        const category = await this.categoryRepo.findOneByOrFail({\n          id: categoryId,\n        });\n        if (category) todo.category = category;\n        else throw new Error('Category not found');\n      }\n      await this.todoRepo.save(todo);\n    }\n  }\n  async deleteById(id: number): Promise {\n    await this.todoRepo.delete(id);\n  }\n\n  private toModel(todoEntity: Todo): TodoTask {\n    const todo: TodoTask = new TodoTask(\n      todoEntity.content,\n      todoEntity.isDone,\n      new TodoCategory(todoEntity.category?.name, todoEntity.category?.id),\n      todoEntity.id,\n      todoEntity.createdate,\n      todoEntity.updateddate,\n    );\n    return todo;\n  }\n  private toEntity(todoModel: TodoTask): Todo {\n    const todoEntity: Todo = new Todo();\n\n    todoEntity.id = todoModel.getId();\n    todoEntity.content = todoModel.getContent();\n    todoEntity.isDone = todoModel.getIsDone();\n    todoEntity.category = new Category();\n    todoEntity.category.name = todoModel.getCategory()?.getName();\n    todoEntity.category.id = todoModel.getCategory()?.getId();\n\n    return todoEntity;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TodoResponse.html":{"url":"classes/TodoResponse.html","title":"class - TodoResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TodoResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/query/getTodoResponse.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                category\n                            \n                            \n                                    Public\n                                    Readonly\n                                content\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                createdDate\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                isDone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number, content: string, isDone: boolean, createdDate?: Date, category?: Category)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/query/getTodoResponse.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        content\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isDone\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createdDate\n                                                  \n                                                        \n                                                                        Date\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        Category\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/query/getTodoResponse.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/query/getTodoResponse.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/query/getTodoResponse.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/query/getTodoResponse.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/query/getTodoResponse.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TodoResponse {\n  constructor(\n    public readonly id: number,\n    public readonly content: string,\n    public readonly isDone: boolean,\n    public readonly createdDate?: Date,\n    public readonly category?: Category,\n  ) {}\n}\nexport interface Category {\n  id: number;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TodoTask.html":{"url":"classes/TodoTask.html","title":"class - TodoTask","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TodoTask\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/domain/model/TodoTask.ts\n        \n\n\n            \n                Description\n            \n            \n                Todo model\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getCategory\n                            \n                            \n                                    Public\n                                getContent\n                            \n                            \n                                    Public\n                                getCreatedDate\n                            \n                            \n                                    Public\n                                getId\n                            \n                            \n                                    Public\n                                getIsDone\n                            \n                            \n                                    Public\n                                getUpdatedDate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(content: string, isDone: boolean, category: TodoCategory, id?: number, createdate?: Date, updateddate?: Date)\n                    \n                \n                        \n                            \n                                Defined in src/domain/model/TodoTask.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        content\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isDone\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        TodoCategory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        createdate\n                                                  \n                                                        \n                                                                        Date\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateddate\n                                                  \n                                                        \n                                                                        Date\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategory()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoTask.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         TodoCategory\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getContent\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContent()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoTask.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCreatedDate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCreatedDate()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoTask.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Date\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getId()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoTask.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getIsDone\n                        \n                    \n                \n            \n            \n                \n                    \n                    getIsDone()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoTask.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getUpdatedDate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUpdatedDate()\n                \n            \n\n\n            \n                \n                    Defined in src/domain/model/TodoTask.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Date\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { TodoCategory } from './TodoCategory';\n\n/**\n * Todo model\n */\nexport class TodoTask {\n  constructor(\n    private content: string,\n    private isDone: boolean,\n    private category: TodoCategory,\n    private id?: number,\n    private createdate?: Date,\n    private updateddate?: Date,\n  ) {\n    if (!content || content === '') {\n      throw new Error('Content is required'); // this be customized exception\n    }\n  }\n\n  public getId(): number {\n    return this.id;\n  }\n  public getContent(): string {\n    return this.content;\n  }\n  public getIsDone(): boolean {\n    return this.isDone;\n  }\n  public getCreatedDate(): Date {\n    return this.createdate;\n  }\n  public getUpdatedDate(): Date {\n    return this.updateddate;\n  }\n  public getCategory(): TodoCategory {\n    return this.category;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TypeormConfigModule.html":{"url":"modules/TypeormConfigModule.html","title":"module - TypeormConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    TypeormConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/config/typeorm/typeorm.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Todo } from 'src/infrastructure/enity/todo.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { Category } from 'src/infrastructure/enity/category.entity';\n\nconst typeOrmModuleOptions: TypeOrmModuleOptions = {\n  type: 'postgres',\n  url: process.env.DATABASE_URL,\n  autoLoadEntities: true,\n  schema: process.env.DATABASE_SCHEMA,\n  entities: [Todo, Category],\n  synchronize: true, //demo purpose only\n};\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    TypeOrmModule.forRoot(typeOrmModuleOptions),\n  ],\n})\nexport class TypeormConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTodoCommand.html":{"url":"classes/UpdateTodoCommand.html","title":"class - UpdateTodoCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTodoCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/command/updateTodo/updateTodoCommand.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                categoryId\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                isDone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number, content: string, isDone?: boolean, categoryId?: number)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/command/updateTodo/updateTodoCommand.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        content\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isDone\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoryId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/updateTodo/updateTodoCommand.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/updateTodo/updateTodoCommand.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/updateTodo/updateTodoCommand.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/usecase/todo/command/updateTodo/updateTodoCommand.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UpdateTodoCommand {\n  constructor(\n    public id: number,\n    public content: string,\n    public isDone?: boolean,\n    public categoryId?: number,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTodoCommandHandler.html":{"url":"classes/UpdateTodoCommandHandler.html","title":"class - UpdateTodoCommandHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTodoCommandHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/usecase/todo/command/updateTodo/updateTodoCommandHandler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                            \n                                    Private\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todoRepository: ITodoRepository, exception: IException)\n                    \n                \n                        \n                            \n                                Defined in src/usecase/todo/command/updateTodo/updateTodoCommandHandler.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todoRepository\n                                                  \n                                                        \n                                                                        ITodoRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exception\n                                                  \n                                                        \n                                                                        IException\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: UpdateTodoCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/command/updateTodo/updateTodoCommandHandler.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                UpdateTodoCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(updateCommand: UpdateTodoCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/usecase/todo/command/updateTodo/updateTodoCommandHandler.ts:30\n                \n            \n\n\n            \n                \n                    Validate the rquest\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateCommand\n                                    \n                                                UpdateTodoCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport {\n  IException,\n  IEXCEPTION,\n} from 'src/domain/interface/exception/IException';\nimport {\n  ITodoRepository,\n  ITODO_REPOSITORY,\n} from 'src/domain/interface/repository/ITodoRepository';\nimport { UpdateTodoCommand } from './updateTodoCommand';\n\n@CommandHandler(UpdateTodoCommand)\nexport class UpdateTodoCommandHandler\n  implements ICommandHandler\n{\n  constructor(\n    @Inject(ITODO_REPOSITORY) private readonly todoRepository: ITodoRepository,\n    @Inject(IEXCEPTION) private readonly exception: IException,\n  ) {}\n  async execute(command: UpdateTodoCommand): Promise {\n    this.validate(command);\n    const { id, isDone, content, categoryId } = command;\n    this.todoRepository.updateContent(id, content, isDone, categoryId);\n  }\n  /**\n   * Validate the rquest\n   * @param updateCommand {UpdateTodoCommand}\n   */\n  private validate(updateCommand: UpdateTodoCommand) {\n    const { id, content, categoryId } = updateCommand;\n    if (!id)\n      this.exception.badRequestException({ message: 'The id is required' });\n    if (!content || content === '')\n      this.exception.badRequestException({\n        message: 'The content cannot be empty',\n      });\n    if (categoryId \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTodoDto.html":{"url":"classes/UpdateTodoDto.html","title":"class - UpdateTodoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/dto/updateTodoDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                categoryId\n                            \n                            \n                                    Readonly\n                                content\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                isDone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/updateTodoDto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/updateTodoDto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/updateTodoDto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/dto/updateTodoDto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsNumber, IsBoolean, IsString } from 'class-validator';\n\nexport class UpdateTodoDto {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsNumber()\n  readonly id: number;\n\n  @ApiProperty()\n  @IsBoolean()\n  readonly isDone: boolean;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  readonly content: string;\n\n  @ApiProperty()\n  @IsNumber()\n  readonly categoryId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsecaseModule.html":{"url":"modules/UsecaseModule.html","title":"module - UsecaseModule","body":"\n                   \n\n\n\n\n    Modules\n    UsecaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsecaseModule\n\n\n\ncluster_UsecaseModule_imports\n\n\n\n\nExceptionsModule\n\nExceptionsModule\n\n\n\nUsecaseModule\n\nUsecaseModule\n\nUsecaseModule -->\n\nExceptionsModule->UsecaseModule\n\n\n\n\n\nRepositoriesModule\n\nRepositoriesModule\n\nUsecaseModule -->\n\nRepositoriesModule->UsecaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/usecase/usecase.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ExceptionsModule\n                        \n                        \n                            RepositoriesModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { ExceptionsModule } from 'src/infrastructure/exceptions/exceptions.module';\nimport { RepositoriesModule } from 'src/infrastructure/repositories/repositories.module';\nimport { CategoryCommandHandlers } from './category/command';\nimport { CategoryQueryHandlers } from './category/query';\nimport { TodoCommandHandlers } from './todo/command';\nimport { TodoQueryHandlers } from './todo/query';\n\n@Module({\n  imports: [CqrsModule, RepositoriesModule, ExceptionsModule],\n  providers: [\n    ...TodoQueryHandlers,\n    ...TodoCommandHandlers,\n    ...CategoryQueryHandlers,\n    ...CategoryCommandHandlers,\n  ],\n})\nexport class UsecaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/api/common/apiResponseDecorator.ts\n            \n            variable\n            ApiResponseType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/api/common/responseInterceptor.ts\n            \n            class\n            ResponseFormat\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/api/common/responseInterceptor.ts\n            \n            injectable\n            ResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/api/controller/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/controller/todo/todo.controller.ts\n            \n            controller\n            TodoController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/api/dto/addCategoryDto.ts\n            \n            class\n            AddCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/api/dto/addTodoDto.ts\n            \n            class\n            AddTodoDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/api/dto/categprydto.ts\n            \n            class\n            CategoryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/dto/updateTodoDto.ts\n            \n            class\n            UpdateTodoDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/api/presenter/categoryPresenter.ts\n            \n            class\n            CategoryPresenter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/api/presenter/messagePresenter.ts\n            \n            class\n            MessagePresenter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/api/presenter/todoPresenter.ts\n            \n            class\n            TodoPresenter\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/domain/interface/config/IDatabaseConfig.ts\n            \n            interface\n            IDatabaseConfig\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/domain/interface/exception/IError.ts\n            \n            interface\n            IError\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/interface/exception/IException.ts\n            \n            interface\n            IException\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/domain/interface/exception/IException.ts\n            \n            variable\n            IEXCEPTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/interface/exception/IFormatExceptionMessage.ts\n            \n            interface\n            IFormatExceptionMessage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/domain/interface/logger/ILogger.ts\n            \n            interface\n            ILogger\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/domain/interface/repository/ICategoryRepository.ts\n            \n            interface\n            ICategoryRepsoitory\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/domain/interface/repository/ICategoryRepository.ts\n            \n            variable\n            ICATEGORY_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/interface/repository/ITodoRepository.ts\n            \n            interface\n            ITodoRepository\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/domain/interface/repository/ITodoRepository.ts\n            \n            variable\n            ITODO_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/domain/model/TodoCategory.ts\n            \n            class\n            TodoCategory\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/domain/model/TodoTask.ts\n            \n            class\n            TodoTask\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/infrastructure/Interceptor/logging/LoggingInterceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/Interceptor/response/ResponseFormat.ts\n            \n            class\n            ResponseFormat\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/Interceptor/response/ResponseInterceptor.ts\n            \n            injectable\n            ResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/config/typeorm/typeorm.module.ts\n            \n            variable\n            typeOrmModuleOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/enity/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/enity/todo.entity.ts\n            \n            entity\n            Todo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/exceptions/exceptions.service.ts\n            \n            injectable\n            ExceptionsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/filter/AllExceptionFilter.ts\n            \n            class\n            AllExceptionFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/repositories/category.repossitory.ts\n            \n            injectable\n            CategoryRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/repositories/todo.repository.ts\n            \n            injectable\n            TodoRepository\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/usecase/category/command/addCategory/addCategoryCommand.ts\n            \n            class\n            AddCategoryCommand\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/usecase/category/command/addCategory/addCategoryCommandHandler.ts\n            \n            class\n            AddCategoryCommandHandler\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/usecase/category/command/index.ts\n            \n            variable\n            CategoryCommandHandlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/usecase/category/query/getAllCategory/categoryResponse.ts\n            \n            class\n            CategoryResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/usecase/category/query/getAllCategory/getAllCategoryQuery.ts\n            \n            class\n            GetAllCategoryQuery\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/usecase/category/query/getAllCategory/getAllCategoryQueryHandler.ts\n            \n            class\n            GetAllCategoryQueryHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usecase/category/query/index.ts\n            \n            variable\n            CategoryQueryHandlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/addTodo/addTodoCommand.ts\n            \n            class\n            AddTodoCommand\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/addTodo/addTodoCommand.ts\n            \n            interface\n            Category\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/addTodo/addTodoCommandHandler.ts\n            \n            class\n            AddTodoCommandHandler\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/deleteTodo/deleteTodoCommand.ts\n            \n            class\n            DeleteTodoCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/deleteTodo/deleteTodoCommandHandler.ts\n            \n            class\n            DeleteTodoCommandHandler\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/index.ts\n            \n            variable\n            TodoCommandHandlers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/updateTodo/updateTodoCommand.ts\n            \n            class\n            UpdateTodoCommand\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/usecase/todo/command/updateTodo/updateTodoCommandHandler.ts\n            \n            class\n            UpdateTodoCommandHandler\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/usecase/todo/query/getAllTodo/getAllTodoQuery.ts\n            \n            class\n            GetAllTodoQuery\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/usecase/todo/query/getAllTodo/getAllTodoQueryHandler.ts\n            \n            class\n            GetAllTodoQueryHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usecase/todo/query/getAllTodoById/getTodoByIdQuery.ts\n            \n            class\n            GetTodoByIdQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usecase/todo/query/getAllTodoById/getTodoByIdQueryHandler.ts\n            \n            class\n            GetTodoByIdQueryHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usecase/todo/query/getTodoResponse.ts\n            \n            class\n            TodoResponse\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/usecase/todo/query/getTodoResponse.ts\n            \n            interface\n            Category\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/usecase/todo/query/index.ts\n            \n            variable\n            TodoQueryHandlers\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.1.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/cqrs : ^8.0.4\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/typeorm : ^8.1.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            mysql2 : ^2.3.3\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n        \n            typeorm : ^0.3.6\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n  \n\nDescription\nTodo sample with clean architecture:\nFolder structure:\n -- src\n    -- api\n    -- domain\n    -- infrastructure\n    -- usecase\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExceptionsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepositoriesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TypeormConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsecaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nExceptionsModule\n\nExceptionsModule\n\n\n\nUsecaseModule\n\nUsecaseModule\n\nUsecaseModule -->\n\nExceptionsModule->UsecaseModule\n\n\n\nAppModule -->\n\nExceptionsModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nRepositoriesModule\n\nRepositoriesModule\n\nUsecaseModule -->\n\nRepositoriesModule->UsecaseModule\n\n\n\nAppModule -->\n\nRepositoriesModule->AppModule\n\n\n\n\n\nTypeormConfigModule\n\nTypeormConfigModule\n\nAppModule -->\n\nTypeormConfigModule->AppModule\n\n\n\nAppModule -->\n\nUsecaseModule->AppModule\n\n\n\n\n\nLoggerService\n\nLoggerService\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    28 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiResponseType   (src/.../apiResponseDecorator.ts)\n                        \n                        \n                            CategoryCommandHandlers   (src/.../index.ts)\n                        \n                        \n                            CategoryQueryHandlers   (src/.../index.ts)\n                        \n                        \n                            ICATEGORY_REPOSITORY   (src/.../ICategoryRepository.ts)\n                        \n                        \n                            IEXCEPTION   (src/.../IException.ts)\n                        \n                        \n                            ITODO_REPOSITORY   (src/.../ITodoRepository.ts)\n                        \n                        \n                            TodoCommandHandlers   (src/.../index.ts)\n                        \n                        \n                            TodoQueryHandlers   (src/.../index.ts)\n                        \n                        \n                            typeOrmModuleOptions   (src/.../typeorm.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/api/common/apiResponseDecorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiResponseType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : >(\n  model: TModel,\n  isArray: boolean,\n) => {\n  return applyDecorators(\n    ApiOkResponse({\n      isArray: isArray,\n      schema: {\n        allOf: [\n          { $ref: getSchemaPath(ResponseFormat) },\n          {\n            properties: {\n              data: {\n                $ref: getSchemaPath(model),\n              },\n              isArray: {\n                type: 'boolean',\n                default: isArray,\n              },\n            },\n          },\n        ],\n      },\n    }),\n  );\n}\n                    \n                \n\n\n        \n    \n\n    src/usecase/category/command/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CategoryCommandHandlers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [AddCategoryCommandHandler]\n                    \n                \n\n\n        \n    \n\n    src/usecase/category/query/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CategoryQueryHandlers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [GetAllCategoryQueryHandler]\n                    \n                \n\n\n        \n    \n\n    src/domain/interface/repository/ICategoryRepository.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ICATEGORY_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ICategoryRepsoitory'\n                    \n                \n\n\n        \n    \n\n    src/domain/interface/exception/IException.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IEXCEPTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'IException'\n                    \n                \n\n\n        \n    \n\n    src/domain/interface/repository/ITodoRepository.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ITODO_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ITodoRepository'\n                    \n                \n\n\n        \n    \n\n    src/usecase/todo/command/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TodoCommandHandlers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  UpdateTodoCommandHandler,\n  AddTodoCommandHandler,\n  DeleteTodoCommandHandler,\n]\n                    \n                \n\n\n        \n    \n\n    src/usecase/todo/query/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TodoQueryHandlers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  GetAllTodoQueryHandler,\n  GetTodoByIdQueryHandler,\n]\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/config/typeorm/typeorm.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        typeOrmModuleOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'postgres',\n  url: process.env.DATABASE_URL,\n  autoLoadEntities: true,\n  schema: process.env.DATABASE_SCHEMA,\n  entities: [Todo, Category],\n  synchronize: true, //demo purpose only\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
